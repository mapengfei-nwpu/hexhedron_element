// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.post0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __NAVIERSTOKES_H
#define __NAVIERSTOKES_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class navierstokes_finite_element_0: public ufc::finite_element
{
public:

  navierstokes_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Q', hexahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::hexahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 8;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Q";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
    vertex_values[4] = dof_values[4];
    vertex_values[5] = dof_values[5];
    vertex_values[6] = dof_values[6];
    vertex_values[7] = dof_values[7];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[12];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 5] = coordinate_dofs[15];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 6] = coordinate_dofs[18];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 7] = coordinate_dofs[21];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[23];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[24] = { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0 };
    std::copy_n(dof_X, 24, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes_finite_element_0();
  }

};


class navierstokes_finite_element_1: public ufc::finite_element
{
public:

  navierstokes_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Q', hexahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::hexahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 24;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Q";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 14:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 15:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 16:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 17:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 18:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 19:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 20:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 21:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 22:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 23:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[12] = vals[1];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[13] = vals[1];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[14] = vals[1];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[15] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[16] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[17] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[18] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[19] = vals[2];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[20] = vals[2];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[21] = vals[2];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[22] = vals[2];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[23] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    vertex_values[12] = dof_values[4];
    vertex_values[15] = dof_values[5];
    vertex_values[18] = dof_values[6];
    vertex_values[21] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[8];
    vertex_values[4] = dof_values[9];
    vertex_values[7] = dof_values[10];
    vertex_values[10] = dof_values[11];
    vertex_values[13] = dof_values[12];
    vertex_values[16] = dof_values[13];
    vertex_values[19] = dof_values[14];
    vertex_values[22] = dof_values[15];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[16];
    vertex_values[5] = dof_values[17];
    vertex_values[8] = dof_values[18];
    vertex_values[11] = dof_values[19];
    vertex_values[14] = dof_values[20];
    vertex_values[17] = dof_values[21];
    vertex_values[20] = dof_values[22];
    vertex_values[23] = dof_values[23];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[12];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 5] = coordinate_dofs[15];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 6] = coordinate_dofs[18];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 7] = coordinate_dofs[21];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 12] = coordinate_dofs[12];
    dof_coordinates[3 * 12 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 12 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 13] = coordinate_dofs[15];
    dof_coordinates[3 * 13 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 13 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 14] = coordinate_dofs[18];
    dof_coordinates[3 * 14 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 14 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 15] = coordinate_dofs[21];
    dof_coordinates[3 * 15 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 15 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 16] = coordinate_dofs[0];
    dof_coordinates[3 * 16 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 16 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 17] = coordinate_dofs[3];
    dof_coordinates[3 * 17 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 17 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 18] = coordinate_dofs[6];
    dof_coordinates[3 * 18 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 18 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 19] = coordinate_dofs[9];
    dof_coordinates[3 * 19 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 19 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 20] = coordinate_dofs[12];
    dof_coordinates[3 * 20 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 20 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 21] = coordinate_dofs[15];
    dof_coordinates[3 * 21 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 21 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 22] = coordinate_dofs[18];
    dof_coordinates[3 * 22 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 22 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 23] = coordinate_dofs[21];
    dof_coordinates[3 * 23 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 23 + 2] = coordinate_dofs[23];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[72] = { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0 };
    std::copy_n(dof_X, 72, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_finite_element_0();
    case 1:
        return new navierstokes_finite_element_0();
    case 2:
        return new navierstokes_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes_finite_element_1();
  }

};


class navierstokes_finite_element_2: public ufc::finite_element
{
public:

  navierstokes_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Q', hexahedron, 2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::hexahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 27;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Q";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 20:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 21:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 22:
        {
            y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 23:
        {
            y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 24:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 25:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 26:
        {
            y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
            y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
            y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[21] = vals[0];
    y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[22] = vals[0];
    y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[23] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[24] = vals[0];
    y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[25] = vals[0];
    y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[26] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[3];
    vertex_values[3] = dof_values[4];
    vertex_values[4] = dof_values[9];
    vertex_values[5] = dof_values[10];
    vertex_values[6] = dof_values[12];
    vertex_values[7] = dof_values[13];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 2 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 2 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 3] = coordinate_dofs[6];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 4] = coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 7] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 8 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 8 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 9] = coordinate_dofs[12];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 10] = coordinate_dofs[15];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 11] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 11 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 11 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 12] = coordinate_dofs[18];
    dof_coordinates[3 * 12 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 12 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 13] = coordinate_dofs[21];
    dof_coordinates[3 * 13 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 13 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 14] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 14 + 1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 14 + 2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 15] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 15 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 15 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 16] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 16 + 1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 16 + 2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 17] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 17 + 1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 17 + 2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 18] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    dof_coordinates[3 * 18 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    dof_coordinates[3 * 18 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    dof_coordinates[3 * 19] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 19 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 19 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 20] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    dof_coordinates[3 * 20 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    dof_coordinates[3 * 20 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    dof_coordinates[3 * 21] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 21 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 21 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 22] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 22 + 1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 22 + 2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 23] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 23 + 1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 23 + 2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 24] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    dof_coordinates[3 * 24 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    dof_coordinates[3 * 24 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    dof_coordinates[3 * 25] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 25 + 1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 25 + 2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 26] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    dof_coordinates[3 * 26 + 1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    dof_coordinates[3 * 26 + 2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[81] = { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 1.0, 0.0, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.5, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 0.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.0, 1.0, 0.5, 0.0, 0.5, 0.5, 1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5 };
    std::copy_n(dof_X, 81, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes_finite_element_2();
  }

};


class navierstokes_finite_element_3: public ufc::finite_element
{
public:

  navierstokes_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Q', hexahedron, 2), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::hexahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 81;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Q";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 20:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 21:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 22:
        {
            y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 23:
        {
            y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 24:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 25:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 26:
        {
            y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
            y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
            y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 27:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 28:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 29:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 30:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 31:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 32:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 33:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 34:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 35:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 36:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 37:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 38:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 39:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 40:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 41:
        {
            y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 42:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 43:
        {
            y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 44:
        {
            y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 45:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 46:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 47:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 48:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 49:
        {
            y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 50:
        {
            y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 51:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 52:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 53:
        {
            y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
            y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
            y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 54:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 55:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 56:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 57:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 58:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 59:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 60:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 61:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 62:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 63:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 64:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 65:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 66:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 67:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 68:
        {
            y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 69:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 70:
        {
            y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 71:
        {
            y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 72:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 73:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 74:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 75:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 76:
        {
            y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 77:
        {
            y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 78:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 79:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 80:
        {
            y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
            y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
            y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[21] = vals[0];
    y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[22] = vals[0];
    y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[23] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[24] = vals[0];
    y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[25] = vals[0];
    y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[26] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[27] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[28] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[29] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[30] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[31] = vals[1];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[32] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[33] = vals[1];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[34] = vals[1];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[35] = vals[1];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[36] = vals[1];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[37] = vals[1];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[38] = vals[1];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[39] = vals[1];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[40] = vals[1];
    y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[41] = vals[1];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[42] = vals[1];
    y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[43] = vals[1];
    y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[44] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[45] = vals[1];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[46] = vals[1];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[47] = vals[1];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[48] = vals[1];
    y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[49] = vals[1];
    y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[50] = vals[1];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[51] = vals[1];
    y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[52] = vals[1];
    y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[53] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[54] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[55] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[56] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[57] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[58] = vals[2];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[59] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[60] = vals[2];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[61] = vals[2];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[62] = vals[2];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[63] = vals[2];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[64] = vals[2];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[65] = vals[2];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[66] = vals[2];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[67] = vals[2];
    y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[68] = vals[2];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[69] = vals[2];
    y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[70] = vals[2];
    y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[71] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[72] = vals[2];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[73] = vals[2];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[74] = vals[2];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[75] = vals[2];
    y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[76] = vals[2];
    y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[77] = vals[2];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[78] = vals[2];
    y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[79] = vals[2];
    y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[80] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[3];
    vertex_values[9] = dof_values[4];
    vertex_values[12] = dof_values[9];
    vertex_values[15] = dof_values[10];
    vertex_values[18] = dof_values[12];
    vertex_values[21] = dof_values[13];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[27];
    vertex_values[4] = dof_values[28];
    vertex_values[7] = dof_values[30];
    vertex_values[10] = dof_values[31];
    vertex_values[13] = dof_values[36];
    vertex_values[16] = dof_values[37];
    vertex_values[19] = dof_values[39];
    vertex_values[22] = dof_values[40];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[54];
    vertex_values[5] = dof_values[55];
    vertex_values[8] = dof_values[57];
    vertex_values[11] = dof_values[58];
    vertex_values[14] = dof_values[63];
    vertex_values[17] = dof_values[64];
    vertex_values[20] = dof_values[66];
    vertex_values[23] = dof_values[67];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 2 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 2 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 3] = coordinate_dofs[6];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 4] = coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 7] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 8 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 8 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 9] = coordinate_dofs[12];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 10] = coordinate_dofs[15];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 11] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 11 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 11 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 12] = coordinate_dofs[18];
    dof_coordinates[3 * 12 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 12 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 13] = coordinate_dofs[21];
    dof_coordinates[3 * 13 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 13 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 14] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 14 + 1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 14 + 2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 15] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 15 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 15 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 16] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 16 + 1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 16 + 2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 17] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 17 + 1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 17 + 2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 18] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    dof_coordinates[3 * 18 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    dof_coordinates[3 * 18 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    dof_coordinates[3 * 19] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 19 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 19 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 20] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    dof_coordinates[3 * 20 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    dof_coordinates[3 * 20 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    dof_coordinates[3 * 21] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 21 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 21 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 22] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 22 + 1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 22 + 2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 23] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 23 + 1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 23 + 2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 24] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    dof_coordinates[3 * 24 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    dof_coordinates[3 * 24 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    dof_coordinates[3 * 25] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 25 + 1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 25 + 2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 26] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    dof_coordinates[3 * 26 + 1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    dof_coordinates[3 * 26 + 2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    dof_coordinates[3 * 27] = coordinate_dofs[0];
    dof_coordinates[3 * 27 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 27 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 28] = coordinate_dofs[3];
    dof_coordinates[3 * 28 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 28 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 29] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 29 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 29 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 30] = coordinate_dofs[6];
    dof_coordinates[3 * 30 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 30 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 31] = coordinate_dofs[9];
    dof_coordinates[3 * 31 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 31 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 32] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 32 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 32 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 33] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 33 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 33 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 34] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 34 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 34 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 35] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 35 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 35 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 36] = coordinate_dofs[12];
    dof_coordinates[3 * 36 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 36 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 37] = coordinate_dofs[15];
    dof_coordinates[3 * 37 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 37 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 38] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 38 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 38 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 39] = coordinate_dofs[18];
    dof_coordinates[3 * 39 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 39 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 40] = coordinate_dofs[21];
    dof_coordinates[3 * 40 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 40 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 41] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 41 + 1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 41 + 2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 42] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 42 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 42 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 43] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 43 + 1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 43 + 2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 44] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 44 + 1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 44 + 2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 45] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    dof_coordinates[3 * 45 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    dof_coordinates[3 * 45 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    dof_coordinates[3 * 46] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 46 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 46 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 47] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    dof_coordinates[3 * 47 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    dof_coordinates[3 * 47 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    dof_coordinates[3 * 48] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 48 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 48 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 49] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 49 + 1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 49 + 2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 50] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 50 + 1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 50 + 2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 51] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    dof_coordinates[3 * 51 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    dof_coordinates[3 * 51 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    dof_coordinates[3 * 52] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 52 + 1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 52 + 2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 53] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    dof_coordinates[3 * 53 + 1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    dof_coordinates[3 * 53 + 2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    dof_coordinates[3 * 54] = coordinate_dofs[0];
    dof_coordinates[3 * 54 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 54 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 55] = coordinate_dofs[3];
    dof_coordinates[3 * 55 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 55 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 56] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 56 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 56 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 57] = coordinate_dofs[6];
    dof_coordinates[3 * 57 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 57 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 58] = coordinate_dofs[9];
    dof_coordinates[3 * 58 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 58 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 59] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 59 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 59 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 60] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 60 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 60 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 61] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 61 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 61 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 62] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 62 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 62 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 63] = coordinate_dofs[12];
    dof_coordinates[3 * 63 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 63 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 64] = coordinate_dofs[15];
    dof_coordinates[3 * 64 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 64 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 65] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 65 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 65 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 66] = coordinate_dofs[18];
    dof_coordinates[3 * 66 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 66 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 67] = coordinate_dofs[21];
    dof_coordinates[3 * 67 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 67 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 68] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 68 + 1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 68 + 2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 69] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 69 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 69 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 70] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 70 + 1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 70 + 2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 71] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 71 + 1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 71 + 2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 72] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    dof_coordinates[3 * 72 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    dof_coordinates[3 * 72 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    dof_coordinates[3 * 73] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 73 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 73 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 74] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    dof_coordinates[3 * 74 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    dof_coordinates[3 * 74 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    dof_coordinates[3 * 75] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 75 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 75 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 76] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 76 + 1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 76 + 2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 77] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 77 + 1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 77 + 2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 78] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    dof_coordinates[3 * 78 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    dof_coordinates[3 * 78 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    dof_coordinates[3 * 79] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 79 + 1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 79 + 2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 80] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    dof_coordinates[3 * 80 + 1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    dof_coordinates[3 * 80 + 2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[243] = { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 1.0, 0.0, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.5, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 0.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.0, 1.0, 0.5, 0.0, 0.5, 0.5, 1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 1.0, 0.0, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.5, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 0.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.0, 1.0, 0.5, 0.0, 0.5, 0.5, 1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 1.0, 0.0, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.5, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 0.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.0, 1.0, 0.5, 0.0, 0.5, 0.5, 1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5 };
    std::copy_n(dof_X, 243, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_finite_element_2();
    case 1:
        return new navierstokes_finite_element_2();
    case 2:
        return new navierstokes_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes_finite_element_3();
  }

};


class navierstokes_finite_element_4: public ufc::finite_element
{
public:

  navierstokes_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Q', hexahedron, 2), dim=3), FiniteElement('Q', hexahedron, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::hexahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 89;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 4 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 4;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 4 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 4;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[4];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 11:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 14:
        {
            y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 15:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 16:
        {
            y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 17:
        {
            y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 18:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 19:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 20:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 21:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 22:
        {
            y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 23:
        {
            y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 24:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 25:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 26:
        {
            y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
            y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
            y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 27:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 28:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 29:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 30:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 31:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 32:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 33:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 34:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 35:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 36:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 37:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 38:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 39:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 40:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 41:
        {
            y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 42:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 43:
        {
            y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 44:
        {
            y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 45:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 46:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 47:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 48:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 49:
        {
            y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 50:
        {
            y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 51:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 52:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 53:
        {
            y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
            y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
            y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 54:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 55:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 56:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 57:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 58:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 59:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 60:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 61:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 62:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 63:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 64:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 65:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 66:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 67:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 68:
        {
            y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 69:
        {
            y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 70:
        {
            y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 71:
        {
            y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 72:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 73:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 74:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 75:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 76:
        {
            y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
            y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
            y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 77:
        {
            y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 78:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 79:
        {
            y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
            y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
            y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 80:
        {
            y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
            y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
            y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 81:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 82:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 83:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 84:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 85:
        {
            y[0] = coordinate_dofs[12];
            y[1] = coordinate_dofs[13];
            y[2] = coordinate_dofs[14];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 86:
        {
            y[0] = coordinate_dofs[15];
            y[1] = coordinate_dofs[16];
            y[2] = coordinate_dofs[17];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 87:
        {
            y[0] = coordinate_dofs[18];
            y[1] = coordinate_dofs[19];
            y[2] = coordinate_dofs[20];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 88:
        {
            y[0] = coordinate_dofs[21];
            y[1] = coordinate_dofs[22];
            y[2] = coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[4];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[21] = vals[0];
    y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[22] = vals[0];
    y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[23] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[24] = vals[0];
    y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[25] = vals[0];
    y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[26] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[27] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[28] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[29] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[30] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[31] = vals[1];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[32] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[33] = vals[1];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[34] = vals[1];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[35] = vals[1];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[36] = vals[1];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[37] = vals[1];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[38] = vals[1];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[39] = vals[1];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[40] = vals[1];
    y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[41] = vals[1];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[42] = vals[1];
    y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[43] = vals[1];
    y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[44] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[45] = vals[1];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[46] = vals[1];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[47] = vals[1];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[48] = vals[1];
    y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[49] = vals[1];
    y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[50] = vals[1];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[51] = vals[1];
    y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[52] = vals[1];
    y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[53] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[54] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[55] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[56] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[57] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[58] = vals[2];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[59] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[60] = vals[2];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[61] = vals[2];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[62] = vals[2];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[63] = vals[2];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[64] = vals[2];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[65] = vals[2];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[66] = vals[2];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[67] = vals[2];
    y[0] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[68] = vals[2];
    y[0] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[69] = vals[2];
    y[0] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[70] = vals[2];
    y[0] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[71] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[72] = vals[2];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[73] = vals[2];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[74] = vals[2];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[75] = vals[2];
    y[0] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    y[1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    y[2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[76] = vals[2];
    y[0] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[77] = vals[2];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[78] = vals[2];
    y[0] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    y[1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    y[2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[79] = vals[2];
    y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[80] = vals[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[81] = vals[3];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[82] = vals[3];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[83] = vals[3];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[84] = vals[3];
    y[0] = coordinate_dofs[12];
    y[1] = coordinate_dofs[13];
    y[2] = coordinate_dofs[14];
    f.evaluate(vals, y, c);
    values[85] = vals[3];
    y[0] = coordinate_dofs[15];
    y[1] = coordinate_dofs[16];
    y[2] = coordinate_dofs[17];
    f.evaluate(vals, y, c);
    values[86] = vals[3];
    y[0] = coordinate_dofs[18];
    y[1] = coordinate_dofs[19];
    y[2] = coordinate_dofs[20];
    f.evaluate(vals, y, c);
    values[87] = vals[3];
    y[0] = coordinate_dofs[21];
    y[1] = coordinate_dofs[22];
    y[2] = coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[88] = vals[3];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[4] = dof_values[1];
    vertex_values[8] = dof_values[3];
    vertex_values[12] = dof_values[4];
    vertex_values[16] = dof_values[9];
    vertex_values[20] = dof_values[10];
    vertex_values[24] = dof_values[12];
    vertex_values[28] = dof_values[13];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[27];
    vertex_values[5] = dof_values[28];
    vertex_values[9] = dof_values[30];
    vertex_values[13] = dof_values[31];
    vertex_values[17] = dof_values[36];
    vertex_values[21] = dof_values[37];
    vertex_values[25] = dof_values[39];
    vertex_values[29] = dof_values[40];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[54];
    vertex_values[6] = dof_values[55];
    vertex_values[10] = dof_values[57];
    vertex_values[14] = dof_values[58];
    vertex_values[18] = dof_values[63];
    vertex_values[22] = dof_values[64];
    vertex_values[26] = dof_values[66];
    vertex_values[30] = dof_values[67];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[81];
    vertex_values[7] = dof_values[82];
    vertex_values[11] = dof_values[83];
    vertex_values[15] = dof_values[84];
    vertex_values[19] = dof_values[85];
    vertex_values[23] = dof_values[86];
    vertex_values[27] = dof_values[87];
    vertex_values[31] = dof_values[88];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 2 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 2 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 3] = coordinate_dofs[6];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 4] = coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 7] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 8 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 8 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 9] = coordinate_dofs[12];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 10] = coordinate_dofs[15];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 11] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 11 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 11 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 12] = coordinate_dofs[18];
    dof_coordinates[3 * 12 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 12 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 13] = coordinate_dofs[21];
    dof_coordinates[3 * 13 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 13 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 14] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 14 + 1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 14 + 2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 15] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 15 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 15 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 16] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 16 + 1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 16 + 2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 17] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 17 + 1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 17 + 2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 18] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    dof_coordinates[3 * 18 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    dof_coordinates[3 * 18 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    dof_coordinates[3 * 19] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 19 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 19 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 20] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    dof_coordinates[3 * 20 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    dof_coordinates[3 * 20 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    dof_coordinates[3 * 21] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 21 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 21 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 22] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 22 + 1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 22 + 2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 23] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 23 + 1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 23 + 2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 24] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    dof_coordinates[3 * 24 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    dof_coordinates[3 * 24 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    dof_coordinates[3 * 25] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 25 + 1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 25 + 2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 26] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    dof_coordinates[3 * 26 + 1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    dof_coordinates[3 * 26 + 2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    dof_coordinates[3 * 27] = coordinate_dofs[0];
    dof_coordinates[3 * 27 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 27 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 28] = coordinate_dofs[3];
    dof_coordinates[3 * 28 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 28 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 29] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 29 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 29 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 30] = coordinate_dofs[6];
    dof_coordinates[3 * 30 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 30 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 31] = coordinate_dofs[9];
    dof_coordinates[3 * 31 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 31 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 32] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 32 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 32 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 33] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 33 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 33 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 34] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 34 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 34 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 35] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 35 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 35 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 36] = coordinate_dofs[12];
    dof_coordinates[3 * 36 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 36 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 37] = coordinate_dofs[15];
    dof_coordinates[3 * 37 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 37 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 38] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 38 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 38 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 39] = coordinate_dofs[18];
    dof_coordinates[3 * 39 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 39 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 40] = coordinate_dofs[21];
    dof_coordinates[3 * 40 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 40 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 41] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 41 + 1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 41 + 2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 42] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 42 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 42 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 43] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 43 + 1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 43 + 2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 44] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 44 + 1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 44 + 2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 45] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    dof_coordinates[3 * 45 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    dof_coordinates[3 * 45 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    dof_coordinates[3 * 46] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 46 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 46 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 47] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    dof_coordinates[3 * 47 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    dof_coordinates[3 * 47 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    dof_coordinates[3 * 48] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 48 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 48 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 49] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 49 + 1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 49 + 2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 50] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 50 + 1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 50 + 2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 51] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    dof_coordinates[3 * 51 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    dof_coordinates[3 * 51 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    dof_coordinates[3 * 52] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 52 + 1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 52 + 2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 53] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    dof_coordinates[3 * 53 + 1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    dof_coordinates[3 * 53 + 2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    dof_coordinates[3 * 54] = coordinate_dofs[0];
    dof_coordinates[3 * 54 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 54 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 55] = coordinate_dofs[3];
    dof_coordinates[3 * 55 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 55 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 56] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 56 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 56 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 57] = coordinate_dofs[6];
    dof_coordinates[3 * 57 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 57 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 58] = coordinate_dofs[9];
    dof_coordinates[3 * 58 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 58 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 59] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 59 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 59 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 60] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 60 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 60 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 61] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 61 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 61 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 62] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 62 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 62 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 63] = coordinate_dofs[12];
    dof_coordinates[3 * 63 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 63 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 64] = coordinate_dofs[15];
    dof_coordinates[3 * 64 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 64 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 65] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 65 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 65 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 66] = coordinate_dofs[18];
    dof_coordinates[3 * 66 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 66 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 67] = coordinate_dofs[21];
    dof_coordinates[3 * 67 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 67 + 2] = coordinate_dofs[23];
    dof_coordinates[3 * 68] = 0.5 * coordinate_dofs[18] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 68 + 1] = 0.5 * coordinate_dofs[19] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 68 + 2] = 0.5 * coordinate_dofs[20] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 69] = 0.5 * coordinate_dofs[12] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 69 + 1] = 0.5 * coordinate_dofs[13] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 69 + 2] = 0.5 * coordinate_dofs[14] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 70] = 0.5 * coordinate_dofs[15] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 70 + 1] = 0.5 * coordinate_dofs[16] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 70 + 2] = 0.5 * coordinate_dofs[17] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 71] = 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 71 + 1] = 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 71 + 2] = 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 72] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[12];
    dof_coordinates[3 * 72 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[13];
    dof_coordinates[3 * 72 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[14];
    dof_coordinates[3 * 73] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[15];
    dof_coordinates[3 * 73 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[16];
    dof_coordinates[3 * 73 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[17];
    dof_coordinates[3 * 74] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[15];
    dof_coordinates[3 * 74 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[16];
    dof_coordinates[3 * 74 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[17];
    dof_coordinates[3 * 75] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[18];
    dof_coordinates[3 * 75 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[19];
    dof_coordinates[3 * 75 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[20];
    dof_coordinates[3 * 76] = 0.5 * coordinate_dofs[9] + 0.5 * coordinate_dofs[21];
    dof_coordinates[3 * 76 + 1] = 0.5 * coordinate_dofs[10] + 0.5 * coordinate_dofs[22];
    dof_coordinates[3 * 76 + 2] = 0.5 * coordinate_dofs[11] + 0.5 * coordinate_dofs[23];
    dof_coordinates[3 * 77] = 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[18] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 77 + 1] = 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[19] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 77 + 2] = 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[20] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 78] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[12] + 0.25 * coordinate_dofs[18];
    dof_coordinates[3 * 78 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[13] + 0.25 * coordinate_dofs[19];
    dof_coordinates[3 * 78 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[14] + 0.25 * coordinate_dofs[20];
    dof_coordinates[3 * 79] = 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[9] + 0.25 * coordinate_dofs[15] + 0.25 * coordinate_dofs[21];
    dof_coordinates[3 * 79 + 1] = 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[10] + 0.25 * coordinate_dofs[16] + 0.25 * coordinate_dofs[22];
    dof_coordinates[3 * 79 + 2] = 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[11] + 0.25 * coordinate_dofs[17] + 0.25 * coordinate_dofs[23];
    dof_coordinates[3 * 80] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    dof_coordinates[3 * 80 + 1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    dof_coordinates[3 * 80 + 2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    dof_coordinates[3 * 81] = coordinate_dofs[0];
    dof_coordinates[3 * 81 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 81 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 82] = coordinate_dofs[3];
    dof_coordinates[3 * 82 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 82 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 83] = coordinate_dofs[6];
    dof_coordinates[3 * 83 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 83 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 84] = coordinate_dofs[9];
    dof_coordinates[3 * 84 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 84 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 85] = coordinate_dofs[12];
    dof_coordinates[3 * 85 + 1] = coordinate_dofs[13];
    dof_coordinates[3 * 85 + 2] = coordinate_dofs[14];
    dof_coordinates[3 * 86] = coordinate_dofs[15];
    dof_coordinates[3 * 86 + 1] = coordinate_dofs[16];
    dof_coordinates[3 * 86 + 2] = coordinate_dofs[17];
    dof_coordinates[3 * 87] = coordinate_dofs[18];
    dof_coordinates[3 * 87 + 1] = coordinate_dofs[19];
    dof_coordinates[3 * 87 + 2] = coordinate_dofs[20];
    dof_coordinates[3 * 88] = coordinate_dofs[21];
    dof_coordinates[3 * 88 + 1] = coordinate_dofs[22];
    dof_coordinates[3 * 88 + 2] = coordinate_dofs[23];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[267] = { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 1.0, 0.0, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.5, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 0.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.0, 1.0, 0.5, 0.0, 0.5, 0.5, 1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 1.0, 0.0, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.5, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 0.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.0, 1.0, 0.5, 0.0, 0.5, 0.5, 1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 1.0, 0.0, 0.5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.5, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5, 1.0, 0.5, 0.0, 1.0, 0.5, 1.0, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.5, 0.0, 1.0, 0.5, 0.0, 0.5, 0.5, 1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 1.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0 };
    std::copy_n(dof_X, 267, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_finite_element_3();
    case 1:
        return new navierstokes_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes_finite_element_4();
  }

};


class navierstokes_finite_element_5: public ufc::finite_element
{
public:

  navierstokes_finite_element_5() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes_finite_element_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', hexahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::hexahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis: Function is not supported/implemented.");
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    throw std::runtime_error("evaluate_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    throw std::runtime_error("transform_reference_basis_derivatives: Function is not supported/implemented.");
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    throw std::runtime_error("evaluate_basis: Function is not supported/implemented.");
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    throw std::runtime_error("evaluate_basis_all: Function is not supported/implemented.");
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives: Function is not supported/implemented." << std::endl;
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    std::cerr << "*** FFC warning: " << "evaluate_basis_derivatives_all: Function is not supported/implemented." << std::endl;
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
            y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
            y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    y[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    y[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
    vertex_values[4] = dof_values[0];
    vertex_values[5] = dof_values[0];
    vertex_values[6] = dof_values[0];
    vertex_values[7] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.125 * coordinate_dofs[0] + 0.125 * coordinate_dofs[3] + 0.125 * coordinate_dofs[6] + 0.125 * coordinate_dofs[9] + 0.125 * coordinate_dofs[12] + 0.125 * coordinate_dofs[15] + 0.125 * coordinate_dofs[18] + 0.125 * coordinate_dofs[21];
    dof_coordinates[1] = 0.125 * coordinate_dofs[1] + 0.125 * coordinate_dofs[4] + 0.125 * coordinate_dofs[7] + 0.125 * coordinate_dofs[10] + 0.125 * coordinate_dofs[13] + 0.125 * coordinate_dofs[16] + 0.125 * coordinate_dofs[19] + 0.125 * coordinate_dofs[22];
    dof_coordinates[2] = 0.125 * coordinate_dofs[2] + 0.125 * coordinate_dofs[5] + 0.125 * coordinate_dofs[8] + 0.125 * coordinate_dofs[11] + 0.125 * coordinate_dofs[14] + 0.125 * coordinate_dofs[17] + 0.125 * coordinate_dofs[20] + 0.125 * coordinate_dofs[23];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[3] = { 0.5, 0.5, 0.5 };
    std::copy_n(dof_X, 3, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes_finite_element_5();
  }

};


class navierstokes_dofmap_0: public ufc::dofmap
{
public:

  navierstokes_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Q', hexahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 8;
  }

  std::size_t num_element_dofs() const final override
  {
    return 8;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 4;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 2, 4, 8 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
    dofs[4] = entity_indices[0][4];
    dofs[5] = entity_indices[0][5];
    dofs[6] = entity_indices[0][6];
    dofs[7] = entity_indices[0][7];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 3;
        break;
    case 1:
        dofs[0] = 4;
        dofs[1] = 5;
        dofs[2] = 6;
        dofs[3] = 7;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        break;
    case 3:
        dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        break;
    case 4:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        break;
    case 5:
        dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        case 4:
            dofs[0] = 4;
            break;
        case 5:
            dofs[0] = 5;
            break;
        case 6:
            dofs[0] = 6;
            break;
        case 7:
            dofs[0] = 7;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        case 4:
            dofs[0] = 4;
            break;
        case 5:
            dofs[0] = 5;
            break;
        case 6:
            dofs[0] = 6;
            break;
        case 7:
            dofs[0] = 7;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        case 1:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 4;
            dofs[1] = 5;
            break;
        case 3:
            dofs[0] = 6;
            dofs[1] = 7;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        case 6:
            dofs[0] = 4;
            dofs[1] = 6;
            break;
        case 7:
            dofs[0] = 5;
            dofs[1] = 7;
            break;
        case 8:
            dofs[0] = 0;
            dofs[1] = 4;
            break;
        case 9:
            dofs[0] = 1;
            dofs[1] = 5;
            break;
        case 10:
            dofs[0] = 2;
            dofs[1] = 6;
            break;
        case 11:
            dofs[0] = 3;
            dofs[1] = 7;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 5;
            dofs[2] = 6;
            dofs[3] = 7;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            break;
        case 3:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes_dofmap_0();
  }

};


class navierstokes_dofmap_1: public ufc::dofmap
{
public:

  navierstokes_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Q', hexahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 24;
  }

  std::size_t num_element_dofs() const final override
  {
    return 24;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 12;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 6, 12, 24 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    dofs[4] = offset + entity_indices[0][4];
    dofs[5] = offset + entity_indices[0][5];
    dofs[6] = offset + entity_indices[0][6];
    dofs[7] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    dofs[12] = offset + entity_indices[0][4];
    dofs[13] = offset + entity_indices[0][5];
    dofs[14] = offset + entity_indices[0][6];
    dofs[15] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[16] = offset + entity_indices[0][0];
    dofs[17] = offset + entity_indices[0][1];
    dofs[18] = offset + entity_indices[0][2];
    dofs[19] = offset + entity_indices[0][3];
    dofs[20] = offset + entity_indices[0][4];
    dofs[21] = offset + entity_indices[0][5];
    dofs[22] = offset + entity_indices[0][6];
    dofs[23] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 3;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 10;
        dofs[7] = 11;
        dofs[8] = 16;
        dofs[9] = 17;
        dofs[10] = 18;
        dofs[11] = 19;
        break;
    case 1:
        dofs[0] = 4;
        dofs[1] = 5;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 12;
        dofs[5] = 13;
        dofs[6] = 14;
        dofs[7] = 15;
        dofs[8] = 20;
        dofs[9] = 21;
        dofs[10] = 22;
        dofs[11] = 23;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 12;
        dofs[7] = 13;
        dofs[8] = 16;
        dofs[9] = 17;
        dofs[10] = 20;
        dofs[11] = 21;
        break;
    case 3:
        dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 10;
        dofs[5] = 11;
        dofs[6] = 14;
        dofs[7] = 15;
        dofs[8] = 18;
        dofs[9] = 19;
        dofs[10] = 22;
        dofs[11] = 23;
        break;
    case 4:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
        dofs[6] = 12;
        dofs[7] = 14;
        dofs[8] = 16;
        dofs[9] = 18;
        dofs[10] = 20;
        dofs[11] = 22;
        break;
    case 5:
        dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        dofs[4] = 9;
        dofs[5] = 11;
        dofs[6] = 13;
        dofs[7] = 15;
        dofs[8] = 17;
        dofs[9] = 19;
        dofs[10] = 21;
        dofs[11] = 23;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 8;
            dofs[2] = 16;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 9;
            dofs[2] = 17;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 10;
            dofs[2] = 18;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 11;
            dofs[2] = 19;
            break;
        case 4:
            dofs[0] = 4;
            dofs[1] = 12;
            dofs[2] = 20;
            break;
        case 5:
            dofs[0] = 5;
            dofs[1] = 13;
            dofs[2] = 21;
            break;
        case 6:
            dofs[0] = 6;
            dofs[1] = 14;
            dofs[2] = 22;
            break;
        case 7:
            dofs[0] = 7;
            dofs[1] = 15;
            dofs[2] = 23;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 8;
            dofs[2] = 16;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 9;
            dofs[2] = 17;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 10;
            dofs[2] = 18;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 11;
            dofs[2] = 19;
            break;
        case 4:
            dofs[0] = 4;
            dofs[1] = 12;
            dofs[2] = 20;
            break;
        case 5:
            dofs[0] = 5;
            dofs[1] = 13;
            dofs[2] = 21;
            break;
        case 6:
            dofs[0] = 6;
            dofs[1] = 14;
            dofs[2] = 22;
            break;
        case 7:
            dofs[0] = 7;
            dofs[1] = 15;
            dofs[2] = 23;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 8;
            dofs[3] = 9;
            dofs[4] = 16;
            dofs[5] = 17;
            break;
        case 1:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 10;
            dofs[3] = 11;
            dofs[4] = 18;
            dofs[5] = 19;
            break;
        case 2:
            dofs[0] = 4;
            dofs[1] = 5;
            dofs[2] = 12;
            dofs[3] = 13;
            dofs[4] = 20;
            dofs[5] = 21;
            break;
        case 3:
            dofs[0] = 6;
            dofs[1] = 7;
            dofs[2] = 14;
            dofs[3] = 15;
            dofs[4] = 22;
            dofs[5] = 23;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 8;
            dofs[3] = 10;
            dofs[4] = 16;
            dofs[5] = 18;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 9;
            dofs[3] = 11;
            dofs[4] = 17;
            dofs[5] = 19;
            break;
        case 6:
            dofs[0] = 4;
            dofs[1] = 6;
            dofs[2] = 12;
            dofs[3] = 14;
            dofs[4] = 20;
            dofs[5] = 22;
            break;
        case 7:
            dofs[0] = 5;
            dofs[1] = 7;
            dofs[2] = 13;
            dofs[3] = 15;
            dofs[4] = 21;
            dofs[5] = 23;
            break;
        case 8:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            dofs[3] = 12;
            dofs[4] = 16;
            dofs[5] = 20;
            break;
        case 9:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            dofs[3] = 13;
            dofs[4] = 17;
            dofs[5] = 21;
            break;
        case 10:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            dofs[3] = 14;
            dofs[4] = 18;
            dofs[5] = 22;
            break;
        case 11:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            dofs[3] = 15;
            dofs[4] = 19;
            dofs[5] = 23;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 10;
            dofs[7] = 11;
            dofs[8] = 16;
            dofs[9] = 17;
            dofs[10] = 18;
            dofs[11] = 19;
            break;
        case 1:
            dofs[0] = 4;
            dofs[1] = 5;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 12;
            dofs[5] = 13;
            dofs[6] = 14;
            dofs[7] = 15;
            dofs[8] = 20;
            dofs[9] = 21;
            dofs[10] = 22;
            dofs[11] = 23;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 12;
            dofs[7] = 13;
            dofs[8] = 16;
            dofs[9] = 17;
            dofs[10] = 20;
            dofs[11] = 21;
            break;
        case 3:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            dofs[6] = 14;
            dofs[7] = 15;
            dofs[8] = 18;
            dofs[9] = 19;
            dofs[10] = 22;
            dofs[11] = 23;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            dofs[6] = 12;
            dofs[7] = 14;
            dofs[8] = 16;
            dofs[9] = 18;
            dofs[10] = 20;
            dofs[11] = 22;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            dofs[6] = 13;
            dofs[7] = 15;
            dofs[8] = 17;
            dofs[9] = 19;
            dofs[10] = 21;
            dofs[11] = 23;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_dofmap_0();
    case 1:
        return new navierstokes_dofmap_0();
    case 2:
        return new navierstokes_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes_dofmap_1();
  }

};


class navierstokes_dofmap_2: public ufc::dofmap
{
public:

  navierstokes_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Q', hexahedron, 2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, true, true };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + num_global_entities[1] + num_global_entities[2] + num_global_entities[3];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 27;
  }

  std::size_t num_element_dofs() const final override
  {
    return 27;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 1, 1, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 3, 9, 27 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[3] = offset + entity_indices[0][2];
    dofs[4] = offset + entity_indices[0][3];
    dofs[9] = offset + entity_indices[0][4];
    dofs[10] = offset + entity_indices[0][5];
    dofs[12] = offset + entity_indices[0][6];
    dofs[13] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[2] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    dofs[14] = offset + entity_indices[1][3];
    dofs[6] = offset + entity_indices[1][4];
    dofs[7] = offset + entity_indices[1][5];
    dofs[15] = offset + entity_indices[1][6];
    dofs[16] = offset + entity_indices[1][7];
    dofs[18] = offset + entity_indices[1][8];
    dofs[19] = offset + entity_indices[1][9];
    dofs[21] = offset + entity_indices[1][10];
    dofs[22] = offset + entity_indices[1][11];
    offset += num_global_entities[1];
    dofs[8] = offset + entity_indices[2][0];
    dofs[17] = offset + entity_indices[2][1];
    dofs[20] = offset + entity_indices[2][2];
    dofs[23] = offset + entity_indices[2][3];
    dofs[24] = offset + entity_indices[2][4];
    dofs[25] = offset + entity_indices[2][5];
    offset += num_global_entities[2];
    dofs[26] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 3;
        dofs[4] = 4;
        dofs[5] = 5;
        dofs[6] = 6;
        dofs[7] = 7;
        dofs[8] = 8;
        break;
    case 1:
        dofs[0] = 9;
        dofs[1] = 10;
        dofs[2] = 11;
        dofs[3] = 12;
        dofs[4] = 13;
        dofs[5] = 14;
        dofs[6] = 15;
        dofs[7] = 16;
        dofs[8] = 17;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 9;
        dofs[4] = 10;
        dofs[5] = 11;
        dofs[6] = 18;
        dofs[7] = 19;
        dofs[8] = 20;
        break;
    case 3:
        dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 12;
        dofs[4] = 13;
        dofs[5] = 14;
        dofs[6] = 21;
        dofs[7] = 22;
        dofs[8] = 23;
        break;
    case 4:
        dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 9;
        dofs[4] = 12;
        dofs[5] = 15;
        dofs[6] = 18;
        dofs[7] = 21;
        dofs[8] = 24;
        break;
    case 5:
        dofs[0] = 1;
        dofs[1] = 4;
        dofs[2] = 7;
        dofs[3] = 10;
        dofs[4] = 13;
        dofs[5] = 16;
        dofs[6] = 19;
        dofs[7] = 22;
        dofs[8] = 25;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 3;
            break;
        case 3:
            dofs[0] = 4;
            break;
        case 4:
            dofs[0] = 9;
            break;
        case 5:
            dofs[0] = 10;
            break;
        case 6:
            dofs[0] = 12;
            break;
        case 7:
            dofs[0] = 13;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            break;
        case 1:
            dofs[0] = 5;
            break;
        case 2:
            dofs[0] = 11;
            break;
        case 3:
            dofs[0] = 14;
            break;
        case 4:
            dofs[0] = 6;
            break;
        case 5:
            dofs[0] = 7;
            break;
        case 6:
            dofs[0] = 15;
            break;
        case 7:
            dofs[0] = 16;
            break;
        case 8:
            dofs[0] = 18;
            break;
        case 9:
            dofs[0] = 19;
            break;
        case 10:
            dofs[0] = 21;
            break;
        case 11:
            dofs[0] = 22;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 8;
            break;
        case 1:
            dofs[0] = 17;
            break;
        case 2:
            dofs[0] = 20;
            break;
        case 3:
            dofs[0] = 23;
            break;
        case 4:
            dofs[0] = 24;
            break;
        case 5:
            dofs[0] = 25;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 26;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 3;
            break;
        case 3:
            dofs[0] = 4;
            break;
        case 4:
            dofs[0] = 9;
            break;
        case 5:
            dofs[0] = 10;
            break;
        case 6:
            dofs[0] = 12;
            break;
        case 7:
            dofs[0] = 13;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        case 1:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            break;
        case 2:
            dofs[0] = 9;
            dofs[1] = 10;
            dofs[2] = 11;
            break;
        case 3:
            dofs[0] = 12;
            dofs[1] = 13;
            dofs[2] = 14;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 6;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 4;
            dofs[2] = 7;
            break;
        case 6:
            dofs[0] = 9;
            dofs[1] = 12;
            dofs[2] = 15;
            break;
        case 7:
            dofs[0] = 10;
            dofs[1] = 13;
            dofs[2] = 16;
            break;
        case 8:
            dofs[0] = 0;
            dofs[1] = 9;
            dofs[2] = 18;
            break;
        case 9:
            dofs[0] = 1;
            dofs[1] = 10;
            dofs[2] = 19;
            break;
        case 10:
            dofs[0] = 3;
            dofs[1] = 12;
            dofs[2] = 21;
            break;
        case 11:
            dofs[0] = 4;
            dofs[1] = 13;
            dofs[2] = 22;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            break;
        case 1:
            dofs[0] = 9;
            dofs[1] = 10;
            dofs[2] = 11;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            dofs[6] = 15;
            dofs[7] = 16;
            dofs[8] = 17;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 9;
            dofs[4] = 10;
            dofs[5] = 11;
            dofs[6] = 18;
            dofs[7] = 19;
            dofs[8] = 20;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            dofs[6] = 21;
            dofs[7] = 22;
            dofs[8] = 23;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 9;
            dofs[4] = 12;
            dofs[5] = 15;
            dofs[6] = 18;
            dofs[7] = 21;
            dofs[8] = 24;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 4;
            dofs[2] = 7;
            dofs[3] = 10;
            dofs[4] = 13;
            dofs[5] = 16;
            dofs[6] = 19;
            dofs[7] = 22;
            dofs[8] = 25;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            dofs[24] = 24;
            dofs[25] = 25;
            dofs[26] = 26;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes_dofmap_2();
  }

};


class navierstokes_dofmap_3: public ufc::dofmap
{
public:

  navierstokes_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Q', hexahedron, 2), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, true, true };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0] + 3 * num_global_entities[1] + 3 * num_global_entities[2] + 3 * num_global_entities[3];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 81;
  }

  std::size_t num_element_dofs() const final override
  {
    return 81;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 27;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 3, 3, 3 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 9, 27, 81 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[3] = offset + entity_indices[0][2];
    dofs[4] = offset + entity_indices[0][3];
    dofs[9] = offset + entity_indices[0][4];
    dofs[10] = offset + entity_indices[0][5];
    dofs[12] = offset + entity_indices[0][6];
    dofs[13] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[2] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    dofs[14] = offset + entity_indices[1][3];
    dofs[6] = offset + entity_indices[1][4];
    dofs[7] = offset + entity_indices[1][5];
    dofs[15] = offset + entity_indices[1][6];
    dofs[16] = offset + entity_indices[1][7];
    dofs[18] = offset + entity_indices[1][8];
    dofs[19] = offset + entity_indices[1][9];
    dofs[21] = offset + entity_indices[1][10];
    dofs[22] = offset + entity_indices[1][11];
    offset += num_global_entities[1];
    dofs[8] = offset + entity_indices[2][0];
    dofs[17] = offset + entity_indices[2][1];
    dofs[20] = offset + entity_indices[2][2];
    dofs[23] = offset + entity_indices[2][3];
    dofs[24] = offset + entity_indices[2][4];
    dofs[25] = offset + entity_indices[2][5];
    offset += num_global_entities[2];
    dofs[26] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
    dofs[27] = offset + entity_indices[0][0];
    dofs[28] = offset + entity_indices[0][1];
    dofs[30] = offset + entity_indices[0][2];
    dofs[31] = offset + entity_indices[0][3];
    dofs[36] = offset + entity_indices[0][4];
    dofs[37] = offset + entity_indices[0][5];
    dofs[39] = offset + entity_indices[0][6];
    dofs[40] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[29] = offset + entity_indices[1][0];
    dofs[32] = offset + entity_indices[1][1];
    dofs[38] = offset + entity_indices[1][2];
    dofs[41] = offset + entity_indices[1][3];
    dofs[33] = offset + entity_indices[1][4];
    dofs[34] = offset + entity_indices[1][5];
    dofs[42] = offset + entity_indices[1][6];
    dofs[43] = offset + entity_indices[1][7];
    dofs[45] = offset + entity_indices[1][8];
    dofs[46] = offset + entity_indices[1][9];
    dofs[48] = offset + entity_indices[1][10];
    dofs[49] = offset + entity_indices[1][11];
    offset += num_global_entities[1];
    dofs[35] = offset + entity_indices[2][0];
    dofs[44] = offset + entity_indices[2][1];
    dofs[47] = offset + entity_indices[2][2];
    dofs[50] = offset + entity_indices[2][3];
    dofs[51] = offset + entity_indices[2][4];
    dofs[52] = offset + entity_indices[2][5];
    offset += num_global_entities[2];
    dofs[53] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
    dofs[54] = offset + entity_indices[0][0];
    dofs[55] = offset + entity_indices[0][1];
    dofs[57] = offset + entity_indices[0][2];
    dofs[58] = offset + entity_indices[0][3];
    dofs[63] = offset + entity_indices[0][4];
    dofs[64] = offset + entity_indices[0][5];
    dofs[66] = offset + entity_indices[0][6];
    dofs[67] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[56] = offset + entity_indices[1][0];
    dofs[59] = offset + entity_indices[1][1];
    dofs[65] = offset + entity_indices[1][2];
    dofs[68] = offset + entity_indices[1][3];
    dofs[60] = offset + entity_indices[1][4];
    dofs[61] = offset + entity_indices[1][5];
    dofs[69] = offset + entity_indices[1][6];
    dofs[70] = offset + entity_indices[1][7];
    dofs[72] = offset + entity_indices[1][8];
    dofs[73] = offset + entity_indices[1][9];
    dofs[75] = offset + entity_indices[1][10];
    dofs[76] = offset + entity_indices[1][11];
    offset += num_global_entities[1];
    dofs[62] = offset + entity_indices[2][0];
    dofs[71] = offset + entity_indices[2][1];
    dofs[74] = offset + entity_indices[2][2];
    dofs[77] = offset + entity_indices[2][3];
    dofs[78] = offset + entity_indices[2][4];
    dofs[79] = offset + entity_indices[2][5];
    offset += num_global_entities[2];
    dofs[80] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 3;
        dofs[4] = 4;
        dofs[5] = 5;
        dofs[6] = 6;
        dofs[7] = 7;
        dofs[8] = 8;
        dofs[9] = 27;
        dofs[10] = 28;
        dofs[11] = 29;
        dofs[12] = 30;
        dofs[13] = 31;
        dofs[14] = 32;
        dofs[15] = 33;
        dofs[16] = 34;
        dofs[17] = 35;
        dofs[18] = 54;
        dofs[19] = 55;
        dofs[20] = 56;
        dofs[21] = 57;
        dofs[22] = 58;
        dofs[23] = 59;
        dofs[24] = 60;
        dofs[25] = 61;
        dofs[26] = 62;
        break;
    case 1:
        dofs[0] = 9;
        dofs[1] = 10;
        dofs[2] = 11;
        dofs[3] = 12;
        dofs[4] = 13;
        dofs[5] = 14;
        dofs[6] = 15;
        dofs[7] = 16;
        dofs[8] = 17;
        dofs[9] = 36;
        dofs[10] = 37;
        dofs[11] = 38;
        dofs[12] = 39;
        dofs[13] = 40;
        dofs[14] = 41;
        dofs[15] = 42;
        dofs[16] = 43;
        dofs[17] = 44;
        dofs[18] = 63;
        dofs[19] = 64;
        dofs[20] = 65;
        dofs[21] = 66;
        dofs[22] = 67;
        dofs[23] = 68;
        dofs[24] = 69;
        dofs[25] = 70;
        dofs[26] = 71;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 9;
        dofs[4] = 10;
        dofs[5] = 11;
        dofs[6] = 18;
        dofs[7] = 19;
        dofs[8] = 20;
        dofs[9] = 27;
        dofs[10] = 28;
        dofs[11] = 29;
        dofs[12] = 36;
        dofs[13] = 37;
        dofs[14] = 38;
        dofs[15] = 45;
        dofs[16] = 46;
        dofs[17] = 47;
        dofs[18] = 54;
        dofs[19] = 55;
        dofs[20] = 56;
        dofs[21] = 63;
        dofs[22] = 64;
        dofs[23] = 65;
        dofs[24] = 72;
        dofs[25] = 73;
        dofs[26] = 74;
        break;
    case 3:
        dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 12;
        dofs[4] = 13;
        dofs[5] = 14;
        dofs[6] = 21;
        dofs[7] = 22;
        dofs[8] = 23;
        dofs[9] = 30;
        dofs[10] = 31;
        dofs[11] = 32;
        dofs[12] = 39;
        dofs[13] = 40;
        dofs[14] = 41;
        dofs[15] = 48;
        dofs[16] = 49;
        dofs[17] = 50;
        dofs[18] = 57;
        dofs[19] = 58;
        dofs[20] = 59;
        dofs[21] = 66;
        dofs[22] = 67;
        dofs[23] = 68;
        dofs[24] = 75;
        dofs[25] = 76;
        dofs[26] = 77;
        break;
    case 4:
        dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 9;
        dofs[4] = 12;
        dofs[5] = 15;
        dofs[6] = 18;
        dofs[7] = 21;
        dofs[8] = 24;
        dofs[9] = 27;
        dofs[10] = 30;
        dofs[11] = 33;
        dofs[12] = 36;
        dofs[13] = 39;
        dofs[14] = 42;
        dofs[15] = 45;
        dofs[16] = 48;
        dofs[17] = 51;
        dofs[18] = 54;
        dofs[19] = 57;
        dofs[20] = 60;
        dofs[21] = 63;
        dofs[22] = 66;
        dofs[23] = 69;
        dofs[24] = 72;
        dofs[25] = 75;
        dofs[26] = 78;
        break;
    case 5:
        dofs[0] = 1;
        dofs[1] = 4;
        dofs[2] = 7;
        dofs[3] = 10;
        dofs[4] = 13;
        dofs[5] = 16;
        dofs[6] = 19;
        dofs[7] = 22;
        dofs[8] = 25;
        dofs[9] = 28;
        dofs[10] = 31;
        dofs[11] = 34;
        dofs[12] = 37;
        dofs[13] = 40;
        dofs[14] = 43;
        dofs[15] = 46;
        dofs[16] = 49;
        dofs[17] = 52;
        dofs[18] = 55;
        dofs[19] = 58;
        dofs[20] = 61;
        dofs[21] = 64;
        dofs[22] = 67;
        dofs[23] = 70;
        dofs[24] = 73;
        dofs[25] = 76;
        dofs[26] = 79;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 27;
            dofs[2] = 54;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 28;
            dofs[2] = 55;
            break;
        case 2:
            dofs[0] = 3;
            dofs[1] = 30;
            dofs[2] = 57;
            break;
        case 3:
            dofs[0] = 4;
            dofs[1] = 31;
            dofs[2] = 58;
            break;
        case 4:
            dofs[0] = 9;
            dofs[1] = 36;
            dofs[2] = 63;
            break;
        case 5:
            dofs[0] = 10;
            dofs[1] = 37;
            dofs[2] = 64;
            break;
        case 6:
            dofs[0] = 12;
            dofs[1] = 39;
            dofs[2] = 66;
            break;
        case 7:
            dofs[0] = 13;
            dofs[1] = 40;
            dofs[2] = 67;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 29;
            dofs[2] = 56;
            break;
        case 1:
            dofs[0] = 5;
            dofs[1] = 32;
            dofs[2] = 59;
            break;
        case 2:
            dofs[0] = 11;
            dofs[1] = 38;
            dofs[2] = 65;
            break;
        case 3:
            dofs[0] = 14;
            dofs[1] = 41;
            dofs[2] = 68;
            break;
        case 4:
            dofs[0] = 6;
            dofs[1] = 33;
            dofs[2] = 60;
            break;
        case 5:
            dofs[0] = 7;
            dofs[1] = 34;
            dofs[2] = 61;
            break;
        case 6:
            dofs[0] = 15;
            dofs[1] = 42;
            dofs[2] = 69;
            break;
        case 7:
            dofs[0] = 16;
            dofs[1] = 43;
            dofs[2] = 70;
            break;
        case 8:
            dofs[0] = 18;
            dofs[1] = 45;
            dofs[2] = 72;
            break;
        case 9:
            dofs[0] = 19;
            dofs[1] = 46;
            dofs[2] = 73;
            break;
        case 10:
            dofs[0] = 21;
            dofs[1] = 48;
            dofs[2] = 75;
            break;
        case 11:
            dofs[0] = 22;
            dofs[1] = 49;
            dofs[2] = 76;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 8;
            dofs[1] = 35;
            dofs[2] = 62;
            break;
        case 1:
            dofs[0] = 17;
            dofs[1] = 44;
            dofs[2] = 71;
            break;
        case 2:
            dofs[0] = 20;
            dofs[1] = 47;
            dofs[2] = 74;
            break;
        case 3:
            dofs[0] = 23;
            dofs[1] = 50;
            dofs[2] = 77;
            break;
        case 4:
            dofs[0] = 24;
            dofs[1] = 51;
            dofs[2] = 78;
            break;
        case 5:
            dofs[0] = 25;
            dofs[1] = 52;
            dofs[2] = 79;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 26;
            dofs[1] = 53;
            dofs[2] = 80;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 27;
            dofs[2] = 54;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 28;
            dofs[2] = 55;
            break;
        case 2:
            dofs[0] = 3;
            dofs[1] = 30;
            dofs[2] = 57;
            break;
        case 3:
            dofs[0] = 4;
            dofs[1] = 31;
            dofs[2] = 58;
            break;
        case 4:
            dofs[0] = 9;
            dofs[1] = 36;
            dofs[2] = 63;
            break;
        case 5:
            dofs[0] = 10;
            dofs[1] = 37;
            dofs[2] = 64;
            break;
        case 6:
            dofs[0] = 12;
            dofs[1] = 39;
            dofs[2] = 66;
            break;
        case 7:
            dofs[0] = 13;
            dofs[1] = 40;
            dofs[2] = 67;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 27;
            dofs[4] = 28;
            dofs[5] = 29;
            dofs[6] = 54;
            dofs[7] = 55;
            dofs[8] = 56;
            break;
        case 1:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            dofs[3] = 30;
            dofs[4] = 31;
            dofs[5] = 32;
            dofs[6] = 57;
            dofs[7] = 58;
            dofs[8] = 59;
            break;
        case 2:
            dofs[0] = 9;
            dofs[1] = 10;
            dofs[2] = 11;
            dofs[3] = 36;
            dofs[4] = 37;
            dofs[5] = 38;
            dofs[6] = 63;
            dofs[7] = 64;
            dofs[8] = 65;
            break;
        case 3:
            dofs[0] = 12;
            dofs[1] = 13;
            dofs[2] = 14;
            dofs[3] = 39;
            dofs[4] = 40;
            dofs[5] = 41;
            dofs[6] = 66;
            dofs[7] = 67;
            dofs[8] = 68;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 27;
            dofs[4] = 30;
            dofs[5] = 33;
            dofs[6] = 54;
            dofs[7] = 57;
            dofs[8] = 60;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 4;
            dofs[2] = 7;
            dofs[3] = 28;
            dofs[4] = 31;
            dofs[5] = 34;
            dofs[6] = 55;
            dofs[7] = 58;
            dofs[8] = 61;
            break;
        case 6:
            dofs[0] = 9;
            dofs[1] = 12;
            dofs[2] = 15;
            dofs[3] = 36;
            dofs[4] = 39;
            dofs[5] = 42;
            dofs[6] = 63;
            dofs[7] = 66;
            dofs[8] = 69;
            break;
        case 7:
            dofs[0] = 10;
            dofs[1] = 13;
            dofs[2] = 16;
            dofs[3] = 37;
            dofs[4] = 40;
            dofs[5] = 43;
            dofs[6] = 64;
            dofs[7] = 67;
            dofs[8] = 70;
            break;
        case 8:
            dofs[0] = 0;
            dofs[1] = 9;
            dofs[2] = 18;
            dofs[3] = 27;
            dofs[4] = 36;
            dofs[5] = 45;
            dofs[6] = 54;
            dofs[7] = 63;
            dofs[8] = 72;
            break;
        case 9:
            dofs[0] = 1;
            dofs[1] = 10;
            dofs[2] = 19;
            dofs[3] = 28;
            dofs[4] = 37;
            dofs[5] = 46;
            dofs[6] = 55;
            dofs[7] = 64;
            dofs[8] = 73;
            break;
        case 10:
            dofs[0] = 3;
            dofs[1] = 12;
            dofs[2] = 21;
            dofs[3] = 30;
            dofs[4] = 39;
            dofs[5] = 48;
            dofs[6] = 57;
            dofs[7] = 66;
            dofs[8] = 75;
            break;
        case 11:
            dofs[0] = 4;
            dofs[1] = 13;
            dofs[2] = 22;
            dofs[3] = 31;
            dofs[4] = 40;
            dofs[5] = 49;
            dofs[6] = 58;
            dofs[7] = 67;
            dofs[8] = 76;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 27;
            dofs[10] = 28;
            dofs[11] = 29;
            dofs[12] = 30;
            dofs[13] = 31;
            dofs[14] = 32;
            dofs[15] = 33;
            dofs[16] = 34;
            dofs[17] = 35;
            dofs[18] = 54;
            dofs[19] = 55;
            dofs[20] = 56;
            dofs[21] = 57;
            dofs[22] = 58;
            dofs[23] = 59;
            dofs[24] = 60;
            dofs[25] = 61;
            dofs[26] = 62;
            break;
        case 1:
            dofs[0] = 9;
            dofs[1] = 10;
            dofs[2] = 11;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            dofs[6] = 15;
            dofs[7] = 16;
            dofs[8] = 17;
            dofs[9] = 36;
            dofs[10] = 37;
            dofs[11] = 38;
            dofs[12] = 39;
            dofs[13] = 40;
            dofs[14] = 41;
            dofs[15] = 42;
            dofs[16] = 43;
            dofs[17] = 44;
            dofs[18] = 63;
            dofs[19] = 64;
            dofs[20] = 65;
            dofs[21] = 66;
            dofs[22] = 67;
            dofs[23] = 68;
            dofs[24] = 69;
            dofs[25] = 70;
            dofs[26] = 71;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 9;
            dofs[4] = 10;
            dofs[5] = 11;
            dofs[6] = 18;
            dofs[7] = 19;
            dofs[8] = 20;
            dofs[9] = 27;
            dofs[10] = 28;
            dofs[11] = 29;
            dofs[12] = 36;
            dofs[13] = 37;
            dofs[14] = 38;
            dofs[15] = 45;
            dofs[16] = 46;
            dofs[17] = 47;
            dofs[18] = 54;
            dofs[19] = 55;
            dofs[20] = 56;
            dofs[21] = 63;
            dofs[22] = 64;
            dofs[23] = 65;
            dofs[24] = 72;
            dofs[25] = 73;
            dofs[26] = 74;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            dofs[6] = 21;
            dofs[7] = 22;
            dofs[8] = 23;
            dofs[9] = 30;
            dofs[10] = 31;
            dofs[11] = 32;
            dofs[12] = 39;
            dofs[13] = 40;
            dofs[14] = 41;
            dofs[15] = 48;
            dofs[16] = 49;
            dofs[17] = 50;
            dofs[18] = 57;
            dofs[19] = 58;
            dofs[20] = 59;
            dofs[21] = 66;
            dofs[22] = 67;
            dofs[23] = 68;
            dofs[24] = 75;
            dofs[25] = 76;
            dofs[26] = 77;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 9;
            dofs[4] = 12;
            dofs[5] = 15;
            dofs[6] = 18;
            dofs[7] = 21;
            dofs[8] = 24;
            dofs[9] = 27;
            dofs[10] = 30;
            dofs[11] = 33;
            dofs[12] = 36;
            dofs[13] = 39;
            dofs[14] = 42;
            dofs[15] = 45;
            dofs[16] = 48;
            dofs[17] = 51;
            dofs[18] = 54;
            dofs[19] = 57;
            dofs[20] = 60;
            dofs[21] = 63;
            dofs[22] = 66;
            dofs[23] = 69;
            dofs[24] = 72;
            dofs[25] = 75;
            dofs[26] = 78;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 4;
            dofs[2] = 7;
            dofs[3] = 10;
            dofs[4] = 13;
            dofs[5] = 16;
            dofs[6] = 19;
            dofs[7] = 22;
            dofs[8] = 25;
            dofs[9] = 28;
            dofs[10] = 31;
            dofs[11] = 34;
            dofs[12] = 37;
            dofs[13] = 40;
            dofs[14] = 43;
            dofs[15] = 46;
            dofs[16] = 49;
            dofs[17] = 52;
            dofs[18] = 55;
            dofs[19] = 58;
            dofs[20] = 61;
            dofs[21] = 64;
            dofs[22] = 67;
            dofs[23] = 70;
            dofs[24] = 73;
            dofs[25] = 76;
            dofs[26] = 79;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            dofs[24] = 24;
            dofs[25] = 25;
            dofs[26] = 26;
            dofs[27] = 27;
            dofs[28] = 28;
            dofs[29] = 29;
            dofs[30] = 30;
            dofs[31] = 31;
            dofs[32] = 32;
            dofs[33] = 33;
            dofs[34] = 34;
            dofs[35] = 35;
            dofs[36] = 36;
            dofs[37] = 37;
            dofs[38] = 38;
            dofs[39] = 39;
            dofs[40] = 40;
            dofs[41] = 41;
            dofs[42] = 42;
            dofs[43] = 43;
            dofs[44] = 44;
            dofs[45] = 45;
            dofs[46] = 46;
            dofs[47] = 47;
            dofs[48] = 48;
            dofs[49] = 49;
            dofs[50] = 50;
            dofs[51] = 51;
            dofs[52] = 52;
            dofs[53] = 53;
            dofs[54] = 54;
            dofs[55] = 55;
            dofs[56] = 56;
            dofs[57] = 57;
            dofs[58] = 58;
            dofs[59] = 59;
            dofs[60] = 60;
            dofs[61] = 61;
            dofs[62] = 62;
            dofs[63] = 63;
            dofs[64] = 64;
            dofs[65] = 65;
            dofs[66] = 66;
            dofs[67] = 67;
            dofs[68] = 68;
            dofs[69] = 69;
            dofs[70] = 70;
            dofs[71] = 71;
            dofs[72] = 72;
            dofs[73] = 73;
            dofs[74] = 74;
            dofs[75] = 75;
            dofs[76] = 76;
            dofs[77] = 77;
            dofs[78] = 78;
            dofs[79] = 79;
            dofs[80] = 80;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_dofmap_2();
    case 1:
        return new navierstokes_dofmap_2();
    case 2:
        return new navierstokes_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes_dofmap_3();
  }

};


class navierstokes_dofmap_4: public ufc::dofmap
{
public:

  navierstokes_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Q', hexahedron, 2), dim=3), FiniteElement('Q', hexahedron, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, true, true };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 4 * num_global_entities[0] + 3 * num_global_entities[1] + 3 * num_global_entities[2] + 3 * num_global_entities[3];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 89;
  }

  std::size_t num_element_dofs() const final override
  {
    return 89;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 31;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 4, 3, 3, 3 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 4, 11, 31, 89 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[3] = offset + entity_indices[0][2];
    dofs[4] = offset + entity_indices[0][3];
    dofs[9] = offset + entity_indices[0][4];
    dofs[10] = offset + entity_indices[0][5];
    dofs[12] = offset + entity_indices[0][6];
    dofs[13] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[2] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[11] = offset + entity_indices[1][2];
    dofs[14] = offset + entity_indices[1][3];
    dofs[6] = offset + entity_indices[1][4];
    dofs[7] = offset + entity_indices[1][5];
    dofs[15] = offset + entity_indices[1][6];
    dofs[16] = offset + entity_indices[1][7];
    dofs[18] = offset + entity_indices[1][8];
    dofs[19] = offset + entity_indices[1][9];
    dofs[21] = offset + entity_indices[1][10];
    dofs[22] = offset + entity_indices[1][11];
    offset += num_global_entities[1];
    dofs[8] = offset + entity_indices[2][0];
    dofs[17] = offset + entity_indices[2][1];
    dofs[20] = offset + entity_indices[2][2];
    dofs[23] = offset + entity_indices[2][3];
    dofs[24] = offset + entity_indices[2][4];
    dofs[25] = offset + entity_indices[2][5];
    offset += num_global_entities[2];
    dofs[26] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
    dofs[27] = offset + entity_indices[0][0];
    dofs[28] = offset + entity_indices[0][1];
    dofs[30] = offset + entity_indices[0][2];
    dofs[31] = offset + entity_indices[0][3];
    dofs[36] = offset + entity_indices[0][4];
    dofs[37] = offset + entity_indices[0][5];
    dofs[39] = offset + entity_indices[0][6];
    dofs[40] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[29] = offset + entity_indices[1][0];
    dofs[32] = offset + entity_indices[1][1];
    dofs[38] = offset + entity_indices[1][2];
    dofs[41] = offset + entity_indices[1][3];
    dofs[33] = offset + entity_indices[1][4];
    dofs[34] = offset + entity_indices[1][5];
    dofs[42] = offset + entity_indices[1][6];
    dofs[43] = offset + entity_indices[1][7];
    dofs[45] = offset + entity_indices[1][8];
    dofs[46] = offset + entity_indices[1][9];
    dofs[48] = offset + entity_indices[1][10];
    dofs[49] = offset + entity_indices[1][11];
    offset += num_global_entities[1];
    dofs[35] = offset + entity_indices[2][0];
    dofs[44] = offset + entity_indices[2][1];
    dofs[47] = offset + entity_indices[2][2];
    dofs[50] = offset + entity_indices[2][3];
    dofs[51] = offset + entity_indices[2][4];
    dofs[52] = offset + entity_indices[2][5];
    offset += num_global_entities[2];
    dofs[53] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
    dofs[54] = offset + entity_indices[0][0];
    dofs[55] = offset + entity_indices[0][1];
    dofs[57] = offset + entity_indices[0][2];
    dofs[58] = offset + entity_indices[0][3];
    dofs[63] = offset + entity_indices[0][4];
    dofs[64] = offset + entity_indices[0][5];
    dofs[66] = offset + entity_indices[0][6];
    dofs[67] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
    dofs[56] = offset + entity_indices[1][0];
    dofs[59] = offset + entity_indices[1][1];
    dofs[65] = offset + entity_indices[1][2];
    dofs[68] = offset + entity_indices[1][3];
    dofs[60] = offset + entity_indices[1][4];
    dofs[61] = offset + entity_indices[1][5];
    dofs[69] = offset + entity_indices[1][6];
    dofs[70] = offset + entity_indices[1][7];
    dofs[72] = offset + entity_indices[1][8];
    dofs[73] = offset + entity_indices[1][9];
    dofs[75] = offset + entity_indices[1][10];
    dofs[76] = offset + entity_indices[1][11];
    offset += num_global_entities[1];
    dofs[62] = offset + entity_indices[2][0];
    dofs[71] = offset + entity_indices[2][1];
    dofs[74] = offset + entity_indices[2][2];
    dofs[77] = offset + entity_indices[2][3];
    dofs[78] = offset + entity_indices[2][4];
    dofs[79] = offset + entity_indices[2][5];
    offset += num_global_entities[2];
    dofs[80] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
    dofs[81] = offset + entity_indices[0][0];
    dofs[82] = offset + entity_indices[0][1];
    dofs[83] = offset + entity_indices[0][2];
    dofs[84] = offset + entity_indices[0][3];
    dofs[85] = offset + entity_indices[0][4];
    dofs[86] = offset + entity_indices[0][5];
    dofs[87] = offset + entity_indices[0][6];
    dofs[88] = offset + entity_indices[0][7];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 3;
        dofs[4] = 4;
        dofs[5] = 5;
        dofs[6] = 6;
        dofs[7] = 7;
        dofs[8] = 8;
        dofs[9] = 27;
        dofs[10] = 28;
        dofs[11] = 29;
        dofs[12] = 30;
        dofs[13] = 31;
        dofs[14] = 32;
        dofs[15] = 33;
        dofs[16] = 34;
        dofs[17] = 35;
        dofs[18] = 54;
        dofs[19] = 55;
        dofs[20] = 56;
        dofs[21] = 57;
        dofs[22] = 58;
        dofs[23] = 59;
        dofs[24] = 60;
        dofs[25] = 61;
        dofs[26] = 62;
        dofs[27] = 81;
        dofs[28] = 82;
        dofs[29] = 83;
        dofs[30] = 84;
        break;
    case 1:
        dofs[0] = 9;
        dofs[1] = 10;
        dofs[2] = 11;
        dofs[3] = 12;
        dofs[4] = 13;
        dofs[5] = 14;
        dofs[6] = 15;
        dofs[7] = 16;
        dofs[8] = 17;
        dofs[9] = 36;
        dofs[10] = 37;
        dofs[11] = 38;
        dofs[12] = 39;
        dofs[13] = 40;
        dofs[14] = 41;
        dofs[15] = 42;
        dofs[16] = 43;
        dofs[17] = 44;
        dofs[18] = 63;
        dofs[19] = 64;
        dofs[20] = 65;
        dofs[21] = 66;
        dofs[22] = 67;
        dofs[23] = 68;
        dofs[24] = 69;
        dofs[25] = 70;
        dofs[26] = 71;
        dofs[27] = 85;
        dofs[28] = 86;
        dofs[29] = 87;
        dofs[30] = 88;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 9;
        dofs[4] = 10;
        dofs[5] = 11;
        dofs[6] = 18;
        dofs[7] = 19;
        dofs[8] = 20;
        dofs[9] = 27;
        dofs[10] = 28;
        dofs[11] = 29;
        dofs[12] = 36;
        dofs[13] = 37;
        dofs[14] = 38;
        dofs[15] = 45;
        dofs[16] = 46;
        dofs[17] = 47;
        dofs[18] = 54;
        dofs[19] = 55;
        dofs[20] = 56;
        dofs[21] = 63;
        dofs[22] = 64;
        dofs[23] = 65;
        dofs[24] = 72;
        dofs[25] = 73;
        dofs[26] = 74;
        dofs[27] = 81;
        dofs[28] = 82;
        dofs[29] = 85;
        dofs[30] = 86;
        break;
    case 3:
        dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 12;
        dofs[4] = 13;
        dofs[5] = 14;
        dofs[6] = 21;
        dofs[7] = 22;
        dofs[8] = 23;
        dofs[9] = 30;
        dofs[10] = 31;
        dofs[11] = 32;
        dofs[12] = 39;
        dofs[13] = 40;
        dofs[14] = 41;
        dofs[15] = 48;
        dofs[16] = 49;
        dofs[17] = 50;
        dofs[18] = 57;
        dofs[19] = 58;
        dofs[20] = 59;
        dofs[21] = 66;
        dofs[22] = 67;
        dofs[23] = 68;
        dofs[24] = 75;
        dofs[25] = 76;
        dofs[26] = 77;
        dofs[27] = 83;
        dofs[28] = 84;
        dofs[29] = 87;
        dofs[30] = 88;
        break;
    case 4:
        dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 9;
        dofs[4] = 12;
        dofs[5] = 15;
        dofs[6] = 18;
        dofs[7] = 21;
        dofs[8] = 24;
        dofs[9] = 27;
        dofs[10] = 30;
        dofs[11] = 33;
        dofs[12] = 36;
        dofs[13] = 39;
        dofs[14] = 42;
        dofs[15] = 45;
        dofs[16] = 48;
        dofs[17] = 51;
        dofs[18] = 54;
        dofs[19] = 57;
        dofs[20] = 60;
        dofs[21] = 63;
        dofs[22] = 66;
        dofs[23] = 69;
        dofs[24] = 72;
        dofs[25] = 75;
        dofs[26] = 78;
        dofs[27] = 81;
        dofs[28] = 83;
        dofs[29] = 85;
        dofs[30] = 87;
        break;
    case 5:
        dofs[0] = 1;
        dofs[1] = 4;
        dofs[2] = 7;
        dofs[3] = 10;
        dofs[4] = 13;
        dofs[5] = 16;
        dofs[6] = 19;
        dofs[7] = 22;
        dofs[8] = 25;
        dofs[9] = 28;
        dofs[10] = 31;
        dofs[11] = 34;
        dofs[12] = 37;
        dofs[13] = 40;
        dofs[14] = 43;
        dofs[15] = 46;
        dofs[16] = 49;
        dofs[17] = 52;
        dofs[18] = 55;
        dofs[19] = 58;
        dofs[20] = 61;
        dofs[21] = 64;
        dofs[22] = 67;
        dofs[23] = 70;
        dofs[24] = 73;
        dofs[25] = 76;
        dofs[26] = 79;
        dofs[27] = 82;
        dofs[28] = 84;
        dofs[29] = 86;
        dofs[30] = 88;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 27;
            dofs[2] = 54;
            dofs[3] = 81;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 28;
            dofs[2] = 55;
            dofs[3] = 82;
            break;
        case 2:
            dofs[0] = 3;
            dofs[1] = 30;
            dofs[2] = 57;
            dofs[3] = 83;
            break;
        case 3:
            dofs[0] = 4;
            dofs[1] = 31;
            dofs[2] = 58;
            dofs[3] = 84;
            break;
        case 4:
            dofs[0] = 9;
            dofs[1] = 36;
            dofs[2] = 63;
            dofs[3] = 85;
            break;
        case 5:
            dofs[0] = 10;
            dofs[1] = 37;
            dofs[2] = 64;
            dofs[3] = 86;
            break;
        case 6:
            dofs[0] = 12;
            dofs[1] = 39;
            dofs[2] = 66;
            dofs[3] = 87;
            break;
        case 7:
            dofs[0] = 13;
            dofs[1] = 40;
            dofs[2] = 67;
            dofs[3] = 88;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 29;
            dofs[2] = 56;
            break;
        case 1:
            dofs[0] = 5;
            dofs[1] = 32;
            dofs[2] = 59;
            break;
        case 2:
            dofs[0] = 11;
            dofs[1] = 38;
            dofs[2] = 65;
            break;
        case 3:
            dofs[0] = 14;
            dofs[1] = 41;
            dofs[2] = 68;
            break;
        case 4:
            dofs[0] = 6;
            dofs[1] = 33;
            dofs[2] = 60;
            break;
        case 5:
            dofs[0] = 7;
            dofs[1] = 34;
            dofs[2] = 61;
            break;
        case 6:
            dofs[0] = 15;
            dofs[1] = 42;
            dofs[2] = 69;
            break;
        case 7:
            dofs[0] = 16;
            dofs[1] = 43;
            dofs[2] = 70;
            break;
        case 8:
            dofs[0] = 18;
            dofs[1] = 45;
            dofs[2] = 72;
            break;
        case 9:
            dofs[0] = 19;
            dofs[1] = 46;
            dofs[2] = 73;
            break;
        case 10:
            dofs[0] = 21;
            dofs[1] = 48;
            dofs[2] = 75;
            break;
        case 11:
            dofs[0] = 22;
            dofs[1] = 49;
            dofs[2] = 76;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 8;
            dofs[1] = 35;
            dofs[2] = 62;
            break;
        case 1:
            dofs[0] = 17;
            dofs[1] = 44;
            dofs[2] = 71;
            break;
        case 2:
            dofs[0] = 20;
            dofs[1] = 47;
            dofs[2] = 74;
            break;
        case 3:
            dofs[0] = 23;
            dofs[1] = 50;
            dofs[2] = 77;
            break;
        case 4:
            dofs[0] = 24;
            dofs[1] = 51;
            dofs[2] = 78;
            break;
        case 5:
            dofs[0] = 25;
            dofs[1] = 52;
            dofs[2] = 79;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 26;
            dofs[1] = 53;
            dofs[2] = 80;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 27;
            dofs[2] = 54;
            dofs[3] = 81;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 28;
            dofs[2] = 55;
            dofs[3] = 82;
            break;
        case 2:
            dofs[0] = 3;
            dofs[1] = 30;
            dofs[2] = 57;
            dofs[3] = 83;
            break;
        case 3:
            dofs[0] = 4;
            dofs[1] = 31;
            dofs[2] = 58;
            dofs[3] = 84;
            break;
        case 4:
            dofs[0] = 9;
            dofs[1] = 36;
            dofs[2] = 63;
            dofs[3] = 85;
            break;
        case 5:
            dofs[0] = 10;
            dofs[1] = 37;
            dofs[2] = 64;
            dofs[3] = 86;
            break;
        case 6:
            dofs[0] = 12;
            dofs[1] = 39;
            dofs[2] = 66;
            dofs[3] = 87;
            break;
        case 7:
            dofs[0] = 13;
            dofs[1] = 40;
            dofs[2] = 67;
            dofs[3] = 88;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 27;
            dofs[4] = 28;
            dofs[5] = 29;
            dofs[6] = 54;
            dofs[7] = 55;
            dofs[8] = 56;
            dofs[9] = 81;
            dofs[10] = 82;
            break;
        case 1:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            dofs[3] = 30;
            dofs[4] = 31;
            dofs[5] = 32;
            dofs[6] = 57;
            dofs[7] = 58;
            dofs[8] = 59;
            dofs[9] = 83;
            dofs[10] = 84;
            break;
        case 2:
            dofs[0] = 9;
            dofs[1] = 10;
            dofs[2] = 11;
            dofs[3] = 36;
            dofs[4] = 37;
            dofs[5] = 38;
            dofs[6] = 63;
            dofs[7] = 64;
            dofs[8] = 65;
            dofs[9] = 85;
            dofs[10] = 86;
            break;
        case 3:
            dofs[0] = 12;
            dofs[1] = 13;
            dofs[2] = 14;
            dofs[3] = 39;
            dofs[4] = 40;
            dofs[5] = 41;
            dofs[6] = 66;
            dofs[7] = 67;
            dofs[8] = 68;
            dofs[9] = 87;
            dofs[10] = 88;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 27;
            dofs[4] = 30;
            dofs[5] = 33;
            dofs[6] = 54;
            dofs[7] = 57;
            dofs[8] = 60;
            dofs[9] = 81;
            dofs[10] = 83;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 4;
            dofs[2] = 7;
            dofs[3] = 28;
            dofs[4] = 31;
            dofs[5] = 34;
            dofs[6] = 55;
            dofs[7] = 58;
            dofs[8] = 61;
            dofs[9] = 82;
            dofs[10] = 84;
            break;
        case 6:
            dofs[0] = 9;
            dofs[1] = 12;
            dofs[2] = 15;
            dofs[3] = 36;
            dofs[4] = 39;
            dofs[5] = 42;
            dofs[6] = 63;
            dofs[7] = 66;
            dofs[8] = 69;
            dofs[9] = 85;
            dofs[10] = 87;
            break;
        case 7:
            dofs[0] = 10;
            dofs[1] = 13;
            dofs[2] = 16;
            dofs[3] = 37;
            dofs[4] = 40;
            dofs[5] = 43;
            dofs[6] = 64;
            dofs[7] = 67;
            dofs[8] = 70;
            dofs[9] = 86;
            dofs[10] = 88;
            break;
        case 8:
            dofs[0] = 0;
            dofs[1] = 9;
            dofs[2] = 18;
            dofs[3] = 27;
            dofs[4] = 36;
            dofs[5] = 45;
            dofs[6] = 54;
            dofs[7] = 63;
            dofs[8] = 72;
            dofs[9] = 81;
            dofs[10] = 85;
            break;
        case 9:
            dofs[0] = 1;
            dofs[1] = 10;
            dofs[2] = 19;
            dofs[3] = 28;
            dofs[4] = 37;
            dofs[5] = 46;
            dofs[6] = 55;
            dofs[7] = 64;
            dofs[8] = 73;
            dofs[9] = 82;
            dofs[10] = 86;
            break;
        case 10:
            dofs[0] = 3;
            dofs[1] = 12;
            dofs[2] = 21;
            dofs[3] = 30;
            dofs[4] = 39;
            dofs[5] = 48;
            dofs[6] = 57;
            dofs[7] = 66;
            dofs[8] = 75;
            dofs[9] = 83;
            dofs[10] = 87;
            break;
        case 11:
            dofs[0] = 4;
            dofs[1] = 13;
            dofs[2] = 22;
            dofs[3] = 31;
            dofs[4] = 40;
            dofs[5] = 49;
            dofs[6] = 58;
            dofs[7] = 67;
            dofs[8] = 76;
            dofs[9] = 84;
            dofs[10] = 88;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 27;
            dofs[10] = 28;
            dofs[11] = 29;
            dofs[12] = 30;
            dofs[13] = 31;
            dofs[14] = 32;
            dofs[15] = 33;
            dofs[16] = 34;
            dofs[17] = 35;
            dofs[18] = 54;
            dofs[19] = 55;
            dofs[20] = 56;
            dofs[21] = 57;
            dofs[22] = 58;
            dofs[23] = 59;
            dofs[24] = 60;
            dofs[25] = 61;
            dofs[26] = 62;
            dofs[27] = 81;
            dofs[28] = 82;
            dofs[29] = 83;
            dofs[30] = 84;
            break;
        case 1:
            dofs[0] = 9;
            dofs[1] = 10;
            dofs[2] = 11;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            dofs[6] = 15;
            dofs[7] = 16;
            dofs[8] = 17;
            dofs[9] = 36;
            dofs[10] = 37;
            dofs[11] = 38;
            dofs[12] = 39;
            dofs[13] = 40;
            dofs[14] = 41;
            dofs[15] = 42;
            dofs[16] = 43;
            dofs[17] = 44;
            dofs[18] = 63;
            dofs[19] = 64;
            dofs[20] = 65;
            dofs[21] = 66;
            dofs[22] = 67;
            dofs[23] = 68;
            dofs[24] = 69;
            dofs[25] = 70;
            dofs[26] = 71;
            dofs[27] = 85;
            dofs[28] = 86;
            dofs[29] = 87;
            dofs[30] = 88;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 9;
            dofs[4] = 10;
            dofs[5] = 11;
            dofs[6] = 18;
            dofs[7] = 19;
            dofs[8] = 20;
            dofs[9] = 27;
            dofs[10] = 28;
            dofs[11] = 29;
            dofs[12] = 36;
            dofs[13] = 37;
            dofs[14] = 38;
            dofs[15] = 45;
            dofs[16] = 46;
            dofs[17] = 47;
            dofs[18] = 54;
            dofs[19] = 55;
            dofs[20] = 56;
            dofs[21] = 63;
            dofs[22] = 64;
            dofs[23] = 65;
            dofs[24] = 72;
            dofs[25] = 73;
            dofs[26] = 74;
            dofs[27] = 81;
            dofs[28] = 82;
            dofs[29] = 85;
            dofs[30] = 86;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 4;
            dofs[2] = 5;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            dofs[6] = 21;
            dofs[7] = 22;
            dofs[8] = 23;
            dofs[9] = 30;
            dofs[10] = 31;
            dofs[11] = 32;
            dofs[12] = 39;
            dofs[13] = 40;
            dofs[14] = 41;
            dofs[15] = 48;
            dofs[16] = 49;
            dofs[17] = 50;
            dofs[18] = 57;
            dofs[19] = 58;
            dofs[20] = 59;
            dofs[21] = 66;
            dofs[22] = 67;
            dofs[23] = 68;
            dofs[24] = 75;
            dofs[25] = 76;
            dofs[26] = 77;
            dofs[27] = 83;
            dofs[28] = 84;
            dofs[29] = 87;
            dofs[30] = 88;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 9;
            dofs[4] = 12;
            dofs[5] = 15;
            dofs[6] = 18;
            dofs[7] = 21;
            dofs[8] = 24;
            dofs[9] = 27;
            dofs[10] = 30;
            dofs[11] = 33;
            dofs[12] = 36;
            dofs[13] = 39;
            dofs[14] = 42;
            dofs[15] = 45;
            dofs[16] = 48;
            dofs[17] = 51;
            dofs[18] = 54;
            dofs[19] = 57;
            dofs[20] = 60;
            dofs[21] = 63;
            dofs[22] = 66;
            dofs[23] = 69;
            dofs[24] = 72;
            dofs[25] = 75;
            dofs[26] = 78;
            dofs[27] = 81;
            dofs[28] = 83;
            dofs[29] = 85;
            dofs[30] = 87;
            break;
        case 5:
            dofs[0] = 1;
            dofs[1] = 4;
            dofs[2] = 7;
            dofs[3] = 10;
            dofs[4] = 13;
            dofs[5] = 16;
            dofs[6] = 19;
            dofs[7] = 22;
            dofs[8] = 25;
            dofs[9] = 28;
            dofs[10] = 31;
            dofs[11] = 34;
            dofs[12] = 37;
            dofs[13] = 40;
            dofs[14] = 43;
            dofs[15] = 46;
            dofs[16] = 49;
            dofs[17] = 52;
            dofs[18] = 55;
            dofs[19] = 58;
            dofs[20] = 61;
            dofs[21] = 64;
            dofs[22] = 67;
            dofs[23] = 70;
            dofs[24] = 73;
            dofs[25] = 76;
            dofs[26] = 79;
            dofs[27] = 82;
            dofs[28] = 84;
            dofs[29] = 86;
            dofs[30] = 88;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            dofs[24] = 24;
            dofs[25] = 25;
            dofs[26] = 26;
            dofs[27] = 27;
            dofs[28] = 28;
            dofs[29] = 29;
            dofs[30] = 30;
            dofs[31] = 31;
            dofs[32] = 32;
            dofs[33] = 33;
            dofs[34] = 34;
            dofs[35] = 35;
            dofs[36] = 36;
            dofs[37] = 37;
            dofs[38] = 38;
            dofs[39] = 39;
            dofs[40] = 40;
            dofs[41] = 41;
            dofs[42] = 42;
            dofs[43] = 43;
            dofs[44] = 44;
            dofs[45] = 45;
            dofs[46] = 46;
            dofs[47] = 47;
            dofs[48] = 48;
            dofs[49] = 49;
            dofs[50] = 50;
            dofs[51] = 51;
            dofs[52] = 52;
            dofs[53] = 53;
            dofs[54] = 54;
            dofs[55] = 55;
            dofs[56] = 56;
            dofs[57] = 57;
            dofs[58] = 58;
            dofs[59] = 59;
            dofs[60] = 60;
            dofs[61] = 61;
            dofs[62] = 62;
            dofs[63] = 63;
            dofs[64] = 64;
            dofs[65] = 65;
            dofs[66] = 66;
            dofs[67] = 67;
            dofs[68] = 68;
            dofs[69] = 69;
            dofs[70] = 70;
            dofs[71] = 71;
            dofs[72] = 72;
            dofs[73] = 73;
            dofs[74] = 74;
            dofs[75] = 75;
            dofs[76] = 76;
            dofs[77] = 77;
            dofs[78] = 78;
            dofs[79] = 79;
            dofs[80] = 80;
            dofs[81] = 81;
            dofs[82] = 82;
            dofs[83] = 83;
            dofs[84] = 84;
            dofs[85] = 85;
            dofs[86] = 86;
            dofs[87] = 87;
            dofs[88] = 88;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_dofmap_3();
    case 1:
        return new navierstokes_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes_dofmap_4();
  }

};


class navierstokes_dofmap_5: public ufc::dofmap
{
public:

  navierstokes_dofmap_5() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes_dofmap_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', hexahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = {};
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        case 6:
            break;
        case 7:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        case 6:
            break;
        case 7:
            break;
        case 8:
            break;
        case 9:
            break;
        case 10:
            break;
        case 11:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes_dofmap_5();
  }

};


class navierstokes_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  navierstokes_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~navierstokes_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Q', hexahedron, 1), dim=3)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new navierstokes_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::hexahedron;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new navierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new navierstokes_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    navierstokes_finite_element_0 xelement;
    double phi[8];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[3 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t d = 0; d < 8; ++d)
                x[3 * ip + i] += coordinate_dofs[3 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[8] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][8] =
        { { -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
          { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
    double J[9];
    double detJ[1];
    double K[9];
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 8; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 8; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[8] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][8] =
        { { -1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
          { -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 8; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 8; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    navierstokes_finite_element_0 xelement;
    double dphi[24];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[3 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t j = 0; j < 3; ++j)
                for (std::size_t d = 0; d < 8; ++d)
                    J[3 * 3 * ip + 3 * i + j] += coordinate_dofs[3 * d + i] * dphi[3 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[3 * 3 * ip] * (J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2 + 2] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) + J[3 * 3 * ip + 1] * (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 2]) + J[3 * 3 * ip + 2] * (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2]);
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[3 * 3 * ip] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 1] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2 + 2]) / detJ[ip];
        K[3 * 3 * ip + 2] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 + 2] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3] = (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3]) / detJ[ip];
        K[3 * 3 * ip + 3 + 1] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2]) / detJ[ip];
        K[3 * 3 * ip + 3 + 2] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2] = (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 * 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 1] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 2] = (J[3 * 3 * ip] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3]) / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[8] = { 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 };
    const double dphi_Xm[3][8] =
        { { -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 },
          { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25 },
          { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 } };
    // Compute x
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t d = 0; d < 8; ++d)
            x[i] += coordinate_dofs[3 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t d = 0; d < 8; ++d)
                J[3 * i + j] += coordinate_dofs[3 * d + i] * dphi_Xm[j][d];
  }

};


class navierstokes_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  navierstokes_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~navierstokes_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 7
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 7
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           7
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights64[64] = { 0.005261434686316424, 0.009863939474383809, 0.009863939474383809, 0.005261434686316424, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.005261434686316424, 0.009863939474383809, 0.009863939474383809, 0.005261434686316424, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.01849254200709766, 0.03466912086923913, 0.03466912086923913, 0.01849254200709766, 0.01849254200709766, 0.03466912086923913, 0.03466912086923913, 0.01849254200709766, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.01849254200709766, 0.03466912086923913, 0.03466912086923913, 0.01849254200709766, 0.01849254200709766, 0.03466912086923913, 0.03466912086923913, 0.01849254200709766, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.005261434686316424, 0.009863939474383809, 0.009863939474383809, 0.005261434686316424, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.005261434686316424, 0.009863939474383809, 0.009863939474383809, 0.005261434686316424 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE35_C0_D001_Q64[1][64][27] =
        { { { -1.748122225286523, -0.4638113077126143, 2.211933532999137, 0.1304314458191322, 0.03460603530871722, -0.1650374811278494, -0.5637915779868636, -0.149585026310495, 0.7133766042973587, 0.1304314458191322, 0.03460603530871722, -0.1650374811278494, -0.009731792098050149, -0.002582036401169898, 0.01231382849922005, 0.04206579471033489, 0.01116088507562619, -0.05322667978596109, -0.5637915779868636, -0.149585026310495, 0.7133766042973587, 0.04206579471033489, 0.01116088507562619, -0.05322667978596109, -0.1818299308887394, -0.04824306722201749, 0.2300729981107569 },
            { -1.078796824831156, 0.2055140927427526, 0.8732827320884031, 0.08049152832248564, -0.01533388218792936, -0.06515764613455628, -0.3479256515368008, 0.06628090013956783, 0.2816447513972329, 0.08049152832248564, -0.01533388218792936, -0.06515764613455628, -0.006005659251642244, 0.001144096445238007, 0.004861562806404237, 0.02595953824685829, -0.004945371387850409, -0.02101416685900788, -0.3479256515368008, 0.06628090013956783, 0.2816447513972329, 0.02595953824685829, -0.004945371387850409, -0.02101416685900788, -0.112210433152001, 0.02137643051472093, 0.09083400263728006 },
            { -0.2055140927427526, 1.078796824831156, -0.8732827320884031, 0.01533388218792937, -0.08049152832248564, 0.06515764613455628, -0.06628090013956786, 0.3479256515368008, -0.2816447513972329, 0.01533388218792937, -0.08049152832248564, 0.06515764613455628, -0.001144096445238008, 0.006005659251642244, -0.004861562806404237, 0.00494537138785041, -0.02595953824685829, 0.02101416685900788, -0.06628090013956786, 0.3479256515368008, -0.2816447513972329, 0.00494537138785041, -0.02595953824685829, 0.02101416685900788, -0.02137643051472094, 0.112210433152001, -0.09083400263728006 },
            { 0.4638113077126143, 1.748122225286523, -2.211933532999137, -0.03460603530871722, -0.1304314458191322, 0.1650374811278494, 0.149585026310495, 0.5637915779868636, -0.7133766042973587, -0.03460603530871722, -0.1304314458191322, 0.1650374811278494, 0.002582036401169898, 0.009731792098050149, -0.01231382849922005, -0.01116088507562619, -0.04206579471033489, 0.05322667978596109, 0.149585026310495, 0.5637915779868636, -0.7133766042973587, -0.01116088507562619, -0.04206579471033489, 0.05322667978596109, 0.04824306722201749, 0.1818299308887394, -0.2300729981107569 },
            { -0.4969069448284669, -0.1318392138482172, 0.6287461586766842, 0.2447557036207828, 0.06493851592549255, -0.3096942195462754, -1.92933111624657, -0.5118896007916675, 2.441220717038237, 0.03707537740441563, 0.009836828929431551, -0.04691220633384718, -0.01826178961285461, -0.004845212994258724, 0.02310700260711334, 0.143951860639856, 0.03819326804800068, -0.1821451286878566, -0.1602587888221346, -0.04251981774549605, 0.2027786065676306, 0.07893681709986215, 0.02094349458874807, -0.09988031168861021, -0.6222337424429957, -0.1650908853001383, 0.7873246277431341 },
            { -0.3066499736479457, 0.05841775733230403, 0.2482322163156417, 0.1510430289747839, -0.02877415872050638, -0.1222688702542775, -1.190624003372309, 0.2268175120825934, 0.9638064912897155, 0.02287986437375382, -0.004358684101230259, -0.01852118027252356, -0.01126967002942436, 0.002146906589171533, 0.009122763440252825, 0.08883521297337223, -0.01692337961848304, -0.07191183335488918, -0.09889850379556202, 0.01884046728107649, 0.08005803651448552, 0.04871329156383874, -0.009280030947275341, -0.0394332606165634, -0.3839913342102202, 0.0731515229326372, 0.310839811277583 },
            { -0.05841775733230405, 0.3066499736479457, -0.2482322163156417, 0.0287741587205064, -0.1510430289747839, 0.1222688702542775, -0.2268175120825935, 1.190624003372309, -0.9638064912897155, 0.00435868410123026, -0.02287986437375382, 0.01852118027252356, -0.002146906589171534, 0.01126967002942436, -0.009122763440252825, 0.01692337961848304, -0.08883521297337223, 0.07191183335488918, -0.0188404672810765, 0.09889850379556202, -0.08005803651448552, 0.009280030947275345, -0.04871329156383874, 0.0394332606165634, -0.07315152293263723, 0.3839913342102202, -0.310839811277583 },
            { 0.1318392138482172, 0.4969069448284669, -0.6287461586766842, -0.06493851592549255, -0.2447557036207828, 0.3096942195462754, 0.5118896007916675, 1.92933111624657, -2.441220717038237, -0.009836828929431551, -0.03707537740441563, 0.04691220633384718, 0.004845212994258724, 0.01826178961285461, -0.02310700260711334, -0.03819326804800068, -0.143951860639856, 0.1821451286878566, 0.04251981774549605, 0.1602587888221346, -0.2027786065676306, -0.02094349458874807, -0.07893681709986215, 0.09988031168861021, 0.1650908853001383, 0.6222337424429957, -0.7873246277431341 },
            { 0.2447557036207828, 0.06493851592549255, -0.3096942195462754, -0.4969069448284669, -0.1318392138482172, 0.6287461586766842, -1.92933111624657, -0.5118896007916675, 2.441220717038237, -0.01826178961285461, -0.004845212994258724, 0.02310700260711334, 0.03707537740441563, 0.009836828929431551, -0.04691220633384718, 0.143951860639856, 0.03819326804800068, -0.1821451286878566, 0.07893681709986215, 0.02094349458874807, -0.09988031168861021, -0.1602587888221346, -0.04251981774549605, 0.2027786065676306, -0.6222337424429957, -0.1650908853001383, 0.7873246277431341 },
            { 0.1510430289747839, -0.02877415872050638, -0.1222688702542775, -0.3066499736479457, 0.05841775733230403, 0.2482322163156417, -1.190624003372309, 0.2268175120825934, 0.9638064912897155, -0.01126967002942436, 0.002146906589171533, 0.009122763440252825, 0.02287986437375382, -0.004358684101230259, -0.01852118027252356, 0.08883521297337223, -0.01692337961848304, -0.07191183335488918, 0.04871329156383874, -0.009280030947275341, -0.0394332606165634, -0.09889850379556202, 0.01884046728107649, 0.08005803651448552, -0.3839913342102202, 0.0731515229326372, 0.310839811277583 },
            { 0.0287741587205064, -0.1510430289747839, 0.1222688702542775, -0.05841775733230405, 0.3066499736479457, -0.2482322163156417, -0.2268175120825935, 1.190624003372309, -0.9638064912897155, -0.002146906589171534, 0.01126967002942436, -0.009122763440252825, 0.00435868410123026, -0.02287986437375382, 0.01852118027252356, 0.01692337961848304, -0.08883521297337223, 0.07191183335488918, 0.009280030947275345, -0.04871329156383874, 0.0394332606165634, -0.0188404672810765, 0.09889850379556202, -0.08005803651448552, -0.07315152293263723, 0.3839913342102202, -0.310839811277583 },
            { -0.06493851592549255, -0.2447557036207828, 0.3096942195462754, 0.1318392138482172, 0.4969069448284669, -0.6287461586766842, 0.5118896007916675, 1.92933111624657, -2.441220717038237, 0.004845212994258724, 0.01826178961285461, -0.02310700260711334, -0.009836828929431551, -0.03707537740441563, 0.04691220633384718, -0.03819326804800068, -0.143951860639856, 0.1821451286878566, -0.02094349458874807, -0.07893681709986215, 0.09988031168861021, 0.04251981774549605, 0.1602587888221346, -0.2027786065676306, 0.1650908853001383, 0.6222337424429957, -0.7873246277431341 },
            { 0.1304314458191324, 0.03460603530871725, -0.1650374811278496, -1.748122225286522, -0.4638113077126142, 2.211933532999137, -0.5637915779868639, -0.1495850263104951, 0.7133766042973589, -0.00973179209805016, -0.0025820364011699, 0.01231382849922006, 0.1304314458191322, 0.03460603530871721, -0.1650374811278494, 0.04206579471033491, 0.0111608850756262, -0.05322667978596111, 0.04206579471033494, 0.01116088507562621, -0.05322667978596114, -0.5637915779868636, -0.149585026310495, 0.7133766042973586, -0.1818299308887395, -0.04824306722201751, 0.230072998110757 },
            { 0.08049152832248574, -0.01533388218792938, -0.06515764613455635, -1.078796824831155, 0.2055140927427525, 0.873282732088403, -0.3479256515368009, 0.06628090013956786, 0.2816447513972331, -0.006005659251642251, 0.001144096445238008, 0.004861562806404243, 0.08049152832248563, -0.01533388218792936, -0.06515764613455627, 0.0259595382468583, -0.004945371387850411, -0.02101416685900789, 0.02595953824685832, -0.004945371387850415, -0.0210141668590079, -0.3479256515368008, 0.06628090013956783, 0.2816447513972329, -0.112210433152001, 0.02137643051472094, 0.0908340026372801 },
            { 0.01533388218792938, -0.08049152832248574, 0.06515764613455635, -0.2055140927427526, 1.078796824831155, -0.873282732088403, -0.06628090013956789, 0.3479256515368009, -0.2816447513972331, -0.001144096445238009, 0.006005659251642251, -0.004861562806404243, 0.01533388218792936, -0.08049152832248563, 0.06515764613455627, 0.004945371387850413, -0.0259595382468583, 0.02101416685900789, 0.004945371387850416, -0.02595953824685832, 0.0210141668590079, -0.06628090013956785, 0.3479256515368008, -0.2816447513972329, -0.02137643051472095, 0.112210433152001, -0.0908340026372801 },
            { -0.03460603530871725, -0.1304314458191324, 0.1650374811278496, 0.4638113077126142, 1.748122225286522, -2.211933532999137, 0.1495850263104951, 0.5637915779868639, -0.7133766042973589, 0.0025820364011699, 0.00973179209805016, -0.01231382849922006, -0.03460603530871721, -0.1304314458191322, 0.1650374811278494, -0.0111608850756262, -0.04206579471033491, 0.05322667978596111, -0.01116088507562621, -0.04206579471033494, 0.05322667978596114, 0.149585026310495, 0.5637915779868636, -0.7133766042973586, 0.04824306722201751, 0.1818299308887395, -0.230072998110757 },
            { -0.4969069448284669, -0.1318392138482172, 0.6287461586766842, 0.03707537740441563, 0.009836828929431551, -0.04691220633384718, -0.1602587888221346, -0.04251981774549605, 0.2027786065676306, 0.2447557036207828, 0.06493851592549255, -0.3096942195462754, -0.01826178961285461, -0.004845212994258724, 0.02310700260711334, 0.07893681709986215, 0.02094349458874807, -0.09988031168861021, -1.92933111624657, -0.5118896007916675, 2.441220717038237, 0.143951860639856, 0.03819326804800068, -0.1821451286878566, -0.6222337424429957, -0.1650908853001383, 0.7873246277431341 },
            { -0.3066499736479457, 0.05841775733230403, 0.2482322163156417, 0.02287986437375382, -0.004358684101230259, -0.01852118027252356, -0.09889850379556202, 0.01884046728107649, 0.08005803651448552, 0.1510430289747839, -0.02877415872050638, -0.1222688702542775, -0.01126967002942436, 0.002146906589171533, 0.009122763440252825, 0.04871329156383874, -0.009280030947275341, -0.0394332606165634, -1.190624003372309, 0.2268175120825934, 0.9638064912897155, 0.08883521297337223, -0.01692337961848304, -0.07191183335488918, -0.3839913342102202, 0.0731515229326372, 0.310839811277583 },
            { -0.05841775733230405, 0.3066499736479457, -0.2482322163156417, 0.00435868410123026, -0.02287986437375382, 0.01852118027252356, -0.0188404672810765, 0.09889850379556202, -0.08005803651448552, 0.0287741587205064, -0.1510430289747839, 0.1222688702542775, -0.002146906589171534, 0.01126967002942436, -0.009122763440252825, 0.009280030947275345, -0.04871329156383874, 0.0394332606165634, -0.2268175120825935, 1.190624003372309, -0.9638064912897155, 0.01692337961848304, -0.08883521297337223, 0.07191183335488918, -0.07315152293263723, 0.3839913342102202, -0.310839811277583 },
            { 0.1318392138482172, 0.4969069448284669, -0.6287461586766842, -0.009836828929431551, -0.03707537740441563, 0.04691220633384718, 0.04251981774549605, 0.1602587888221346, -0.2027786065676306, -0.06493851592549255, -0.2447557036207828, 0.3096942195462754, 0.004845212994258724, 0.01826178961285461, -0.02310700260711334, -0.02094349458874807, -0.07893681709986215, 0.09988031168861021, 0.5118896007916675, 1.92933111624657, -2.441220717038237, -0.03819326804800068, -0.143951860639856, 0.1821451286878566, 0.1650908853001383, 0.6222337424429957, -0.7873246277431341 },
            { -0.14124670932451, -0.03747553804549731, 0.1787222473700073, 0.06957225710897354, 0.01845889210918439, -0.08803114921815793, -0.5484159040306493, -0.1455055567279687, 0.6939214607586182, 0.06957225710897354, 0.01845889210918439, -0.08803114921815793, -0.03426840159593864, -0.009092082880433746, 0.04336048447637238, 0.2701268755947554, 0.07166998829123124, -0.3417968638859866, -0.5484159040306493, -0.1455055567279687, 0.6939214607586182, 0.2701268755947554, 0.07166998829123124, -0.3417968638859866, -2.129323969613816, -0.5649516496070676, 2.694275619220883 },
            { -0.08716581674496794, 0.01660535453404476, 0.07056046221092319, 0.04293425767365656, -0.008179107326132596, -0.03475515034752396, -0.3384370539984425, 0.06447329330423809, 0.2739637606942044, 0.04293425767365656, -0.008179107326132596, -0.03475515034752396, -0.02114763046827474, 0.004028688247230146, 0.0171189422210446, 0.1667000233038164, -0.03175686399970774, -0.1349431593041087, -0.3384370539984425, 0.06447329330423809, 0.2739637606942044, 0.1667000233038164, -0.03175686399970774, -0.1349431593041087, -1.314043093914531, 0.2503292260922172, 1.063713867822313 },
            { -0.01660535453404476, 0.08716581674496794, -0.07056046221092319, 0.0081791073261326, -0.04293425767365656, 0.03475515034752396, -0.06447329330423812, 0.3384370539984425, -0.2739637606942044, 0.0081791073261326, -0.04293425767365656, 0.03475515034752396, -0.004028688247230147, 0.02114763046827474, -0.0171189422210446, 0.03175686399970775, -0.1667000233038164, 0.1349431593041087, -0.06447329330423812, 0.3384370539984425, -0.2739637606942044, 0.03175686399970775, -0.1667000233038164, 0.1349431593041087, -0.2503292260922172, 1.314043093914531, -1.063713867822313 },
            { 0.03747553804549731, 0.14124670932451, -0.1787222473700073, -0.01845889210918439, -0.06957225710897354, 0.08803114921815793, 0.1455055567279687, 0.5484159040306493, -0.6939214607586182, -0.01845889210918439, -0.06957225710897354, 0.08803114921815793, 0.009092082880433746, 0.03426840159593864, -0.04336048447637238, -0.07166998829123124, -0.2701268755947554, 0.3417968638859866, 0.1455055567279687, 0.5484159040306493, -0.6939214607586182, -0.07166998829123124, -0.2701268755947554, 0.3417968638859866, 0.5649516496070676, 2.129323969613816, -2.694275619220883 },
            { 0.06957225710897354, 0.01845889210918439, -0.08803114921815793, -0.14124670932451, -0.03747553804549731, 0.1787222473700073, -0.5484159040306493, -0.1455055567279687, 0.6939214607586182, -0.03426840159593864, -0.009092082880433746, 0.04336048447637238, 0.06957225710897354, 0.01845889210918439, -0.08803114921815793, 0.2701268755947554, 0.07166998829123124, -0.3417968638859866, 0.2701268755947554, 0.07166998829123124, -0.3417968638859866, -0.5484159040306493, -0.1455055567279687, 0.6939214607586182, -2.129323969613816, -0.5649516496070676, 2.694275619220883 },
            { 0.04293425767365656, -0.008179107326132596, -0.03475515034752396, -0.08716581674496794, 0.01660535453404476, 0.07056046221092319, -0.3384370539984425, 0.06447329330423809, 0.2739637606942044, -0.02114763046827474, 0.004028688247230146, 0.0171189422210446, 0.04293425767365656, -0.008179107326132596, -0.03475515034752396, 0.1667000233038164, -0.03175686399970774, -0.1349431593041087, 0.1667000233038164, -0.03175686399970774, -0.1349431593041087, -0.3384370539984425, 0.06447329330423809, 0.2739637606942044, -1.314043093914531, 0.2503292260922172, 1.063713867822313 },
            { 0.0081791073261326, -0.04293425767365656, 0.03475515034752396, -0.01660535453404476, 0.08716581674496794, -0.07056046221092319, -0.06447329330423812, 0.3384370539984425, -0.2739637606942044, -0.004028688247230147, 0.02114763046827474, -0.0171189422210446, 0.0081791073261326, -0.04293425767365656, 0.03475515034752396, 0.03175686399970775, -0.1667000233038164, 0.1349431593041087, 0.03175686399970775, -0.1667000233038164, 0.1349431593041087, -0.06447329330423812, 0.3384370539984425, -0.2739637606942044, -0.2503292260922172, 1.314043093914531, -1.063713867822313 },
            { -0.01845889210918439, -0.06957225710897354, 0.08803114921815793, 0.03747553804549731, 0.14124670932451, -0.1787222473700073, 0.1455055567279687, 0.5484159040306493, -0.6939214607586182, 0.009092082880433746, 0.03426840159593864, -0.04336048447637238, -0.01845889210918439, -0.06957225710897354, 0.08803114921815793, -0.07166998829123124, -0.2701268755947554, 0.3417968638859866, -0.07166998829123124, -0.2701268755947554, 0.3417968638859866, 0.1455055567279687, 0.5484159040306493, -0.6939214607586182, 0.5649516496070676, 2.129323969613816, -2.694275619220883 },
            { 0.03707537740441567, 0.009836828929431562, -0.04691220633384724, -0.4969069448284669, -0.1318392138482171, 0.628746158676684, -0.1602587888221346, -0.04251981774549607, 0.2027786065676307, -0.01826178961285464, -0.00484521299425873, 0.02310700260711337, 0.2447557036207828, 0.06493851592549255, -0.3096942195462753, 0.07893681709986218, 0.02094349458874808, -0.09988031168861027, 0.1439518606398561, 0.03819326804800072, -0.1821451286878568, -1.929331116246569, -0.5118896007916673, 2.441220717038237, -0.622233742442996, -0.1650908853001384, 0.7873246277431344 },
            { 0.02287986437375385, -0.004358684101230264, -0.01852118027252358, -0.3066499736479457, 0.05841775733230402, 0.2482322163156417, -0.09889850379556206, 0.0188404672810765, 0.08005803651448555, -0.01126967002942437, 0.002146906589171536, 0.009122763440252835, 0.1510430289747839, -0.02877415872050638, -0.1222688702542775, 0.04871329156383876, -0.009280030947275347, -0.03943326061656342, 0.08883521297337232, -0.01692337961848306, -0.07191183335488927, -1.190624003372309, 0.2268175120825933, 0.9638064912897154, -0.3839913342102204, 0.07315152293263724, 0.3108398112775831 },
            { 0.004358684101230265, -0.02287986437375385, 0.01852118027252358, -0.05841775733230404, 0.3066499736479457, -0.2482322163156417, -0.01884046728107651, 0.09889850379556206, -0.08005803651448555, -0.002146906589171537, 0.01126967002942437, -0.009122763440252835, 0.02877415872050639, -0.1510430289747839, 0.1222688702542775, 0.009280030947275348, -0.04871329156383876, 0.03943326061656342, 0.01692337961848306, -0.08883521297337232, 0.07191183335488927, -0.2268175120825934, 1.190624003372309, -0.9638064912897154, -0.07315152293263727, 0.3839913342102204, -0.3108398112775831 },
            { -0.009836828929431562, -0.03707537740441567, 0.04691220633384724, 0.1318392138482171, 0.4969069448284669, -0.628746158676684, 0.04251981774549607, 0.1602587888221346, -0.2027786065676307, 0.00484521299425873, 0.01826178961285464, -0.02310700260711337, -0.06493851592549255, -0.2447557036207828, 0.3096942195462753, -0.02094349458874808, -0.07893681709986218, 0.09988031168861027, -0.03819326804800072, -0.1439518606398561, 0.1821451286878568, 0.5118896007916673, 1.929331116246569, -2.441220717038237, 0.1650908853001384, 0.622233742442996, -0.7873246277431344 },
            { 0.2447557036207828, 0.06493851592549255, -0.3096942195462754, -0.01826178961285461, -0.004845212994258724, 0.02310700260711334, 0.07893681709986215, 0.02094349458874807, -0.09988031168861021, -0.4969069448284669, -0.1318392138482172, 0.6287461586766842, 0.03707537740441563, 0.009836828929431551, -0.04691220633384718, -0.1602587888221346, -0.04251981774549605, 0.2027786065676306, -1.92933111624657, -0.5118896007916675, 2.441220717038237, 0.143951860639856, 0.03819326804800068, -0.1821451286878566, -0.6222337424429957, -0.1650908853001383, 0.7873246277431341 },
            { 0.1510430289747839, -0.02877415872050638, -0.1222688702542775, -0.01126967002942436, 0.002146906589171533, 0.009122763440252825, 0.04871329156383874, -0.009280030947275341, -0.0394332606165634, -0.3066499736479457, 0.05841775733230403, 0.2482322163156417, 0.02287986437375382, -0.004358684101230259, -0.01852118027252356, -0.09889850379556202, 0.01884046728107649, 0.08005803651448552, -1.190624003372309, 0.2268175120825934, 0.9638064912897155, 0.08883521297337223, -0.01692337961848304, -0.07191183335488918, -0.3839913342102202, 0.0731515229326372, 0.310839811277583 },
            { 0.0287741587205064, -0.1510430289747839, 0.1222688702542775, -0.002146906589171534, 0.01126967002942436, -0.009122763440252825, 0.009280030947275345, -0.04871329156383874, 0.0394332606165634, -0.05841775733230405, 0.3066499736479457, -0.2482322163156417, 0.00435868410123026, -0.02287986437375382, 0.01852118027252356, -0.0188404672810765, 0.09889850379556202, -0.08005803651448552, -0.2268175120825935, 1.190624003372309, -0.9638064912897155, 0.01692337961848304, -0.08883521297337223, 0.07191183335488918, -0.07315152293263723, 0.3839913342102202, -0.310839811277583 },
            { -0.06493851592549255, -0.2447557036207828, 0.3096942195462754, 0.004845212994258724, 0.01826178961285461, -0.02310700260711334, -0.02094349458874807, -0.07893681709986215, 0.09988031168861021, 0.1318392138482172, 0.4969069448284669, -0.6287461586766842, -0.009836828929431551, -0.03707537740441563, 0.04691220633384718, 0.04251981774549605, 0.1602587888221346, -0.2027786065676306, 0.5118896007916675, 1.92933111624657, -2.441220717038237, -0.03819326804800068, -0.143951860639856, 0.1821451286878566, 0.1650908853001383, 0.6222337424429957, -0.7873246277431341 },
            { 0.06957225710897354, 0.01845889210918439, -0.08803114921815793, -0.03426840159593864, -0.009092082880433746, 0.04336048447637238, 0.2701268755947554, 0.07166998829123124, -0.3417968638859866, -0.14124670932451, -0.03747553804549731, 0.1787222473700073, 0.06957225710897354, 0.01845889210918439, -0.08803114921815793, -0.5484159040306493, -0.1455055567279687, 0.6939214607586182, -0.5484159040306493, -0.1455055567279687, 0.6939214607586182, 0.2701268755947554, 0.07166998829123124, -0.3417968638859866, -2.129323969613816, -0.5649516496070676, 2.694275619220883 },
            { 0.04293425767365656, -0.008179107326132596, -0.03475515034752396, -0.02114763046827474, 0.004028688247230146, 0.0171189422210446, 0.1667000233038164, -0.03175686399970774, -0.1349431593041087, -0.08716581674496794, 0.01660535453404476, 0.07056046221092319, 0.04293425767365656, -0.008179107326132596, -0.03475515034752396, -0.3384370539984425, 0.06447329330423809, 0.2739637606942044, -0.3384370539984425, 0.06447329330423809, 0.2739637606942044, 0.1667000233038164, -0.03175686399970774, -0.1349431593041087, -1.314043093914531, 0.2503292260922172, 1.063713867822313 },
            { 0.0081791073261326, -0.04293425767365656, 0.03475515034752396, -0.004028688247230147, 0.02114763046827474, -0.0171189422210446, 0.03175686399970775, -0.1667000233038164, 0.1349431593041087, -0.01660535453404476, 0.08716581674496794, -0.07056046221092319, 0.0081791073261326, -0.04293425767365656, 0.03475515034752396, -0.06447329330423812, 0.3384370539984425, -0.2739637606942044, -0.06447329330423812, 0.3384370539984425, -0.2739637606942044, 0.03175686399970775, -0.1667000233038164, 0.1349431593041087, -0.2503292260922172, 1.314043093914531, -1.063713867822313 },
            { -0.01845889210918439, -0.06957225710897354, 0.08803114921815793, 0.009092082880433746, 0.03426840159593864, -0.04336048447637238, -0.07166998829123124, -0.2701268755947554, 0.3417968638859866, 0.03747553804549731, 0.14124670932451, -0.1787222473700073, -0.01845889210918439, -0.06957225710897354, 0.08803114921815793, 0.1455055567279687, 0.5484159040306493, -0.6939214607586182, 0.1455055567279687, 0.5484159040306493, -0.6939214607586182, -0.07166998829123124, -0.2701268755947554, 0.3417968638859866, 0.5649516496070676, 2.129323969613816, -2.694275619220883 },
            { -0.03426840159593864, -0.009092082880433746, 0.04336048447637238, 0.06957225710897354, 0.01845889210918439, -0.08803114921815793, 0.2701268755947554, 0.07166998829123124, -0.3417968638859866, 0.06957225710897354, 0.01845889210918439, -0.08803114921815793, -0.14124670932451, -0.03747553804549731, 0.1787222473700073, -0.5484159040306493, -0.1455055567279687, 0.6939214607586182, 0.2701268755947554, 0.07166998829123124, -0.3417968638859866, -0.5484159040306493, -0.1455055567279687, 0.6939214607586182, -2.129323969613816, -0.5649516496070676, 2.694275619220883 },
            { -0.02114763046827474, 0.004028688247230146, 0.0171189422210446, 0.04293425767365656, -0.008179107326132596, -0.03475515034752396, 0.1667000233038164, -0.03175686399970774, -0.1349431593041087, 0.04293425767365656, -0.008179107326132596, -0.03475515034752396, -0.08716581674496794, 0.01660535453404476, 0.07056046221092319, -0.3384370539984425, 0.06447329330423809, 0.2739637606942044, 0.1667000233038164, -0.03175686399970774, -0.1349431593041087, -0.3384370539984425, 0.06447329330423809, 0.2739637606942044, -1.314043093914531, 0.2503292260922172, 1.063713867822313 },
            { -0.004028688247230147, 0.02114763046827474, -0.0171189422210446, 0.0081791073261326, -0.04293425767365656, 0.03475515034752396, 0.03175686399970775, -0.1667000233038164, 0.1349431593041087, 0.0081791073261326, -0.04293425767365656, 0.03475515034752396, -0.01660535453404476, 0.08716581674496794, -0.07056046221092319, -0.06447329330423812, 0.3384370539984425, -0.2739637606942044, 0.03175686399970775, -0.1667000233038164, 0.1349431593041087, -0.06447329330423812, 0.3384370539984425, -0.2739637606942044, -0.2503292260922172, 1.314043093914531, -1.063713867822313 },
            { 0.009092082880433746, 0.03426840159593864, -0.04336048447637238, -0.01845889210918439, -0.06957225710897354, 0.08803114921815793, -0.07166998829123124, -0.2701268755947554, 0.3417968638859866, -0.01845889210918439, -0.06957225710897354, 0.08803114921815793, 0.03747553804549731, 0.14124670932451, -0.1787222473700073, 0.1455055567279687, 0.5484159040306493, -0.6939214607586182, -0.07166998829123124, -0.2701268755947554, 0.3417968638859866, 0.1455055567279687, 0.5484159040306493, -0.6939214607586182, 0.5649516496070676, 2.129323969613816, -2.694275619220883 },
            { -0.01826178961285464, -0.00484521299425873, 0.02310700260711337, 0.2447557036207828, 0.06493851592549255, -0.3096942195462753, 0.07893681709986218, 0.02094349458874808, -0.09988031168861027, 0.03707537740441567, 0.009836828929431562, -0.04691220633384724, -0.4969069448284669, -0.1318392138482171, 0.628746158676684, -0.1602587888221346, -0.04251981774549607, 0.2027786065676307, 0.1439518606398561, 0.03819326804800072, -0.1821451286878568, -1.929331116246569, -0.5118896007916673, 2.441220717038237, -0.622233742442996, -0.1650908853001384, 0.7873246277431344 },
            { -0.01126967002942437, 0.002146906589171536, 0.009122763440252835, 0.1510430289747839, -0.02877415872050638, -0.1222688702542775, 0.04871329156383876, -0.009280030947275347, -0.03943326061656342, 0.02287986437375385, -0.004358684101230264, -0.01852118027252358, -0.3066499736479457, 0.05841775733230402, 0.2482322163156417, -0.09889850379556206, 0.0188404672810765, 0.08005803651448555, 0.08883521297337232, -0.01692337961848306, -0.07191183335488927, -1.190624003372309, 0.2268175120825933, 0.9638064912897154, -0.3839913342102204, 0.07315152293263724, 0.3108398112775831 },
            { -0.002146906589171537, 0.01126967002942437, -0.009122763440252835, 0.02877415872050639, -0.1510430289747839, 0.1222688702542775, 0.009280030947275348, -0.04871329156383876, 0.03943326061656342, 0.004358684101230265, -0.02287986437375385, 0.01852118027252358, -0.05841775733230404, 0.3066499736479457, -0.2482322163156417, -0.01884046728107651, 0.09889850379556206, -0.08005803651448555, 0.01692337961848306, -0.08883521297337232, 0.07191183335488927, -0.2268175120825934, 1.190624003372309, -0.9638064912897154, -0.07315152293263727, 0.3839913342102204, -0.3108398112775831 },
            { 0.00484521299425873, 0.01826178961285464, -0.02310700260711337, -0.06493851592549255, -0.2447557036207828, 0.3096942195462753, -0.02094349458874808, -0.07893681709986218, 0.09988031168861027, -0.009836828929431562, -0.03707537740441567, 0.04691220633384724, 0.1318392138482171, 0.4969069448284669, -0.628746158676684, 0.04251981774549607, 0.1602587888221346, -0.2027786065676307, -0.03819326804800072, -0.1439518606398561, 0.1821451286878568, 0.5118896007916673, 1.929331116246569, -2.441220717038237, 0.1650908853001384, 0.622233742442996, -0.7873246277431344 },
            { 0.1304314458191324, 0.03460603530871725, -0.1650374811278496, -0.00973179209805016, -0.0025820364011699, 0.01231382849922006, 0.04206579471033494, 0.01116088507562621, -0.05322667978596114, -1.748122225286522, -0.4638113077126142, 2.211933532999137, 0.1304314458191322, 0.03460603530871721, -0.1650374811278494, -0.5637915779868636, -0.149585026310495, 0.7133766042973586, -0.5637915779868639, -0.1495850263104951, 0.7133766042973589, 0.04206579471033491, 0.0111608850756262, -0.05322667978596111, -0.1818299308887395, -0.04824306722201751, 0.230072998110757 },
            { 0.08049152832248574, -0.01533388218792938, -0.06515764613455635, -0.006005659251642251, 0.001144096445238008, 0.004861562806404243, 0.02595953824685832, -0.004945371387850415, -0.0210141668590079, -1.078796824831155, 0.2055140927427525, 0.873282732088403, 0.08049152832248563, -0.01533388218792936, -0.06515764613455627, -0.3479256515368008, 0.06628090013956783, 0.2816447513972329, -0.3479256515368009, 0.06628090013956786, 0.2816447513972331, 0.0259595382468583, -0.004945371387850411, -0.02101416685900789, -0.112210433152001, 0.02137643051472094, 0.0908340026372801 },
            { 0.01533388218792938, -0.08049152832248574, 0.06515764613455635, -0.001144096445238009, 0.006005659251642251, -0.004861562806404243, 0.004945371387850416, -0.02595953824685832, 0.0210141668590079, -0.2055140927427526, 1.078796824831155, -0.873282732088403, 0.01533388218792936, -0.08049152832248563, 0.06515764613455627, -0.06628090013956785, 0.3479256515368008, -0.2816447513972329, -0.06628090013956789, 0.3479256515368009, -0.2816447513972331, 0.004945371387850413, -0.0259595382468583, 0.02101416685900789, -0.02137643051472095, 0.112210433152001, -0.0908340026372801 },
            { -0.03460603530871725, -0.1304314458191324, 0.1650374811278496, 0.0025820364011699, 0.00973179209805016, -0.01231382849922006, -0.01116088507562621, -0.04206579471033494, 0.05322667978596114, 0.4638113077126142, 1.748122225286522, -2.211933532999137, -0.03460603530871721, -0.1304314458191322, 0.1650374811278494, 0.149585026310495, 0.5637915779868636, -0.7133766042973586, 0.1495850263104951, 0.5637915779868639, -0.7133766042973589, -0.0111608850756262, -0.04206579471033491, 0.05322667978596111, 0.04824306722201751, 0.1818299308887395, -0.230072998110757 },
            { 0.03707537740441567, 0.009836828929431562, -0.04691220633384724, -0.01826178961285464, -0.00484521299425873, 0.02310700260711337, 0.1439518606398561, 0.03819326804800072, -0.1821451286878568, -0.4969069448284669, -0.1318392138482171, 0.628746158676684, 0.2447557036207828, 0.06493851592549255, -0.3096942195462753, -1.929331116246569, -0.5118896007916673, 2.441220717038237, -0.1602587888221346, -0.04251981774549607, 0.2027786065676307, 0.07893681709986218, 0.02094349458874808, -0.09988031168861027, -0.622233742442996, -0.1650908853001384, 0.7873246277431344 },
            { 0.02287986437375385, -0.004358684101230264, -0.01852118027252358, -0.01126967002942437, 0.002146906589171536, 0.009122763440252835, 0.08883521297337232, -0.01692337961848306, -0.07191183335488927, -0.3066499736479457, 0.05841775733230402, 0.2482322163156417, 0.1510430289747839, -0.02877415872050638, -0.1222688702542775, -1.190624003372309, 0.2268175120825933, 0.9638064912897154, -0.09889850379556206, 0.0188404672810765, 0.08005803651448555, 0.04871329156383876, -0.009280030947275347, -0.03943326061656342, -0.3839913342102204, 0.07315152293263724, 0.3108398112775831 },
            { 0.004358684101230265, -0.02287986437375385, 0.01852118027252358, -0.002146906589171537, 0.01126967002942437, -0.009122763440252835, 0.01692337961848306, -0.08883521297337232, 0.07191183335488927, -0.05841775733230404, 0.3066499736479457, -0.2482322163156417, 0.02877415872050639, -0.1510430289747839, 0.1222688702542775, -0.2268175120825934, 1.190624003372309, -0.9638064912897154, -0.01884046728107651, 0.09889850379556206, -0.08005803651448555, 0.009280030947275348, -0.04871329156383876, 0.03943326061656342, -0.07315152293263727, 0.3839913342102204, -0.3108398112775831 },
            { -0.009836828929431562, -0.03707537740441567, 0.04691220633384724, 0.00484521299425873, 0.01826178961285464, -0.02310700260711337, -0.03819326804800072, -0.1439518606398561, 0.1821451286878568, 0.1318392138482171, 0.4969069448284669, -0.628746158676684, -0.06493851592549255, -0.2447557036207828, 0.3096942195462753, 0.5118896007916673, 1.929331116246569, -2.441220717038237, 0.04251981774549607, 0.1602587888221346, -0.2027786065676307, -0.02094349458874808, -0.07893681709986218, 0.09988031168861027, 0.1650908853001384, 0.622233742442996, -0.7873246277431344 },
            { -0.01826178961285464, -0.00484521299425873, 0.02310700260711337, 0.03707537740441567, 0.009836828929431562, -0.04691220633384724, 0.1439518606398561, 0.03819326804800072, -0.1821451286878568, 0.2447557036207828, 0.06493851592549255, -0.3096942195462753, -0.4969069448284669, -0.1318392138482171, 0.628746158676684, -1.929331116246569, -0.5118896007916673, 2.441220717038237, 0.07893681709986218, 0.02094349458874808, -0.09988031168861027, -0.1602587888221346, -0.04251981774549607, 0.2027786065676307, -0.622233742442996, -0.1650908853001384, 0.7873246277431344 },
            { -0.01126967002942437, 0.002146906589171536, 0.009122763440252835, 0.02287986437375385, -0.004358684101230264, -0.01852118027252358, 0.08883521297337232, -0.01692337961848306, -0.07191183335488927, 0.1510430289747839, -0.02877415872050638, -0.1222688702542775, -0.3066499736479457, 0.05841775733230402, 0.2482322163156417, -1.190624003372309, 0.2268175120825933, 0.9638064912897154, 0.04871329156383876, -0.009280030947275347, -0.03943326061656342, -0.09889850379556206, 0.0188404672810765, 0.08005803651448555, -0.3839913342102204, 0.07315152293263724, 0.3108398112775831 },
            { -0.002146906589171537, 0.01126967002942437, -0.009122763440252835, 0.004358684101230265, -0.02287986437375385, 0.01852118027252358, 0.01692337961848306, -0.08883521297337232, 0.07191183335488927, 0.02877415872050639, -0.1510430289747839, 0.1222688702542775, -0.05841775733230404, 0.3066499736479457, -0.2482322163156417, -0.2268175120825934, 1.190624003372309, -0.9638064912897154, 0.009280030947275348, -0.04871329156383876, 0.03943326061656342, -0.01884046728107651, 0.09889850379556206, -0.08005803651448555, -0.07315152293263727, 0.3839913342102204, -0.3108398112775831 },
            { 0.00484521299425873, 0.01826178961285464, -0.02310700260711337, -0.009836828929431562, -0.03707537740441567, 0.04691220633384724, -0.03819326804800072, -0.1439518606398561, 0.1821451286878568, -0.06493851592549255, -0.2447557036207828, 0.3096942195462753, 0.1318392138482171, 0.4969069448284669, -0.628746158676684, 0.5118896007916673, 1.929331116246569, -2.441220717038237, -0.02094349458874808, -0.07893681709986218, 0.09988031168861027, 0.04251981774549607, 0.1602587888221346, -0.2027786065676307, 0.1650908853001384, 0.622233742442996, -0.7873246277431344 },
            { -0.009731792098050172, -0.002582036401169904, 0.01231382849922008, 0.1304314458191324, 0.03460603530871725, -0.1650374811278496, 0.04206579471033496, 0.01116088507562621, -0.05322667978596117, 0.1304314458191324, 0.03460603530871725, -0.1650374811278496, -1.748122225286522, -0.4638113077126142, 2.211933532999137, -0.5637915779868639, -0.1495850263104951, 0.7133766042973589, 0.04206579471033496, 0.01116088507562621, -0.05322667978596117, -0.5637915779868639, -0.1495850263104951, 0.7133766042973589, -0.1818299308887396, -0.04824306722201752, 0.2300729981107571 },
            { -0.006005659251642258, 0.00114409644523801, 0.004861562806404249, 0.08049152832248573, -0.01533388218792938, -0.06515764613455635, 0.02595953824685833, -0.004945371387850416, -0.02101416685900791, 0.08049152832248573, -0.01533388218792938, -0.06515764613455635, -1.078796824831155, 0.2055140927427525, 0.873282732088403, -0.3479256515368009, 0.06628090013956786, 0.281644751397233, 0.02595953824685833, -0.004945371387850416, -0.02101416685900791, -0.3479256515368009, 0.06628090013956786, 0.281644751397233, -0.1122104331520011, 0.02137643051472095, 0.09083400263728013 },
            { -0.00114409644523801, 0.006005659251642258, -0.004861562806404249, 0.01533388218792938, -0.08049152832248573, 0.06515764613455635, 0.004945371387850418, -0.02595953824685833, 0.02101416685900791, 0.01533388218792938, -0.08049152832248573, 0.06515764613455635, -0.2055140927427526, 1.078796824831155, -0.873282732088403, -0.06628090013956787, 0.3479256515368009, -0.281644751397233, 0.004945371387850418, -0.02595953824685833, 0.02101416685900791, -0.06628090013956787, 0.3479256515368009, -0.281644751397233, -0.02137643051472096, 0.1122104331520011, -0.09083400263728013 },
            { 0.002582036401169904, 0.009731792098050172, -0.01231382849922008, -0.03460603530871725, -0.1304314458191324, 0.1650374811278496, -0.01116088507562621, -0.04206579471033496, 0.05322667978596117, -0.03460603530871725, -0.1304314458191324, 0.1650374811278496, 0.4638113077126142, 1.748122225286522, -2.211933532999137, 0.1495850263104951, 0.5637915779868639, -0.7133766042973589, -0.01116088507562621, -0.04206579471033496, 0.05322667978596117, 0.1495850263104951, 0.5637915779868639, -0.7133766042973589, 0.04824306722201752, 0.1818299308887396, -0.2300729981107571 } } };
    alignas(32) static const double FE35_C0_D010_Q64[1][64][27] =
        { { { -1.748122225286523, 0.1304314458191322, -0.5637915779868636, -0.4638113077126143, 0.03460603530871722, -0.149585026310495, 2.211933532999137, -0.1650374811278494, 0.7133766042973586, 0.1304314458191322, -0.009731792098050149, 0.04206579471033489, 0.03460603530871721, -0.002582036401169897, 0.01116088507562619, -0.1650374811278494, 0.01231382849922005, -0.05322667978596109, -0.5637915779868636, 0.04206579471033489, -0.1818299308887394, -0.149585026310495, 0.01116088507562619, -0.04824306722201748, 0.7133766042973587, -0.05322667978596109, 0.2300729981107569 },
            { -0.4969069448284669, 0.2447557036207828, -1.92933111624657, -0.1318392138482172, 0.06493851592549255, -0.5118896007916675, 0.628746158676684, -0.3096942195462754, 2.441220717038237, 0.03707537740441563, -0.01826178961285461, 0.1439518606398559, 0.00983682892943155, -0.004845212994258724, 0.03819326804800068, -0.04691220633384718, 0.02310700260711334, -0.1821451286878566, -0.1602587888221346, 0.07893681709986215, -0.6222337424429958, -0.04251981774549605, 0.02094349458874807, -0.1650908853001383, 0.2027786065676306, -0.09988031168861022, 0.7873246277431341 },
            { 0.2447557036207828, -0.4969069448284669, -1.92933111624657, 0.06493851592549255, -0.1318392138482172, -0.5118896007916675, -0.3096942195462754, 0.628746158676684, 2.441220717038237, -0.01826178961285461, 0.03707537740441563, 0.1439518606398559, -0.004845212994258724, 0.00983682892943155, 0.03819326804800068, 0.02310700260711334, -0.04691220633384718, -0.1821451286878566, 0.07893681709986215, -0.1602587888221346, -0.6222337424429958, 0.02094349458874807, -0.04251981774549605, -0.1650908853001383, -0.09988031168861022, 0.2027786065676306, 0.7873246277431341 },
            { 0.1304314458191324, -1.748122225286523, -0.5637915779868639, 0.03460603530871726, -0.4638113077126143, -0.1495850263104951, -0.1650374811278496, 2.211933532999137, 0.7133766042973589, -0.009731792098050161, 0.1304314458191322, 0.04206579471033491, -0.0025820364011699, 0.03460603530871721, 0.0111608850756262, 0.01231382849922006, -0.1650374811278494, -0.05322667978596111, 0.04206579471033494, -0.5637915779868635, -0.1818299308887395, 0.01116088507562621, -0.149585026310495, -0.0482430672220175, -0.05322667978596115, 0.7133766042973586, 0.230072998110757 },
            { -1.078796824831156, 0.08049152832248564, -0.3479256515368008, 0.2055140927427526, -0.01533388218792936, 0.06628090013956783, 0.8732827320884031, -0.06515764613455628, 0.2816447513972329, 0.08049152832248564, -0.006005659251642244, 0.02595953824685829, -0.01533388218792936, 0.001144096445238007, -0.004945371387850409, -0.06515764613455628, 0.004861562806404237, -0.02101416685900788, -0.3479256515368008, 0.02595953824685829, -0.112210433152001, 0.06628090013956783, -0.004945371387850409, 0.02137643051472093, 0.2816447513972329, -0.02101416685900788, 0.09083400263728005 },
            { -0.3066499736479457, 0.1510430289747839, -1.190624003372309, 0.05841775733230403, -0.02877415872050638, 0.2268175120825934, 0.2482322163156417, -0.1222688702542775, 0.9638064912897155, 0.02287986437375382, -0.01126967002942436, 0.08883521297337221, -0.004358684101230258, 0.002146906589171533, -0.01692337961848303, -0.01852118027252356, 0.009122763440252825, -0.07191183335488918, -0.09889850379556202, 0.04871329156383874, -0.3839913342102202, 0.0188404672810765, -0.009280030947275341, 0.0731515229326372, 0.08005803651448552, -0.0394332606165634, 0.310839811277583 },
            { 0.1510430289747839, -0.3066499736479457, -1.190624003372309, -0.02877415872050638, 0.05841775733230403, 0.2268175120825934, -0.1222688702542775, 0.2482322163156417, 0.9638064912897155, -0.01126967002942436, 0.02287986437375382, 0.08883521297337221, 0.002146906589171533, -0.004358684101230258, -0.01692337961848303, 0.009122763440252825, -0.01852118027252356, -0.07191183335488918, 0.04871329156383874, -0.09889850379556202, -0.3839913342102202, -0.009280030947275341, 0.0188404672810765, 0.0731515229326372, -0.0394332606165634, 0.08005803651448552, 0.310839811277583 },
            { 0.08049152832248573, -1.078796824831155, -0.3479256515368009, -0.01533388218792938, 0.2055140927427525, 0.06628090013956786, -0.06515764613455635, 0.873282732088403, 0.2816447513972331, -0.006005659251642251, 0.08049152832248563, 0.0259595382468583, 0.001144096445238008, -0.01533388218792936, -0.00494537138785041, 0.004861562806404244, -0.06515764613455627, -0.02101416685900789, 0.02595953824685832, -0.3479256515368007, -0.112210433152001, -0.004945371387850415, 0.06628090013956782, 0.02137643051472094, -0.0210141668590079, 0.2816447513972329, 0.09083400263728009 },
            { -0.2055140927427526, 0.01533388218792937, -0.06628090013956786, 1.078796824831156, -0.08049152832248564, 0.3479256515368008, -0.8732827320884031, 0.06515764613455628, -0.2816447513972329, 0.01533388218792936, -0.001144096445238007, 0.00494537138785041, -0.08049152832248564, 0.006005659251642244, -0.02595953824685829, 0.06515764613455628, -0.004861562806404237, 0.02101416685900788, -0.06628090013956786, 0.00494537138785041, -0.02137643051472094, 0.3479256515368008, -0.02595953824685829, 0.112210433152001, -0.2816447513972329, 0.02101416685900788, -0.09083400263728005 },
            { -0.05841775733230405, 0.02877415872050639, -0.2268175120825935, 0.3066499736479457, -0.1510430289747839, 1.190624003372309, -0.2482322163156417, 0.1222688702542775, -0.9638064912897155, 0.00435868410123026, -0.002146906589171534, 0.01692337961848304, -0.02287986437375382, 0.01126967002942436, -0.08883521297337221, 0.01852118027252356, -0.009122763440252825, 0.07191183335488918, -0.0188404672810765, 0.009280030947275345, -0.07315152293263723, 0.09889850379556202, -0.04871329156383874, 0.3839913342102202, -0.08005803651448552, 0.0394332606165634, -0.310839811277583 },
            { 0.02877415872050639, -0.05841775733230405, -0.2268175120825935, -0.1510430289747839, 0.3066499736479457, 1.190624003372309, 0.1222688702542775, -0.2482322163156417, -0.9638064912897155, -0.002146906589171534, 0.00435868410123026, 0.01692337961848304, 0.01126967002942436, -0.02287986437375382, -0.08883521297337221, -0.009122763440252825, 0.01852118027252356, 0.07191183335488918, 0.009280030947275345, -0.0188404672810765, -0.07315152293263723, -0.04871329156383874, 0.09889850379556202, 0.3839913342102202, 0.0394332606165634, -0.08005803651448552, -0.310839811277583 },
            { 0.01533388218792938, -0.2055140927427526, -0.06628090013956789, -0.08049152832248573, 1.078796824831155, 0.3479256515368009, 0.06515764613455635, -0.873282732088403, -0.2816447513972331, -0.001144096445238009, 0.01533388218792936, 0.004945371387850412, 0.006005659251642251, -0.08049152832248563, -0.0259595382468583, -0.004861562806404244, 0.06515764613455627, 0.02101416685900789, 0.004945371387850416, -0.06628090013956785, -0.02137643051472095, -0.02595953824685832, 0.3479256515368007, 0.112210433152001, 0.0210141668590079, -0.2816447513972329, -0.09083400263728009 },
            { 0.4638113077126143, -0.03460603530871722, 0.149585026310495, 1.748122225286523, -0.1304314458191322, 0.5637915779868636, -2.211933532999137, 0.1650374811278494, -0.7133766042973586, -0.03460603530871721, 0.002582036401169897, -0.01116088507562619, -0.1304314458191322, 0.009731792098050149, -0.04206579471033489, 0.1650374811278494, -0.01231382849922005, 0.05322667978596109, 0.149585026310495, -0.01116088507562619, 0.04824306722201748, 0.5637915779868636, -0.04206579471033489, 0.1818299308887394, -0.7133766042973587, 0.05322667978596109, -0.2300729981107569 },
            { 0.1318392138482172, -0.06493851592549255, 0.5118896007916675, 0.4969069448284669, -0.2447557036207828, 1.92933111624657, -0.628746158676684, 0.3096942195462754, -2.441220717038237, -0.00983682892943155, 0.004845212994258724, -0.03819326804800068, -0.03707537740441563, 0.01826178961285461, -0.1439518606398559, 0.04691220633384718, -0.02310700260711334, 0.1821451286878566, 0.04251981774549605, -0.02094349458874807, 0.1650908853001383, 0.1602587888221346, -0.07893681709986215, 0.6222337424429958, -0.2027786065676306, 0.09988031168861022, -0.7873246277431341 },
            { -0.06493851592549255, 0.1318392138482172, 0.5118896007916675, -0.2447557036207828, 0.4969069448284669, 1.92933111624657, 0.3096942195462754, -0.628746158676684, -2.441220717038237, 0.004845212994258724, -0.00983682892943155, -0.03819326804800068, 0.01826178961285461, -0.03707537740441563, -0.1439518606398559, -0.02310700260711334, 0.04691220633384718, 0.1821451286878566, -0.02094349458874807, 0.04251981774549605, 0.1650908853001383, -0.07893681709986215, 0.1602587888221346, 0.6222337424429958, 0.09988031168861022, -0.2027786065676306, -0.7873246277431341 },
            { -0.03460603530871726, 0.4638113077126143, 0.1495850263104951, -0.1304314458191324, 1.748122225286523, 0.5637915779868639, 0.1650374811278496, -2.211933532999137, -0.7133766042973589, 0.0025820364011699, -0.03460603530871721, -0.0111608850756262, 0.009731792098050161, -0.1304314458191322, -0.04206579471033491, -0.01231382849922006, 0.1650374811278494, 0.05322667978596111, -0.01116088507562621, 0.149585026310495, 0.0482430672220175, -0.04206579471033494, 0.5637915779868635, 0.1818299308887395, 0.05322667978596115, -0.7133766042973586, -0.230072998110757 },
            { -0.496906944828467, 0.03707537740441563, -0.1602587888221346, -0.1318392138482172, 0.00983682892943155, -0.04251981774549605, 0.6287461586766842, -0.04691220633384718, 0.2027786065676306, 0.2447557036207828, -0.01826178961285461, 0.07893681709986215, 0.06493851592549255, -0.004845212994258724, 0.02094349458874806, -0.3096942195462754, 0.02310700260711334, -0.09988031168861021, -1.92933111624657, 0.143951860639856, -0.6222337424429958, -0.5118896007916675, 0.03819326804800068, -0.1650908853001383, 2.441220717038237, -0.1821451286878566, 0.7873246277431341 },
            { -0.14124670932451, 0.06957225710897355, -0.5484159040306494, -0.03747553804549731, 0.01845889210918439, -0.1455055567279687, 0.1787222473700073, -0.08803114921815793, 0.6939214607586182, 0.06957225710897355, -0.03426840159593864, 0.2701268755947554, 0.01845889210918439, -0.009092082880433746, 0.07166998829123124, -0.08803114921815793, 0.04336048447637238, -0.3417968638859867, -0.5484159040306494, 0.2701268755947555, -2.129323969613816, -0.1455055567279687, 0.07166998829123125, -0.5649516496070676, 0.6939214607586182, -0.3417968638859867, 2.694275619220883 },
            { 0.06957225710897355, -0.14124670932451, -0.5484159040306494, 0.01845889210918439, -0.03747553804549731, -0.1455055567279687, -0.08803114921815793, 0.1787222473700073, 0.6939214607586182, -0.03426840159593864, 0.06957225710897355, 0.2701268755947554, -0.009092082880433746, 0.01845889210918439, 0.07166998829123124, 0.04336048447637238, -0.08803114921815793, -0.3417968638859867, 0.2701268755947555, -0.5484159040306494, -2.129323969613816, 0.07166998829123125, -0.1455055567279687, -0.5649516496070676, -0.3417968638859867, 0.6939214607586182, 2.694275619220883 },
            { 0.03707537740441567, -0.4969069448284669, -0.1602587888221346, 0.009836828929431562, -0.1318392138482171, -0.04251981774549606, -0.04691220633384723, 0.628746158676684, 0.2027786065676307, -0.01826178961285464, 0.2447557036207828, 0.07893681709986218, -0.004845212994258729, 0.06493851592549253, 0.02094349458874807, 0.02310700260711337, -0.3096942195462753, -0.09988031168861025, 0.1439518606398561, -1.92933111624657, -0.622233742442996, 0.03819326804800072, -0.5118896007916673, -0.1650908853001384, -0.1821451286878568, 2.441220717038237, 0.7873246277431344 },
            { -0.3066499736479457, 0.02287986437375382, -0.098898503795562, 0.05841775733230403, -0.004358684101230258, 0.0188404672810765, 0.2482322163156417, -0.01852118027252356, 0.08005803651448552, 0.1510430289747839, -0.01126967002942436, 0.04871329156383874, -0.02877415872050638, 0.002146906589171533, -0.009280030947275341, -0.1222688702542775, 0.009122763440252825, -0.0394332606165634, -1.190624003372309, 0.08883521297337221, -0.3839913342102201, 0.2268175120825934, -0.01692337961848304, 0.07315152293263721, 0.9638064912897155, -0.07191183335488918, 0.310839811277583 },
            { -0.08716581674496794, 0.04293425767365656, -0.3384370539984425, 0.01660535453404476, -0.008179107326132598, 0.06447329330423811, 0.07056046221092319, -0.03475515034752396, 0.2739637606942044, 0.04293425767365656, -0.02114763046827474, 0.1667000233038164, -0.008179107326132598, 0.004028688247230146, -0.03175686399970774, -0.03475515034752396, 0.0171189422210446, -0.1349431593041087, -0.3384370539984425, 0.1667000233038164, -1.314043093914531, 0.06447329330423811, -0.03175686399970774, 0.2503292260922172, 0.2739637606942044, -0.1349431593041087, 1.063713867822313 },
            { 0.04293425767365656, -0.08716581674496794, -0.3384370539984425, -0.008179107326132598, 0.01660535453404476, 0.06447329330423811, -0.03475515034752396, 0.07056046221092319, 0.2739637606942044, -0.02114763046827474, 0.04293425767365656, 0.1667000233038164, 0.004028688247230146, -0.008179107326132598, -0.03175686399970774, 0.0171189422210446, -0.03475515034752396, -0.1349431593041087, 0.1667000233038164, -0.3384370539984425, -1.314043093914531, -0.03175686399970774, 0.06447329330423811, 0.2503292260922172, -0.1349431593041087, 0.2739637606942044, 1.063713867822313 },
            { 0.02287986437375384, -0.3066499736479457, -0.09889850379556206, -0.004358684101230264, 0.05841775733230402, 0.0188404672810765, -0.01852118027252358, 0.2482322163156417, 0.08005803651448555, -0.01126967002942437, 0.1510430289747838, 0.04871329156383876, 0.002146906589171536, -0.02877415872050638, -0.009280030947275347, 0.009122763440252835, -0.1222688702542775, -0.03943326061656341, 0.08883521297337232, -1.190624003372309, -0.3839913342102203, -0.01692337961848306, 0.2268175120825934, 0.07315152293263724, -0.07191183335488927, 0.9638064912897154, 0.3108398112775831 },
            { -0.05841775733230405, 0.00435868410123026, -0.0188404672810765, 0.3066499736479457, -0.02287986437375382, 0.098898503795562, -0.2482322163156417, 0.01852118027252356, -0.08005803651448552, 0.0287741587205064, -0.002146906589171534, 0.009280030947275345, -0.1510430289747839, 0.01126967002942436, -0.04871329156383874, 0.1222688702542775, -0.009122763440252825, 0.0394332606165634, -0.2268175120825935, 0.01692337961848304, -0.07315152293263723, 1.190624003372309, -0.08883521297337221, 0.3839913342102201, -0.9638064912897155, 0.07191183335488918, -0.310839811277583 },
            { -0.01660535453404476, 0.0081791073261326, -0.06447329330423812, 0.08716581674496794, -0.04293425767365656, 0.3384370539984425, -0.07056046221092319, 0.03475515034752396, -0.2739637606942044, 0.008179107326132602, -0.004028688247230148, 0.03175686399970775, -0.04293425767365656, 0.02114763046827474, -0.1667000233038164, 0.03475515034752396, -0.0171189422210446, 0.1349431593041087, -0.06447329330423812, 0.03175686399970774, -0.2503292260922172, 0.3384370539984425, -0.1667000233038164, 1.314043093914531, -0.2739637606942044, 0.1349431593041087, -1.063713867822313 },
            { 0.0081791073261326, -0.01660535453404476, -0.06447329330423812, -0.04293425767365656, 0.08716581674496794, 0.3384370539984425, 0.03475515034752396, -0.07056046221092319, -0.2739637606942044, -0.004028688247230148, 0.008179107326132602, 0.03175686399970775, 0.02114763046827474, -0.04293425767365656, -0.1667000233038164, -0.0171189422210446, 0.03475515034752396, 0.1349431593041087, 0.03175686399970774, -0.06447329330423812, -0.2503292260922172, -0.1667000233038164, 0.3384370539984425, 1.314043093914531, 0.1349431593041087, -0.2739637606942044, -1.063713867822313 },
            { 0.004358684101230265, -0.05841775733230405, -0.01884046728107651, -0.02287986437375384, 0.3066499736479457, 0.09889850379556206, 0.01852118027252358, -0.2482322163156417, -0.08005803651448555, -0.002146906589171537, 0.02877415872050639, 0.00928003094727535, 0.01126967002942437, -0.1510430289747838, -0.04871329156383876, -0.009122763440252835, 0.1222688702542775, 0.03943326061656341, 0.01692337961848306, -0.2268175120825934, -0.07315152293263726, -0.08883521297337232, 1.190624003372309, 0.3839913342102203, 0.07191183335488927, -0.9638064912897154, -0.3108398112775831 },
            { 0.1318392138482172, -0.00983682892943155, 0.04251981774549605, 0.496906944828467, -0.03707537740441563, 0.1602587888221346, -0.6287461586766842, 0.04691220633384718, -0.2027786065676306, -0.06493851592549255, 0.004845212994258724, -0.02094349458874806, -0.2447557036207828, 0.01826178961285461, -0.07893681709986215, 0.3096942195462754, -0.02310700260711334, 0.09988031168861021, 0.5118896007916675, -0.03819326804800068, 0.1650908853001383, 1.92933111624657, -0.143951860639856, 0.6222337424429958, -2.441220717038237, 0.1821451286878566, -0.7873246277431341 },
            { 0.03747553804549731, -0.01845889210918439, 0.1455055567279687, 0.14124670932451, -0.06957225710897355, 0.5484159040306494, -0.1787222473700073, 0.08803114921815793, -0.6939214607586182, -0.01845889210918439, 0.009092082880433746, -0.07166998829123124, -0.06957225710897355, 0.03426840159593864, -0.2701268755947554, 0.08803114921815793, -0.04336048447637238, 0.3417968638859867, 0.1455055567279687, -0.07166998829123125, 0.5649516496070676, 0.5484159040306494, -0.2701268755947555, 2.129323969613816, -0.6939214607586182, 0.3417968638859867, -2.694275619220883 },
            { -0.01845889210918439, 0.03747553804549731, 0.1455055567279687, -0.06957225710897355, 0.14124670932451, 0.5484159040306494, 0.08803114921815793, -0.1787222473700073, -0.6939214607586182, 0.009092082880433746, -0.01845889210918439, -0.07166998829123124, 0.03426840159593864, -0.06957225710897355, -0.2701268755947554, -0.04336048447637238, 0.08803114921815793, 0.3417968638859867, -0.07166998829123125, 0.1455055567279687, 0.5649516496070676, -0.2701268755947555, 0.5484159040306494, 2.129323969613816, 0.3417968638859867, -0.6939214607586182, -2.694275619220883 },
            { -0.009836828929431562, 0.1318392138482171, 0.04251981774549606, -0.03707537740441567, 0.4969069448284669, 0.1602587888221346, 0.04691220633384723, -0.628746158676684, -0.2027786065676307, 0.004845212994258729, -0.06493851592549253, -0.02094349458874807, 0.01826178961285464, -0.2447557036207828, -0.07893681709986218, -0.02310700260711337, 0.3096942195462753, 0.09988031168861025, -0.03819326804800072, 0.5118896007916673, 0.1650908853001384, -0.1439518606398561, 1.92933111624657, 0.622233742442996, 0.1821451286878568, -2.441220717038237, -0.7873246277431344 },
            { 0.2447557036207828, -0.01826178961285461, 0.07893681709986215, 0.06493851592549255, -0.004845212994258724, 0.02094349458874806, -0.3096942195462754, 0.02310700260711334, -0.09988031168861021, -0.496906944828467, 0.03707537740441563, -0.1602587888221346, -0.1318392138482172, 0.00983682892943155, -0.04251981774549605, 0.6287461586766842, -0.04691220633384718, 0.2027786065676306, -1.92933111624657, 0.143951860639856, -0.6222337424429958, -0.5118896007916675, 0.03819326804800068, -0.1650908853001383, 2.441220717038237, -0.1821451286878566, 0.7873246277431341 },
            { 0.06957225710897355, -0.03426840159593864, 0.2701268755947554, 0.01845889210918439, -0.009092082880433746, 0.07166998829123124, -0.08803114921815793, 0.04336048447637238, -0.3417968638859867, -0.14124670932451, 0.06957225710897355, -0.5484159040306494, -0.03747553804549731, 0.01845889210918439, -0.1455055567279687, 0.1787222473700073, -0.08803114921815793, 0.6939214607586182, -0.5484159040306494, 0.2701268755947555, -2.129323969613816, -0.1455055567279687, 0.07166998829123125, -0.5649516496070676, 0.6939214607586182, -0.3417968638859867, 2.694275619220883 },
            { -0.03426840159593864, 0.06957225710897355, 0.2701268755947554, -0.009092082880433746, 0.01845889210918439, 0.07166998829123124, 0.04336048447637238, -0.08803114921815793, -0.3417968638859867, 0.06957225710897355, -0.14124670932451, -0.5484159040306494, 0.01845889210918439, -0.03747553804549731, -0.1455055567279687, -0.08803114921815793, 0.1787222473700073, 0.6939214607586182, 0.2701268755947555, -0.5484159040306494, -2.129323969613816, 0.07166998829123125, -0.1455055567279687, -0.5649516496070676, -0.3417968638859867, 0.6939214607586182, 2.694275619220883 },
            { -0.01826178961285464, 0.2447557036207828, 0.07893681709986218, -0.004845212994258729, 0.06493851592549253, 0.02094349458874807, 0.02310700260711337, -0.3096942195462753, -0.09988031168861025, 0.03707537740441567, -0.4969069448284669, -0.1602587888221346, 0.009836828929431562, -0.1318392138482171, -0.04251981774549606, -0.04691220633384723, 0.628746158676684, 0.2027786065676307, 0.1439518606398561, -1.92933111624657, -0.622233742442996, 0.03819326804800072, -0.5118896007916673, -0.1650908853001384, -0.1821451286878568, 2.441220717038237, 0.7873246277431344 },
            { 0.1510430289747839, -0.01126967002942436, 0.04871329156383874, -0.02877415872050638, 0.002146906589171533, -0.009280030947275341, -0.1222688702542775, 0.009122763440252825, -0.0394332606165634, -0.3066499736479457, 0.02287986437375382, -0.098898503795562, 0.05841775733230403, -0.004358684101230258, 0.0188404672810765, 0.2482322163156417, -0.01852118027252356, 0.08005803651448552, -1.190624003372309, 0.08883521297337221, -0.3839913342102201, 0.2268175120825934, -0.01692337961848304, 0.07315152293263721, 0.9638064912897155, -0.07191183335488918, 0.310839811277583 },
            { 0.04293425767365656, -0.02114763046827474, 0.1667000233038164, -0.008179107326132598, 0.004028688247230146, -0.03175686399970774, -0.03475515034752396, 0.0171189422210446, -0.1349431593041087, -0.08716581674496794, 0.04293425767365656, -0.3384370539984425, 0.01660535453404476, -0.008179107326132598, 0.06447329330423811, 0.07056046221092319, -0.03475515034752396, 0.2739637606942044, -0.3384370539984425, 0.1667000233038164, -1.314043093914531, 0.06447329330423811, -0.03175686399970774, 0.2503292260922172, 0.2739637606942044, -0.1349431593041087, 1.063713867822313 },
            { -0.02114763046827474, 0.04293425767365656, 0.1667000233038164, 0.004028688247230146, -0.008179107326132598, -0.03175686399970774, 0.0171189422210446, -0.03475515034752396, -0.1349431593041087, 0.04293425767365656, -0.08716581674496794, -0.3384370539984425, -0.008179107326132598, 0.01660535453404476, 0.06447329330423811, -0.03475515034752396, 0.07056046221092319, 0.2739637606942044, 0.1667000233038164, -0.3384370539984425, -1.314043093914531, -0.03175686399970774, 0.06447329330423811, 0.2503292260922172, -0.1349431593041087, 0.2739637606942044, 1.063713867822313 },
            { -0.01126967002942437, 0.1510430289747838, 0.04871329156383876, 0.002146906589171536, -0.02877415872050638, -0.009280030947275347, 0.009122763440252835, -0.1222688702542775, -0.03943326061656341, 0.02287986437375384, -0.3066499736479457, -0.09889850379556206, -0.004358684101230264, 0.05841775733230402, 0.0188404672810765, -0.01852118027252358, 0.2482322163156417, 0.08005803651448555, 0.08883521297337232, -1.190624003372309, -0.3839913342102203, -0.01692337961848306, 0.2268175120825934, 0.07315152293263724, -0.07191183335488927, 0.9638064912897154, 0.3108398112775831 },
            { 0.0287741587205064, -0.002146906589171534, 0.009280030947275345, -0.1510430289747839, 0.01126967002942436, -0.04871329156383874, 0.1222688702542775, -0.009122763440252825, 0.0394332606165634, -0.05841775733230405, 0.00435868410123026, -0.0188404672810765, 0.3066499736479457, -0.02287986437375382, 0.098898503795562, -0.2482322163156417, 0.01852118027252356, -0.08005803651448552, -0.2268175120825935, 0.01692337961848304, -0.07315152293263723, 1.190624003372309, -0.08883521297337221, 0.3839913342102201, -0.9638064912897155, 0.07191183335488918, -0.310839811277583 },
            { 0.008179107326132602, -0.004028688247230148, 0.03175686399970775, -0.04293425767365656, 0.02114763046827474, -0.1667000233038164, 0.03475515034752396, -0.0171189422210446, 0.1349431593041087, -0.01660535453404476, 0.0081791073261326, -0.06447329330423812, 0.08716581674496794, -0.04293425767365656, 0.3384370539984425, -0.07056046221092319, 0.03475515034752396, -0.2739637606942044, -0.06447329330423812, 0.03175686399970774, -0.2503292260922172, 0.3384370539984425, -0.1667000233038164, 1.314043093914531, -0.2739637606942044, 0.1349431593041087, -1.063713867822313 },
            { -0.004028688247230148, 0.008179107326132602, 0.03175686399970775, 0.02114763046827474, -0.04293425767365656, -0.1667000233038164, -0.0171189422210446, 0.03475515034752396, 0.1349431593041087, 0.0081791073261326, -0.01660535453404476, -0.06447329330423812, -0.04293425767365656, 0.08716581674496794, 0.3384370539984425, 0.03475515034752396, -0.07056046221092319, -0.2739637606942044, 0.03175686399970774, -0.06447329330423812, -0.2503292260922172, -0.1667000233038164, 0.3384370539984425, 1.314043093914531, 0.1349431593041087, -0.2739637606942044, -1.063713867822313 },
            { -0.002146906589171537, 0.02877415872050639, 0.00928003094727535, 0.01126967002942437, -0.1510430289747838, -0.04871329156383876, -0.009122763440252835, 0.1222688702542775, 0.03943326061656341, 0.004358684101230265, -0.05841775733230405, -0.01884046728107651, -0.02287986437375384, 0.3066499736479457, 0.09889850379556206, 0.01852118027252358, -0.2482322163156417, -0.08005803651448555, 0.01692337961848306, -0.2268175120825934, -0.07315152293263726, -0.08883521297337232, 1.190624003372309, 0.3839913342102203, 0.07191183335488927, -0.9638064912897154, -0.3108398112775831 },
            { -0.06493851592549255, 0.004845212994258724, -0.02094349458874806, -0.2447557036207828, 0.01826178961285461, -0.07893681709986215, 0.3096942195462754, -0.02310700260711334, 0.09988031168861021, 0.1318392138482172, -0.00983682892943155, 0.04251981774549605, 0.496906944828467, -0.03707537740441563, 0.1602587888221346, -0.6287461586766842, 0.04691220633384718, -0.2027786065676306, 0.5118896007916675, -0.03819326804800068, 0.1650908853001383, 1.92933111624657, -0.143951860639856, 0.6222337424429958, -2.441220717038237, 0.1821451286878566, -0.7873246277431341 },
            { -0.01845889210918439, 0.009092082880433746, -0.07166998829123124, -0.06957225710897355, 0.03426840159593864, -0.2701268755947554, 0.08803114921815793, -0.04336048447637238, 0.3417968638859867, 0.03747553804549731, -0.01845889210918439, 0.1455055567279687, 0.14124670932451, -0.06957225710897355, 0.5484159040306494, -0.1787222473700073, 0.08803114921815793, -0.6939214607586182, 0.1455055567279687, -0.07166998829123125, 0.5649516496070676, 0.5484159040306494, -0.2701268755947555, 2.129323969613816, -0.6939214607586182, 0.3417968638859867, -2.694275619220883 },
            { 0.009092082880433746, -0.01845889210918439, -0.07166998829123124, 0.03426840159593864, -0.06957225710897355, -0.2701268755947554, -0.04336048447637238, 0.08803114921815793, 0.3417968638859867, -0.01845889210918439, 0.03747553804549731, 0.1455055567279687, -0.06957225710897355, 0.14124670932451, 0.5484159040306494, 0.08803114921815793, -0.1787222473700073, -0.6939214607586182, -0.07166998829123125, 0.1455055567279687, 0.5649516496070676, -0.2701268755947555, 0.5484159040306494, 2.129323969613816, 0.3417968638859867, -0.6939214607586182, -2.694275619220883 },
            { 0.004845212994258729, -0.06493851592549253, -0.02094349458874807, 0.01826178961285464, -0.2447557036207828, -0.07893681709986218, -0.02310700260711337, 0.3096942195462753, 0.09988031168861025, -0.009836828929431562, 0.1318392138482171, 0.04251981774549606, -0.03707537740441567, 0.4969069448284669, 0.1602587888221346, 0.04691220633384723, -0.628746158676684, -0.2027786065676307, -0.03819326804800072, 0.5118896007916673, 0.1650908853001384, -0.1439518606398561, 1.92933111624657, 0.622233742442996, 0.1821451286878568, -2.441220717038237, -0.7873246277431344 },
            { 0.1304314458191324, -0.009731792098050161, 0.04206579471033494, 0.03460603530871726, -0.002582036401169901, 0.01116088507562621, -0.1650374811278496, 0.01231382849922006, -0.05322667978596114, -1.748122225286522, 0.1304314458191322, -0.5637915779868635, -0.4638113077126143, 0.03460603530871721, -0.149585026310495, 2.211933532999137, -0.1650374811278494, 0.7133766042973585, -0.563791577986864, 0.04206579471033491, -0.1818299308887395, -0.1495850263104951, 0.0111608850756262, -0.0482430672220175, 0.7133766042973589, -0.05322667978596111, 0.230072998110757 },
            { 0.03707537740441567, -0.01826178961285464, 0.1439518606398561, 0.009836828929431562, -0.00484521299425873, 0.03819326804800073, -0.04691220633384723, 0.02310700260711336, -0.1821451286878568, -0.4969069448284669, 0.2447557036207827, -1.929331116246569, -0.1318392138482171, 0.06493851592549253, -0.5118896007916673, 0.628746158676684, -0.3096942195462753, 2.441220717038237, -0.1602587888221347, 0.07893681709986219, -0.622233742442996, -0.04251981774549606, 0.02094349458874807, -0.1650908853001384, 0.2027786065676307, -0.09988031168861025, 0.7873246277431344 },
            { -0.01826178961285464, 0.03707537740441567, 0.1439518606398561, -0.00484521299425873, 0.009836828929431562, 0.03819326804800073, 0.02310700260711336, -0.04691220633384723, -0.1821451286878568, 0.2447557036207827, -0.4969069448284669, -1.929331116246569, 0.06493851592549253, -0.1318392138482171, -0.5118896007916673, -0.3096942195462753, 0.628746158676684, 2.441220717038237, 0.07893681709986219, -0.1602587888221347, -0.622233742442996, 0.02094349458874807, -0.04251981774549606, -0.1650908853001384, -0.09988031168861025, 0.2027786065676307, 0.7873246277431344 },
            { -0.009731792098050172, 0.1304314458191324, 0.04206579471033496, -0.002582036401169904, 0.03460603530871725, 0.01116088507562621, 0.01231382849922008, -0.1650374811278496, -0.05322667978596116, 0.1304314458191324, -1.748122225286522, -0.5637915779868637, 0.03460603530871725, -0.4638113077126141, -0.1495850263104951, -0.1650374811278496, 2.211933532999136, 0.7133766042973588, 0.04206579471033496, -0.5637915779868639, -0.1818299308887396, 0.01116088507562621, -0.1495850263104951, -0.04824306722201752, -0.05322667978596117, 0.7133766042973588, 0.2300729981107571 },
            { 0.08049152832248574, -0.006005659251642251, 0.02595953824685832, -0.01533388218792938, 0.001144096445238008, -0.004945371387850415, -0.06515764613455637, 0.004861562806404244, -0.02101416685900791, -1.078796824831156, 0.08049152832248564, -0.3479256515368008, 0.2055140927427526, -0.01533388218792936, 0.06628090013956783, 0.8732827320884029, -0.06515764613455627, 0.2816447513972329, -0.3479256515368009, 0.0259595382468583, -0.112210433152001, 0.06628090013956787, -0.004945371387850411, 0.02137643051472094, 0.2816447513972331, -0.02101416685900789, 0.0908340026372801 },
            { 0.02287986437375385, -0.01126967002942437, 0.08883521297337232, -0.004358684101230264, 0.002146906589171536, -0.01692337961848306, -0.01852118027252358, 0.009122763440252837, -0.07191183335488928, -0.3066499736479457, 0.1510430289747839, -1.190624003372309, 0.05841775733230403, -0.02877415872050638, 0.2268175120825934, 0.2482322163156416, -0.1222688702542775, 0.9638064912897153, -0.09889850379556206, 0.04871329156383876, -0.3839913342102203, 0.0188404672810765, -0.009280030947275347, 0.07315152293263724, 0.08005803651448555, -0.03943326061656342, 0.3108398112775831 },
            { -0.01126967002942437, 0.02287986437375385, 0.08883521297337232, 0.002146906589171536, -0.004358684101230264, -0.01692337961848306, 0.009122763440252837, -0.01852118027252358, -0.07191183335488928, 0.1510430289747839, -0.3066499736479457, -1.190624003372309, -0.02877415872050638, 0.05841775733230403, 0.2268175120825934, -0.1222688702542775, 0.2482322163156416, 0.9638064912897153, 0.04871329156383876, -0.09889850379556206, -0.3839913342102203, -0.009280030947275347, 0.0188404672810765, 0.07315152293263724, -0.03943326061656342, 0.08005803651448555, 0.3108398112775831 },
            { -0.006005659251642258, 0.08049152832248573, 0.02595953824685833, 0.00114409644523801, -0.01533388218792938, -0.004945371387850417, 0.004861562806404249, -0.06515764613455635, -0.02101416685900791, 0.08049152832248573, -1.078796824831155, -0.3479256515368009, -0.01533388218792938, 0.2055140927427525, 0.06628090013956786, -0.06515764613455634, 0.8732827320884028, 0.281644751397233, 0.02595953824685833, -0.3479256515368009, -0.1122104331520011, -0.004945371387850417, 0.06628090013956786, 0.02137643051472095, -0.02101416685900791, 0.281644751397233, 0.09083400263728013 },
            { 0.01533388218792938, -0.001144096445238009, 0.004945371387850416, -0.08049152832248574, 0.006005659251642251, -0.02595953824685832, 0.06515764613455637, -0.004861562806404244, 0.02101416685900791, -0.2055140927427526, 0.01533388218792936, -0.06628090013956785, 1.078796824831156, -0.08049152832248564, 0.3479256515368008, -0.8732827320884029, 0.06515764613455627, -0.2816447513972329, -0.06628090013956789, 0.004945371387850413, -0.02137643051472095, 0.3479256515368009, -0.0259595382468583, 0.112210433152001, -0.2816447513972331, 0.02101416685900789, -0.0908340026372801 },
            { 0.004358684101230265, -0.002146906589171537, 0.01692337961848306, -0.02287986437375385, 0.01126967002942437, -0.08883521297337232, 0.01852118027252358, -0.009122763440252837, 0.07191183335488928, -0.05841775733230404, 0.02877415872050639, -0.2268175120825934, 0.3066499736479457, -0.1510430289747839, 1.190624003372309, -0.2482322163156416, 0.1222688702542775, -0.9638064912897153, -0.01884046728107651, 0.00928003094727535, -0.07315152293263727, 0.09889850379556206, -0.04871329156383876, 0.3839913342102203, -0.08005803651448555, 0.03943326061656342, -0.3108398112775831 },
            { -0.002146906589171537, 0.004358684101230265, 0.01692337961848306, 0.01126967002942437, -0.02287986437375385, -0.08883521297337232, -0.009122763440252837, 0.01852118027252358, 0.07191183335488928, 0.02877415872050639, -0.05841775733230404, -0.2268175120825934, -0.1510430289747839, 0.3066499736479457, 1.190624003372309, 0.1222688702542775, -0.2482322163156416, -0.9638064912897153, 0.00928003094727535, -0.01884046728107651, -0.07315152293263727, -0.04871329156383876, 0.09889850379556206, 0.3839913342102203, 0.03943326061656342, -0.08005803651448555, -0.3108398112775831 },
            { -0.00114409644523801, 0.01533388218792938, 0.004945371387850419, 0.006005659251642258, -0.08049152832248573, -0.02595953824685833, -0.004861562806404249, 0.06515764613455635, 0.02101416685900791, 0.01533388218792938, -0.2055140927427526, -0.06628090013956787, -0.08049152832248573, 1.078796824831155, 0.3479256515368009, 0.06515764613455634, -0.8732827320884028, -0.281644751397233, 0.004945371387850419, -0.06628090013956787, -0.02137643051472096, -0.02595953824685833, 0.3479256515368009, 0.1122104331520011, 0.02101416685900791, -0.281644751397233, -0.09083400263728013 },
            { -0.03460603530871726, 0.002582036401169901, -0.01116088507562621, -0.1304314458191324, 0.009731792098050161, -0.04206579471033494, 0.1650374811278496, -0.01231382849922006, 0.05322667978596114, 0.4638113077126143, -0.03460603530871721, 0.149585026310495, 1.748122225286522, -0.1304314458191322, 0.5637915779868635, -2.211933532999137, 0.1650374811278494, -0.7133766042973585, 0.1495850263104951, -0.0111608850756262, 0.0482430672220175, 0.563791577986864, -0.04206579471033491, 0.1818299308887395, -0.7133766042973589, 0.05322667978596111, -0.230072998110757 },
            { -0.009836828929431562, 0.00484521299425873, -0.03819326804800073, -0.03707537740441567, 0.01826178961285464, -0.1439518606398561, 0.04691220633384723, -0.02310700260711336, 0.1821451286878568, 0.1318392138482171, -0.06493851592549253, 0.5118896007916673, 0.4969069448284669, -0.2447557036207827, 1.929331116246569, -0.628746158676684, 0.3096942195462753, -2.441220717038237, 0.04251981774549606, -0.02094349458874807, 0.1650908853001384, 0.1602587888221347, -0.07893681709986219, 0.622233742442996, -0.2027786065676307, 0.09988031168861025, -0.7873246277431344 },
            { 0.00484521299425873, -0.009836828929431562, -0.03819326804800073, 0.01826178961285464, -0.03707537740441567, -0.1439518606398561, -0.02310700260711336, 0.04691220633384723, 0.1821451286878568, -0.06493851592549253, 0.1318392138482171, 0.5118896007916673, -0.2447557036207827, 0.4969069448284669, 1.929331116246569, 0.3096942195462753, -0.628746158676684, -2.441220717038237, -0.02094349458874807, 0.04251981774549606, 0.1650908853001384, -0.07893681709986219, 0.1602587888221347, 0.622233742442996, 0.09988031168861025, -0.2027786065676307, -0.7873246277431344 },
            { 0.002582036401169904, -0.03460603530871725, -0.01116088507562621, 0.009731792098050172, -0.1304314458191324, -0.04206579471033496, -0.01231382849922008, 0.1650374811278496, 0.05322667978596116, -0.03460603530871725, 0.4638113077126141, 0.1495850263104951, -0.1304314458191324, 1.748122225286522, 0.5637915779868637, 0.1650374811278496, -2.211933532999136, -0.7133766042973588, -0.01116088507562621, 0.1495850263104951, 0.04824306722201752, -0.04206579471033496, 0.5637915779868639, 0.1818299308887396, 0.05322667978596117, -0.7133766042973588, -0.2300729981107571 } } };
    alignas(32) static const double FE35_C0_D100_Q64[1][64][27] =
        { { { -1.748122225286523, 0.1304314458191322, -0.5637915779868636, 0.1304314458191322, -0.009731792098050149, 0.04206579471033489, -0.5637915779868636, 0.04206579471033489, -0.1818299308887394, -0.4638113077126143, 0.03460603530871722, -0.149585026310495, 0.03460603530871721, -0.002582036401169897, 0.01116088507562619, -0.149585026310495, 0.01116088507562619, -0.04824306722201748, 2.211933532999137, -0.1650374811278494, 0.7133766042973586, -0.1650374811278494, 0.01231382849922005, -0.05322667978596109, 0.7133766042973587, -0.05322667978596109, 0.2300729981107569 },
            { -0.4969069448284669, 0.2447557036207828, -1.92933111624657, 0.03707537740441563, -0.01826178961285461, 0.1439518606398559, -0.1602587888221346, 0.07893681709986215, -0.6222337424429958, -0.1318392138482172, 0.06493851592549255, -0.5118896007916675, 0.00983682892943155, -0.004845212994258724, 0.03819326804800068, -0.04251981774549605, 0.02094349458874807, -0.1650908853001383, 0.628746158676684, -0.3096942195462754, 2.441220717038237, -0.04691220633384718, 0.02310700260711334, -0.1821451286878566, 0.2027786065676306, -0.09988031168861022, 0.7873246277431341 },
            { 0.2447557036207828, -0.4969069448284669, -1.92933111624657, -0.01826178961285461, 0.03707537740441563, 0.1439518606398559, 0.07893681709986215, -0.1602587888221346, -0.6222337424429958, 0.06493851592549255, -0.1318392138482172, -0.5118896007916675, -0.004845212994258724, 0.00983682892943155, 0.03819326804800068, 0.02094349458874807, -0.04251981774549605, -0.1650908853001383, -0.3096942195462754, 0.628746158676684, 2.441220717038237, 0.02310700260711334, -0.04691220633384718, -0.1821451286878566, -0.09988031168861022, 0.2027786065676306, 0.7873246277431341 },
            { 0.1304314458191324, -1.748122225286523, -0.5637915779868639, -0.009731792098050161, 0.1304314458191322, 0.04206579471033491, 0.04206579471033494, -0.5637915779868635, -0.1818299308887395, 0.03460603530871726, -0.4638113077126143, -0.1495850263104951, -0.0025820364011699, 0.03460603530871721, 0.0111608850756262, 0.01116088507562621, -0.149585026310495, -0.0482430672220175, -0.1650374811278496, 2.211933532999137, 0.7133766042973589, 0.01231382849922006, -0.1650374811278494, -0.05322667978596111, -0.05322667978596115, 0.7133766042973586, 0.230072998110757 },
            { -0.496906944828467, 0.03707537740441563, -0.1602587888221346, 0.2447557036207828, -0.01826178961285461, 0.07893681709986215, -1.92933111624657, 0.143951860639856, -0.6222337424429958, -0.1318392138482172, 0.00983682892943155, -0.04251981774549605, 0.06493851592549255, -0.004845212994258724, 0.02094349458874806, -0.5118896007916675, 0.03819326804800068, -0.1650908853001383, 0.6287461586766842, -0.04691220633384718, 0.2027786065676306, -0.3096942195462754, 0.02310700260711334, -0.09988031168861021, 2.441220717038237, -0.1821451286878566, 0.7873246277431341 },
            { -0.14124670932451, 0.06957225710897355, -0.5484159040306494, 0.06957225710897355, -0.03426840159593864, 0.2701268755947554, -0.5484159040306494, 0.2701268755947555, -2.129323969613816, -0.03747553804549731, 0.01845889210918439, -0.1455055567279687, 0.01845889210918439, -0.009092082880433746, 0.07166998829123124, -0.1455055567279687, 0.07166998829123125, -0.5649516496070676, 0.1787222473700073, -0.08803114921815793, 0.6939214607586182, -0.08803114921815793, 0.04336048447637238, -0.3417968638859867, 0.6939214607586182, -0.3417968638859867, 2.694275619220883 },
            { 0.06957225710897355, -0.14124670932451, -0.5484159040306494, -0.03426840159593864, 0.06957225710897355, 0.2701268755947554, 0.2701268755947555, -0.5484159040306494, -2.129323969613816, 0.01845889210918439, -0.03747553804549731, -0.1455055567279687, -0.009092082880433746, 0.01845889210918439, 0.07166998829123124, 0.07166998829123125, -0.1455055567279687, -0.5649516496070676, -0.08803114921815793, 0.1787222473700073, 0.6939214607586182, 0.04336048447637238, -0.08803114921815793, -0.3417968638859867, -0.3417968638859867, 0.6939214607586182, 2.694275619220883 },
            { 0.03707537740441567, -0.4969069448284669, -0.1602587888221346, -0.01826178961285464, 0.2447557036207828, 0.07893681709986218, 0.1439518606398561, -1.92933111624657, -0.622233742442996, 0.009836828929431562, -0.1318392138482171, -0.04251981774549606, -0.004845212994258729, 0.06493851592549253, 0.02094349458874807, 0.03819326804800072, -0.5118896007916673, -0.1650908853001384, -0.04691220633384723, 0.628746158676684, 0.2027786065676307, 0.02310700260711337, -0.3096942195462753, -0.09988031168861025, -0.1821451286878568, 2.441220717038237, 0.7873246277431344 },
            { 0.2447557036207828, -0.01826178961285461, 0.07893681709986215, -0.496906944828467, 0.03707537740441563, -0.1602587888221346, -1.92933111624657, 0.143951860639856, -0.6222337424429958, 0.06493851592549255, -0.004845212994258724, 0.02094349458874806, -0.1318392138482172, 0.00983682892943155, -0.04251981774549605, -0.5118896007916675, 0.03819326804800068, -0.1650908853001383, -0.3096942195462754, 0.02310700260711334, -0.09988031168861021, 0.6287461586766842, -0.04691220633384718, 0.2027786065676306, 2.441220717038237, -0.1821451286878566, 0.7873246277431341 },
            { 0.06957225710897355, -0.03426840159593864, 0.2701268755947554, -0.14124670932451, 0.06957225710897355, -0.5484159040306494, -0.5484159040306494, 0.2701268755947555, -2.129323969613816, 0.01845889210918439, -0.009092082880433746, 0.07166998829123124, -0.03747553804549731, 0.01845889210918439, -0.1455055567279687, -0.1455055567279687, 0.07166998829123125, -0.5649516496070676, -0.08803114921815793, 0.04336048447637238, -0.3417968638859867, 0.1787222473700073, -0.08803114921815793, 0.6939214607586182, 0.6939214607586182, -0.3417968638859867, 2.694275619220883 },
            { -0.03426840159593864, 0.06957225710897355, 0.2701268755947554, 0.06957225710897355, -0.14124670932451, -0.5484159040306494, 0.2701268755947555, -0.5484159040306494, -2.129323969613816, -0.009092082880433746, 0.01845889210918439, 0.07166998829123124, 0.01845889210918439, -0.03747553804549731, -0.1455055567279687, 0.07166998829123125, -0.1455055567279687, -0.5649516496070676, 0.04336048447637238, -0.08803114921815793, -0.3417968638859867, -0.08803114921815793, 0.1787222473700073, 0.6939214607586182, -0.3417968638859867, 0.6939214607586182, 2.694275619220883 },
            { -0.01826178961285464, 0.2447557036207828, 0.07893681709986218, 0.03707537740441567, -0.4969069448284669, -0.1602587888221346, 0.1439518606398561, -1.92933111624657, -0.622233742442996, -0.004845212994258729, 0.06493851592549253, 0.02094349458874807, 0.009836828929431562, -0.1318392138482171, -0.04251981774549606, 0.03819326804800072, -0.5118896007916673, -0.1650908853001384, 0.02310700260711337, -0.3096942195462753, -0.09988031168861025, -0.04691220633384723, 0.628746158676684, 0.2027786065676307, -0.1821451286878568, 2.441220717038237, 0.7873246277431344 },
            { 0.1304314458191324, -0.009731792098050161, 0.04206579471033494, -1.748122225286522, 0.1304314458191322, -0.5637915779868635, -0.563791577986864, 0.04206579471033491, -0.1818299308887395, 0.03460603530871726, -0.002582036401169901, 0.01116088507562621, -0.4638113077126143, 0.03460603530871721, -0.149585026310495, -0.1495850263104951, 0.0111608850756262, -0.0482430672220175, -0.1650374811278496, 0.01231382849922006, -0.05322667978596114, 2.211933532999137, -0.1650374811278494, 0.7133766042973585, 0.7133766042973589, -0.05322667978596111, 0.230072998110757 },
            { 0.03707537740441567, -0.01826178961285464, 0.1439518606398561, -0.4969069448284669, 0.2447557036207827, -1.929331116246569, -0.1602587888221347, 0.07893681709986219, -0.622233742442996, 0.009836828929431562, -0.00484521299425873, 0.03819326804800073, -0.1318392138482171, 0.06493851592549253, -0.5118896007916673, -0.04251981774549606, 0.02094349458874807, -0.1650908853001384, -0.04691220633384723, 0.02310700260711336, -0.1821451286878568, 0.628746158676684, -0.3096942195462753, 2.441220717038237, 0.2027786065676307, -0.09988031168861025, 0.7873246277431344 },
            { -0.01826178961285464, 0.03707537740441567, 0.1439518606398561, 0.2447557036207827, -0.4969069448284669, -1.929331116246569, 0.07893681709986219, -0.1602587888221347, -0.622233742442996, -0.00484521299425873, 0.009836828929431562, 0.03819326804800073, 0.06493851592549253, -0.1318392138482171, -0.5118896007916673, 0.02094349458874807, -0.04251981774549606, -0.1650908853001384, 0.02310700260711336, -0.04691220633384723, -0.1821451286878568, -0.3096942195462753, 0.628746158676684, 2.441220717038237, -0.09988031168861025, 0.2027786065676307, 0.7873246277431344 },
            { -0.009731792098050172, 0.1304314458191324, 0.04206579471033496, 0.1304314458191324, -1.748122225286522, -0.5637915779868637, 0.04206579471033496, -0.5637915779868639, -0.1818299308887396, -0.002582036401169904, 0.03460603530871725, 0.01116088507562621, 0.03460603530871725, -0.4638113077126141, -0.1495850263104951, 0.01116088507562621, -0.1495850263104951, -0.04824306722201752, 0.01231382849922008, -0.1650374811278496, -0.05322667978596116, -0.1650374811278496, 2.211933532999136, 0.7133766042973588, -0.05322667978596117, 0.7133766042973588, 0.2300729981107571 },
            { -1.078796824831156, 0.08049152832248564, -0.3479256515368008, 0.08049152832248564, -0.006005659251642244, 0.02595953824685829, -0.3479256515368008, 0.02595953824685829, -0.112210433152001, 0.2055140927427526, -0.01533388218792936, 0.06628090013956783, -0.01533388218792936, 0.001144096445238007, -0.004945371387850409, 0.06628090013956783, -0.004945371387850409, 0.02137643051472093, 0.8732827320884031, -0.06515764613455628, 0.2816447513972329, -0.06515764613455628, 0.004861562806404237, -0.02101416685900788, 0.2816447513972329, -0.02101416685900788, 0.09083400263728005 },
            { -0.3066499736479457, 0.1510430289747839, -1.190624003372309, 0.02287986437375382, -0.01126967002942436, 0.08883521297337221, -0.09889850379556202, 0.04871329156383874, -0.3839913342102202, 0.05841775733230403, -0.02877415872050638, 0.2268175120825934, -0.004358684101230258, 0.002146906589171533, -0.01692337961848303, 0.0188404672810765, -0.009280030947275341, 0.0731515229326372, 0.2482322163156417, -0.1222688702542775, 0.9638064912897155, -0.01852118027252356, 0.009122763440252825, -0.07191183335488918, 0.08005803651448552, -0.0394332606165634, 0.310839811277583 },
            { 0.1510430289747839, -0.3066499736479457, -1.190624003372309, -0.01126967002942436, 0.02287986437375382, 0.08883521297337221, 0.04871329156383874, -0.09889850379556202, -0.3839913342102202, -0.02877415872050638, 0.05841775733230403, 0.2268175120825934, 0.002146906589171533, -0.004358684101230258, -0.01692337961848303, -0.009280030947275341, 0.0188404672810765, 0.0731515229326372, -0.1222688702542775, 0.2482322163156417, 0.9638064912897155, 0.009122763440252825, -0.01852118027252356, -0.07191183335488918, -0.0394332606165634, 0.08005803651448552, 0.310839811277583 },
            { 0.08049152832248573, -1.078796824831155, -0.3479256515368009, -0.006005659251642251, 0.08049152832248563, 0.0259595382468583, 0.02595953824685832, -0.3479256515368007, -0.112210433152001, -0.01533388218792938, 0.2055140927427525, 0.06628090013956786, 0.001144096445238008, -0.01533388218792936, -0.00494537138785041, -0.004945371387850415, 0.06628090013956782, 0.02137643051472094, -0.06515764613455635, 0.873282732088403, 0.2816447513972331, 0.004861562806404244, -0.06515764613455627, -0.02101416685900789, -0.0210141668590079, 0.2816447513972329, 0.09083400263728009 },
            { -0.3066499736479457, 0.02287986437375382, -0.098898503795562, 0.1510430289747839, -0.01126967002942436, 0.04871329156383874, -1.190624003372309, 0.08883521297337221, -0.3839913342102201, 0.05841775733230403, -0.004358684101230258, 0.0188404672810765, -0.02877415872050638, 0.002146906589171533, -0.009280030947275341, 0.2268175120825934, -0.01692337961848304, 0.07315152293263721, 0.2482322163156417, -0.01852118027252356, 0.08005803651448552, -0.1222688702542775, 0.009122763440252825, -0.0394332606165634, 0.9638064912897155, -0.07191183335488918, 0.310839811277583 },
            { -0.08716581674496794, 0.04293425767365656, -0.3384370539984425, 0.04293425767365656, -0.02114763046827474, 0.1667000233038164, -0.3384370539984425, 0.1667000233038164, -1.314043093914531, 0.01660535453404476, -0.008179107326132598, 0.06447329330423811, -0.008179107326132598, 0.004028688247230146, -0.03175686399970774, 0.06447329330423811, -0.03175686399970774, 0.2503292260922172, 0.07056046221092319, -0.03475515034752396, 0.2739637606942044, -0.03475515034752396, 0.0171189422210446, -0.1349431593041087, 0.2739637606942044, -0.1349431593041087, 1.063713867822313 },
            { 0.04293425767365656, -0.08716581674496794, -0.3384370539984425, -0.02114763046827474, 0.04293425767365656, 0.1667000233038164, 0.1667000233038164, -0.3384370539984425, -1.314043093914531, -0.008179107326132598, 0.01660535453404476, 0.06447329330423811, 0.004028688247230146, -0.008179107326132598, -0.03175686399970774, -0.03175686399970774, 0.06447329330423811, 0.2503292260922172, -0.03475515034752396, 0.07056046221092319, 0.2739637606942044, 0.0171189422210446, -0.03475515034752396, -0.1349431593041087, -0.1349431593041087, 0.2739637606942044, 1.063713867822313 },
            { 0.02287986437375384, -0.3066499736479457, -0.09889850379556206, -0.01126967002942437, 0.1510430289747838, 0.04871329156383876, 0.08883521297337232, -1.190624003372309, -0.3839913342102203, -0.004358684101230264, 0.05841775733230402, 0.0188404672810765, 0.002146906589171536, -0.02877415872050638, -0.009280030947275347, -0.01692337961848306, 0.2268175120825934, 0.07315152293263724, -0.01852118027252358, 0.2482322163156417, 0.08005803651448555, 0.009122763440252835, -0.1222688702542775, -0.03943326061656341, -0.07191183335488927, 0.9638064912897154, 0.3108398112775831 },
            { 0.1510430289747839, -0.01126967002942436, 0.04871329156383874, -0.3066499736479457, 0.02287986437375382, -0.098898503795562, -1.190624003372309, 0.08883521297337221, -0.3839913342102201, -0.02877415872050638, 0.002146906589171533, -0.009280030947275341, 0.05841775733230403, -0.004358684101230258, 0.0188404672810765, 0.2268175120825934, -0.01692337961848304, 0.07315152293263721, -0.1222688702542775, 0.009122763440252825, -0.0394332606165634, 0.2482322163156417, -0.01852118027252356, 0.08005803651448552, 0.9638064912897155, -0.07191183335488918, 0.310839811277583 },
            { 0.04293425767365656, -0.02114763046827474, 0.1667000233038164, -0.08716581674496794, 0.04293425767365656, -0.3384370539984425, -0.3384370539984425, 0.1667000233038164, -1.314043093914531, -0.008179107326132598, 0.004028688247230146, -0.03175686399970774, 0.01660535453404476, -0.008179107326132598, 0.06447329330423811, 0.06447329330423811, -0.03175686399970774, 0.2503292260922172, -0.03475515034752396, 0.0171189422210446, -0.1349431593041087, 0.07056046221092319, -0.03475515034752396, 0.2739637606942044, 0.2739637606942044, -0.1349431593041087, 1.063713867822313 },
            { -0.02114763046827474, 0.04293425767365656, 0.1667000233038164, 0.04293425767365656, -0.08716581674496794, -0.3384370539984425, 0.1667000233038164, -0.3384370539984425, -1.314043093914531, 0.004028688247230146, -0.008179107326132598, -0.03175686399970774, -0.008179107326132598, 0.01660535453404476, 0.06447329330423811, -0.03175686399970774, 0.06447329330423811, 0.2503292260922172, 0.0171189422210446, -0.03475515034752396, -0.1349431593041087, -0.03475515034752396, 0.07056046221092319, 0.2739637606942044, -0.1349431593041087, 0.2739637606942044, 1.063713867822313 },
            { -0.01126967002942437, 0.1510430289747838, 0.04871329156383876, 0.02287986437375384, -0.3066499736479457, -0.09889850379556206, 0.08883521297337232, -1.190624003372309, -0.3839913342102203, 0.002146906589171536, -0.02877415872050638, -0.009280030947275347, -0.004358684101230264, 0.05841775733230402, 0.0188404672810765, -0.01692337961848306, 0.2268175120825934, 0.07315152293263724, 0.009122763440252835, -0.1222688702542775, -0.03943326061656341, -0.01852118027252358, 0.2482322163156417, 0.08005803651448555, -0.07191183335488927, 0.9638064912897154, 0.3108398112775831 },
            { 0.08049152832248574, -0.006005659251642251, 0.02595953824685832, -1.078796824831156, 0.08049152832248564, -0.3479256515368008, -0.3479256515368009, 0.0259595382468583, -0.112210433152001, -0.01533388218792938, 0.001144096445238008, -0.004945371387850415, 0.2055140927427526, -0.01533388218792936, 0.06628090013956783, 0.06628090013956787, -0.004945371387850411, 0.02137643051472094, -0.06515764613455637, 0.004861562806404244, -0.02101416685900791, 0.8732827320884029, -0.06515764613455627, 0.2816447513972329, 0.2816447513972331, -0.02101416685900789, 0.0908340026372801 },
            { 0.02287986437375385, -0.01126967002942437, 0.08883521297337232, -0.3066499736479457, 0.1510430289747839, -1.190624003372309, -0.09889850379556206, 0.04871329156383876, -0.3839913342102203, -0.004358684101230264, 0.002146906589171536, -0.01692337961848306, 0.05841775733230403, -0.02877415872050638, 0.2268175120825934, 0.0188404672810765, -0.009280030947275347, 0.07315152293263724, -0.01852118027252358, 0.009122763440252837, -0.07191183335488928, 0.2482322163156416, -0.1222688702542775, 0.9638064912897153, 0.08005803651448555, -0.03943326061656342, 0.3108398112775831 },
            { -0.01126967002942437, 0.02287986437375385, 0.08883521297337232, 0.1510430289747839, -0.3066499736479457, -1.190624003372309, 0.04871329156383876, -0.09889850379556206, -0.3839913342102203, 0.002146906589171536, -0.004358684101230264, -0.01692337961848306, -0.02877415872050638, 0.05841775733230403, 0.2268175120825934, -0.009280030947275347, 0.0188404672810765, 0.07315152293263724, 0.009122763440252837, -0.01852118027252358, -0.07191183335488928, -0.1222688702542775, 0.2482322163156416, 0.9638064912897153, -0.03943326061656342, 0.08005803651448555, 0.3108398112775831 },
            { -0.006005659251642258, 0.08049152832248573, 0.02595953824685833, 0.08049152832248573, -1.078796824831155, -0.3479256515368009, 0.02595953824685833, -0.3479256515368009, -0.1122104331520011, 0.00114409644523801, -0.01533388218792938, -0.004945371387850417, -0.01533388218792938, 0.2055140927427525, 0.06628090013956786, -0.004945371387850417, 0.06628090013956786, 0.02137643051472095, 0.004861562806404249, -0.06515764613455635, -0.02101416685900791, -0.06515764613455634, 0.8732827320884028, 0.281644751397233, -0.02101416685900791, 0.281644751397233, 0.09083400263728013 },
            { -0.2055140927427526, 0.01533388218792937, -0.06628090013956786, 0.01533388218792936, -0.001144096445238007, 0.00494537138785041, -0.06628090013956786, 0.00494537138785041, -0.02137643051472094, 1.078796824831156, -0.08049152832248564, 0.3479256515368008, -0.08049152832248564, 0.006005659251642244, -0.02595953824685829, 0.3479256515368008, -0.02595953824685829, 0.112210433152001, -0.8732827320884031, 0.06515764613455628, -0.2816447513972329, 0.06515764613455628, -0.004861562806404237, 0.02101416685900788, -0.2816447513972329, 0.02101416685900788, -0.09083400263728005 },
            { -0.05841775733230405, 0.02877415872050639, -0.2268175120825935, 0.00435868410123026, -0.002146906589171534, 0.01692337961848304, -0.0188404672810765, 0.009280030947275345, -0.07315152293263723, 0.3066499736479457, -0.1510430289747839, 1.190624003372309, -0.02287986437375382, 0.01126967002942436, -0.08883521297337221, 0.09889850379556202, -0.04871329156383874, 0.3839913342102202, -0.2482322163156417, 0.1222688702542775, -0.9638064912897155, 0.01852118027252356, -0.009122763440252825, 0.07191183335488918, -0.08005803651448552, 0.0394332606165634, -0.310839811277583 },
            { 0.02877415872050639, -0.05841775733230405, -0.2268175120825935, -0.002146906589171534, 0.00435868410123026, 0.01692337961848304, 0.009280030947275345, -0.0188404672810765, -0.07315152293263723, -0.1510430289747839, 0.3066499736479457, 1.190624003372309, 0.01126967002942436, -0.02287986437375382, -0.08883521297337221, -0.04871329156383874, 0.09889850379556202, 0.3839913342102202, 0.1222688702542775, -0.2482322163156417, -0.9638064912897155, -0.009122763440252825, 0.01852118027252356, 0.07191183335488918, 0.0394332606165634, -0.08005803651448552, -0.310839811277583 },
            { 0.01533388218792938, -0.2055140927427526, -0.06628090013956789, -0.001144096445238009, 0.01533388218792936, 0.004945371387850412, 0.004945371387850416, -0.06628090013956785, -0.02137643051472095, -0.08049152832248573, 1.078796824831155, 0.3479256515368009, 0.006005659251642251, -0.08049152832248563, -0.0259595382468583, -0.02595953824685832, 0.3479256515368007, 0.112210433152001, 0.06515764613455635, -0.873282732088403, -0.2816447513972331, -0.004861562806404244, 0.06515764613455627, 0.02101416685900789, 0.0210141668590079, -0.2816447513972329, -0.09083400263728009 },
            { -0.05841775733230405, 0.00435868410123026, -0.0188404672810765, 0.0287741587205064, -0.002146906589171534, 0.009280030947275345, -0.2268175120825935, 0.01692337961848304, -0.07315152293263723, 0.3066499736479457, -0.02287986437375382, 0.098898503795562, -0.1510430289747839, 0.01126967002942436, -0.04871329156383874, 1.190624003372309, -0.08883521297337221, 0.3839913342102201, -0.2482322163156417, 0.01852118027252356, -0.08005803651448552, 0.1222688702542775, -0.009122763440252825, 0.0394332606165634, -0.9638064912897155, 0.07191183335488918, -0.310839811277583 },
            { -0.01660535453404476, 0.0081791073261326, -0.06447329330423812, 0.008179107326132602, -0.004028688247230148, 0.03175686399970775, -0.06447329330423812, 0.03175686399970774, -0.2503292260922172, 0.08716581674496794, -0.04293425767365656, 0.3384370539984425, -0.04293425767365656, 0.02114763046827474, -0.1667000233038164, 0.3384370539984425, -0.1667000233038164, 1.314043093914531, -0.07056046221092319, 0.03475515034752396, -0.2739637606942044, 0.03475515034752396, -0.0171189422210446, 0.1349431593041087, -0.2739637606942044, 0.1349431593041087, -1.063713867822313 },
            { 0.0081791073261326, -0.01660535453404476, -0.06447329330423812, -0.004028688247230148, 0.008179107326132602, 0.03175686399970775, 0.03175686399970774, -0.06447329330423812, -0.2503292260922172, -0.04293425767365656, 0.08716581674496794, 0.3384370539984425, 0.02114763046827474, -0.04293425767365656, -0.1667000233038164, -0.1667000233038164, 0.3384370539984425, 1.314043093914531, 0.03475515034752396, -0.07056046221092319, -0.2739637606942044, -0.0171189422210446, 0.03475515034752396, 0.1349431593041087, 0.1349431593041087, -0.2739637606942044, -1.063713867822313 },
            { 0.004358684101230265, -0.05841775733230405, -0.01884046728107651, -0.002146906589171537, 0.02877415872050639, 0.00928003094727535, 0.01692337961848306, -0.2268175120825934, -0.07315152293263726, -0.02287986437375384, 0.3066499736479457, 0.09889850379556206, 0.01126967002942437, -0.1510430289747838, -0.04871329156383876, -0.08883521297337232, 1.190624003372309, 0.3839913342102203, 0.01852118027252358, -0.2482322163156417, -0.08005803651448555, -0.009122763440252835, 0.1222688702542775, 0.03943326061656341, 0.07191183335488927, -0.9638064912897154, -0.3108398112775831 },
            { 0.0287741587205064, -0.002146906589171534, 0.009280030947275345, -0.05841775733230405, 0.00435868410123026, -0.0188404672810765, -0.2268175120825935, 0.01692337961848304, -0.07315152293263723, -0.1510430289747839, 0.01126967002942436, -0.04871329156383874, 0.3066499736479457, -0.02287986437375382, 0.098898503795562, 1.190624003372309, -0.08883521297337221, 0.3839913342102201, 0.1222688702542775, -0.009122763440252825, 0.0394332606165634, -0.2482322163156417, 0.01852118027252356, -0.08005803651448552, -0.9638064912897155, 0.07191183335488918, -0.310839811277583 },
            { 0.008179107326132602, -0.004028688247230148, 0.03175686399970775, -0.01660535453404476, 0.0081791073261326, -0.06447329330423812, -0.06447329330423812, 0.03175686399970774, -0.2503292260922172, -0.04293425767365656, 0.02114763046827474, -0.1667000233038164, 0.08716581674496794, -0.04293425767365656, 0.3384370539984425, 0.3384370539984425, -0.1667000233038164, 1.314043093914531, 0.03475515034752396, -0.0171189422210446, 0.1349431593041087, -0.07056046221092319, 0.03475515034752396, -0.2739637606942044, -0.2739637606942044, 0.1349431593041087, -1.063713867822313 },
            { -0.004028688247230148, 0.008179107326132602, 0.03175686399970775, 0.0081791073261326, -0.01660535453404476, -0.06447329330423812, 0.03175686399970774, -0.06447329330423812, -0.2503292260922172, 0.02114763046827474, -0.04293425767365656, -0.1667000233038164, -0.04293425767365656, 0.08716581674496794, 0.3384370539984425, -0.1667000233038164, 0.3384370539984425, 1.314043093914531, -0.0171189422210446, 0.03475515034752396, 0.1349431593041087, 0.03475515034752396, -0.07056046221092319, -0.2739637606942044, 0.1349431593041087, -0.2739637606942044, -1.063713867822313 },
            { -0.002146906589171537, 0.02877415872050639, 0.00928003094727535, 0.004358684101230265, -0.05841775733230405, -0.01884046728107651, 0.01692337961848306, -0.2268175120825934, -0.07315152293263726, 0.01126967002942437, -0.1510430289747838, -0.04871329156383876, -0.02287986437375384, 0.3066499736479457, 0.09889850379556206, -0.08883521297337232, 1.190624003372309, 0.3839913342102203, -0.009122763440252835, 0.1222688702542775, 0.03943326061656341, 0.01852118027252358, -0.2482322163156417, -0.08005803651448555, 0.07191183335488927, -0.9638064912897154, -0.3108398112775831 },
            { 0.01533388218792938, -0.001144096445238009, 0.004945371387850416, -0.2055140927427526, 0.01533388218792936, -0.06628090013956785, -0.06628090013956789, 0.004945371387850413, -0.02137643051472095, -0.08049152832248574, 0.006005659251642251, -0.02595953824685832, 1.078796824831156, -0.08049152832248564, 0.3479256515368008, 0.3479256515368009, -0.0259595382468583, 0.112210433152001, 0.06515764613455637, -0.004861562806404244, 0.02101416685900791, -0.8732827320884029, 0.06515764613455627, -0.2816447513972329, -0.2816447513972331, 0.02101416685900789, -0.0908340026372801 },
            { 0.004358684101230265, -0.002146906589171537, 0.01692337961848306, -0.05841775733230404, 0.02877415872050639, -0.2268175120825934, -0.01884046728107651, 0.00928003094727535, -0.07315152293263727, -0.02287986437375385, 0.01126967002942437, -0.08883521297337232, 0.3066499736479457, -0.1510430289747839, 1.190624003372309, 0.09889850379556206, -0.04871329156383876, 0.3839913342102203, 0.01852118027252358, -0.009122763440252837, 0.07191183335488928, -0.2482322163156416, 0.1222688702542775, -0.9638064912897153, -0.08005803651448555, 0.03943326061656342, -0.3108398112775831 },
            { -0.002146906589171537, 0.004358684101230265, 0.01692337961848306, 0.02877415872050639, -0.05841775733230404, -0.2268175120825934, 0.00928003094727535, -0.01884046728107651, -0.07315152293263727, 0.01126967002942437, -0.02287986437375385, -0.08883521297337232, -0.1510430289747839, 0.3066499736479457, 1.190624003372309, -0.04871329156383876, 0.09889850379556206, 0.3839913342102203, -0.009122763440252837, 0.01852118027252358, 0.07191183335488928, 0.1222688702542775, -0.2482322163156416, -0.9638064912897153, 0.03943326061656342, -0.08005803651448555, -0.3108398112775831 },
            { -0.00114409644523801, 0.01533388218792938, 0.004945371387850419, 0.01533388218792938, -0.2055140927427526, -0.06628090013956787, 0.004945371387850419, -0.06628090013956787, -0.02137643051472096, 0.006005659251642258, -0.08049152832248573, -0.02595953824685833, -0.08049152832248573, 1.078796824831155, 0.3479256515368009, -0.02595953824685833, 0.3479256515368009, 0.1122104331520011, -0.004861562806404249, 0.06515764613455635, 0.02101416685900791, 0.06515764613455634, -0.8732827320884028, -0.281644751397233, 0.02101416685900791, -0.281644751397233, -0.09083400263728013 },
            { 0.4638113077126143, -0.03460603530871722, 0.149585026310495, -0.03460603530871721, 0.002582036401169897, -0.01116088507562619, 0.149585026310495, -0.01116088507562619, 0.04824306722201748, 1.748122225286523, -0.1304314458191322, 0.5637915779868636, -0.1304314458191322, 0.009731792098050149, -0.04206579471033489, 0.5637915779868636, -0.04206579471033489, 0.1818299308887394, -2.211933532999137, 0.1650374811278494, -0.7133766042973586, 0.1650374811278494, -0.01231382849922005, 0.05322667978596109, -0.7133766042973587, 0.05322667978596109, -0.2300729981107569 },
            { 0.1318392138482172, -0.06493851592549255, 0.5118896007916675, -0.00983682892943155, 0.004845212994258724, -0.03819326804800068, 0.04251981774549605, -0.02094349458874807, 0.1650908853001383, 0.4969069448284669, -0.2447557036207828, 1.92933111624657, -0.03707537740441563, 0.01826178961285461, -0.1439518606398559, 0.1602587888221346, -0.07893681709986215, 0.6222337424429958, -0.628746158676684, 0.3096942195462754, -2.441220717038237, 0.04691220633384718, -0.02310700260711334, 0.1821451286878566, -0.2027786065676306, 0.09988031168861022, -0.7873246277431341 },
            { -0.06493851592549255, 0.1318392138482172, 0.5118896007916675, 0.004845212994258724, -0.00983682892943155, -0.03819326804800068, -0.02094349458874807, 0.04251981774549605, 0.1650908853001383, -0.2447557036207828, 0.4969069448284669, 1.92933111624657, 0.01826178961285461, -0.03707537740441563, -0.1439518606398559, -0.07893681709986215, 0.1602587888221346, 0.6222337424429958, 0.3096942195462754, -0.628746158676684, -2.441220717038237, -0.02310700260711334, 0.04691220633384718, 0.1821451286878566, 0.09988031168861022, -0.2027786065676306, -0.7873246277431341 },
            { -0.03460603530871726, 0.4638113077126143, 0.1495850263104951, 0.0025820364011699, -0.03460603530871721, -0.0111608850756262, -0.01116088507562621, 0.149585026310495, 0.0482430672220175, -0.1304314458191324, 1.748122225286523, 0.5637915779868639, 0.009731792098050161, -0.1304314458191322, -0.04206579471033491, -0.04206579471033494, 0.5637915779868635, 0.1818299308887395, 0.1650374811278496, -2.211933532999137, -0.7133766042973589, -0.01231382849922006, 0.1650374811278494, 0.05322667978596111, 0.05322667978596115, -0.7133766042973586, -0.230072998110757 },
            { 0.1318392138482172, -0.00983682892943155, 0.04251981774549605, -0.06493851592549255, 0.004845212994258724, -0.02094349458874806, 0.5118896007916675, -0.03819326804800068, 0.1650908853001383, 0.496906944828467, -0.03707537740441563, 0.1602587888221346, -0.2447557036207828, 0.01826178961285461, -0.07893681709986215, 1.92933111624657, -0.143951860639856, 0.6222337424429958, -0.6287461586766842, 0.04691220633384718, -0.2027786065676306, 0.3096942195462754, -0.02310700260711334, 0.09988031168861021, -2.441220717038237, 0.1821451286878566, -0.7873246277431341 },
            { 0.03747553804549731, -0.01845889210918439, 0.1455055567279687, -0.01845889210918439, 0.009092082880433746, -0.07166998829123124, 0.1455055567279687, -0.07166998829123125, 0.5649516496070676, 0.14124670932451, -0.06957225710897355, 0.5484159040306494, -0.06957225710897355, 0.03426840159593864, -0.2701268755947554, 0.5484159040306494, -0.2701268755947555, 2.129323969613816, -0.1787222473700073, 0.08803114921815793, -0.6939214607586182, 0.08803114921815793, -0.04336048447637238, 0.3417968638859867, -0.6939214607586182, 0.3417968638859867, -2.694275619220883 },
            { -0.01845889210918439, 0.03747553804549731, 0.1455055567279687, 0.009092082880433746, -0.01845889210918439, -0.07166998829123124, -0.07166998829123125, 0.1455055567279687, 0.5649516496070676, -0.06957225710897355, 0.14124670932451, 0.5484159040306494, 0.03426840159593864, -0.06957225710897355, -0.2701268755947554, -0.2701268755947555, 0.5484159040306494, 2.129323969613816, 0.08803114921815793, -0.1787222473700073, -0.6939214607586182, -0.04336048447637238, 0.08803114921815793, 0.3417968638859867, 0.3417968638859867, -0.6939214607586182, -2.694275619220883 },
            { -0.009836828929431562, 0.1318392138482171, 0.04251981774549606, 0.004845212994258729, -0.06493851592549253, -0.02094349458874807, -0.03819326804800072, 0.5118896007916673, 0.1650908853001384, -0.03707537740441567, 0.4969069448284669, 0.1602587888221346, 0.01826178961285464, -0.2447557036207828, -0.07893681709986218, -0.1439518606398561, 1.92933111624657, 0.622233742442996, 0.04691220633384723, -0.628746158676684, -0.2027786065676307, -0.02310700260711337, 0.3096942195462753, 0.09988031168861025, 0.1821451286878568, -2.441220717038237, -0.7873246277431344 },
            { -0.06493851592549255, 0.004845212994258724, -0.02094349458874806, 0.1318392138482172, -0.00983682892943155, 0.04251981774549605, 0.5118896007916675, -0.03819326804800068, 0.1650908853001383, -0.2447557036207828, 0.01826178961285461, -0.07893681709986215, 0.496906944828467, -0.03707537740441563, 0.1602587888221346, 1.92933111624657, -0.143951860639856, 0.6222337424429958, 0.3096942195462754, -0.02310700260711334, 0.09988031168861021, -0.6287461586766842, 0.04691220633384718, -0.2027786065676306, -2.441220717038237, 0.1821451286878566, -0.7873246277431341 },
            { -0.01845889210918439, 0.009092082880433746, -0.07166998829123124, 0.03747553804549731, -0.01845889210918439, 0.1455055567279687, 0.1455055567279687, -0.07166998829123125, 0.5649516496070676, -0.06957225710897355, 0.03426840159593864, -0.2701268755947554, 0.14124670932451, -0.06957225710897355, 0.5484159040306494, 0.5484159040306494, -0.2701268755947555, 2.129323969613816, 0.08803114921815793, -0.04336048447637238, 0.3417968638859867, -0.1787222473700073, 0.08803114921815793, -0.6939214607586182, -0.6939214607586182, 0.3417968638859867, -2.694275619220883 },
            { 0.009092082880433746, -0.01845889210918439, -0.07166998829123124, -0.01845889210918439, 0.03747553804549731, 0.1455055567279687, -0.07166998829123125, 0.1455055567279687, 0.5649516496070676, 0.03426840159593864, -0.06957225710897355, -0.2701268755947554, -0.06957225710897355, 0.14124670932451, 0.5484159040306494, -0.2701268755947555, 0.5484159040306494, 2.129323969613816, -0.04336048447637238, 0.08803114921815793, 0.3417968638859867, 0.08803114921815793, -0.1787222473700073, -0.6939214607586182, 0.3417968638859867, -0.6939214607586182, -2.694275619220883 },
            { 0.004845212994258729, -0.06493851592549253, -0.02094349458874807, -0.009836828929431562, 0.1318392138482171, 0.04251981774549606, -0.03819326804800072, 0.5118896007916673, 0.1650908853001384, 0.01826178961285464, -0.2447557036207828, -0.07893681709986218, -0.03707537740441567, 0.4969069448284669, 0.1602587888221346, -0.1439518606398561, 1.92933111624657, 0.622233742442996, -0.02310700260711337, 0.3096942195462753, 0.09988031168861025, 0.04691220633384723, -0.628746158676684, -0.2027786065676307, 0.1821451286878568, -2.441220717038237, -0.7873246277431344 },
            { -0.03460603530871726, 0.002582036401169901, -0.01116088507562621, 0.4638113077126143, -0.03460603530871721, 0.149585026310495, 0.1495850263104951, -0.0111608850756262, 0.0482430672220175, -0.1304314458191324, 0.009731792098050161, -0.04206579471033494, 1.748122225286522, -0.1304314458191322, 0.5637915779868635, 0.563791577986864, -0.04206579471033491, 0.1818299308887395, 0.1650374811278496, -0.01231382849922006, 0.05322667978596114, -2.211933532999137, 0.1650374811278494, -0.7133766042973585, -0.7133766042973589, 0.05322667978596111, -0.230072998110757 },
            { -0.009836828929431562, 0.00484521299425873, -0.03819326804800073, 0.1318392138482171, -0.06493851592549253, 0.5118896007916673, 0.04251981774549606, -0.02094349458874807, 0.1650908853001384, -0.03707537740441567, 0.01826178961285464, -0.1439518606398561, 0.4969069448284669, -0.2447557036207827, 1.929331116246569, 0.1602587888221347, -0.07893681709986219, 0.622233742442996, 0.04691220633384723, -0.02310700260711336, 0.1821451286878568, -0.628746158676684, 0.3096942195462753, -2.441220717038237, -0.2027786065676307, 0.09988031168861025, -0.7873246277431344 },
            { 0.00484521299425873, -0.009836828929431562, -0.03819326804800073, -0.06493851592549253, 0.1318392138482171, 0.5118896007916673, -0.02094349458874807, 0.04251981774549606, 0.1650908853001384, 0.01826178961285464, -0.03707537740441567, -0.1439518606398561, -0.2447557036207827, 0.4969069448284669, 1.929331116246569, -0.07893681709986219, 0.1602587888221347, 0.622233742442996, -0.02310700260711336, 0.04691220633384723, 0.1821451286878568, 0.3096942195462753, -0.628746158676684, -2.441220717038237, 0.09988031168861025, -0.2027786065676307, -0.7873246277431344 },
            { 0.002582036401169904, -0.03460603530871725, -0.01116088507562621, -0.03460603530871725, 0.4638113077126141, 0.1495850263104951, -0.01116088507562621, 0.1495850263104951, 0.04824306722201752, 0.009731792098050172, -0.1304314458191324, -0.04206579471033496, -0.1304314458191324, 1.748122225286522, 0.5637915779868637, -0.04206579471033496, 0.5637915779868639, 0.1818299308887396, -0.01231382849922008, 0.1650374811278496, 0.05322667978596116, 0.1650374811278496, -2.211933532999136, -0.7133766042973588, 0.05322667978596117, -0.7133766042973588, -0.2300729981107571 } } };
    alignas(32) static const double FE35_C0_Q64[1][64][27] =
        { { { 0.5145887271371519, -0.03839465611263234, 0.1659613877624345, -0.03839465611263234, 0.002864714169330016, -0.01238276331190516, 0.1659613877624345, -0.01238276331190516, 0.05352465138765494, -0.03839465611263234, 0.002864714169330016, -0.01238276331190516, 0.002864714169330016, -0.0002137429554749961, 0.0009239066345851055, -0.01238276331190516, 0.0009239066345851055, -0.003993598140034286, 0.1659613877624345, -0.01238276331190516, 0.05352465138765494, -0.01238276331190516, 0.0009239066345851055, -0.003993598140034286, 0.05352465138765494, -0.003993598140034286, 0.0172623785857403 },
            { 0.1462727883360566, -0.07204789468604419, 0.5679305651369416, -0.01091375133311444, 0.005375660200524634, -0.04237461412261769, 0.04717482848718269, -0.02323635936212554, 0.1831648067131271, -0.01091375133311444, 0.005375660200524634, -0.04237461412261769, 0.000814300250347359, -0.0004010904512537004, 0.003161668049346466, -0.003519823154724959, 0.001733718560027011, -0.0136663502226564, 0.04717482848718269, -0.02323635936212554, 0.1831648067131271, -0.003519823154724959, 0.001733718560027011, -0.0136663502226564, 0.01521448020586151, -0.007494020453458502, 0.05907297208095794 },
            { -0.07204789468604419, 0.1462727883360566, 0.5679305651369416, 0.005375660200524634, -0.01091375133311444, -0.04237461412261769, -0.02323635936212554, 0.04717482848718269, 0.1831648067131271, 0.005375660200524634, -0.01091375133311444, -0.04237461412261769, -0.0004010904512537004, 0.000814300250347359, 0.003161668049346466, 0.001733718560027011, -0.003519823154724959, -0.0136663502226564, -0.02323635936212554, 0.04717482848718269, 0.1831648067131271, 0.001733718560027011, -0.003519823154724959, -0.0136663502226564, -0.007494020453458502, 0.01521448020586151, 0.05907297208095794 },
            { -0.03839465611263239, 0.5145887271371518, 0.1659613877624345, 0.002864714169330019, -0.03839465611263234, -0.01238276331190517, -0.01238276331190518, 0.1659613877624345, 0.05352465138765496, 0.002864714169330019, -0.03839465611263234, -0.01238276331190517, -0.0002137429554749964, 0.002864714169330015, 0.000923906634585106, 0.0009239066345851066, -0.01238276331190516, -0.003993598140034288, -0.01238276331190518, 0.1659613877624345, 0.05352465138765496, 0.0009239066345851066, -0.01238276331190516, -0.003993598140034288, -0.003993598140034292, 0.05352465138765493, 0.01726237858574031 },
            { 0.1462727883360566, -0.01091375133311444, 0.04717482848718269, -0.07204789468604421, 0.005375660200524635, -0.02323635936212554, 0.5679305651369416, -0.04237461412261768, 0.1831648067131271, -0.01091375133311444, 0.000814300250347359, -0.003519823154724959, 0.005375660200524634, -0.0004010904512537004, 0.001733718560027011, -0.04237461412261769, 0.003161668049346466, -0.0136663502226564, 0.04717482848718269, -0.003519823154724959, 0.01521448020586151, -0.02323635936212554, 0.001733718560027011, -0.007494020453458502, 0.1831648067131271, -0.0136663502226564, 0.05907297208095794 },
            { 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, -0.02047974604515852, 0.01008747151841086, -0.07951631932089745, 0.1614353035015314, -0.07951631932089745, 0.626801773546817, -0.003102253808749921, 0.001528041259380969, -0.01204506168812308, 0.001528041259380969, -0.0007526496006822372, 0.005932896650599213, -0.01204506168812308, 0.005932896650599213, -0.04676713125840375, 0.01340953141450435, -0.006604977714117027, 0.05206493183793191, -0.006604977714117027, 0.003253337440023821, -0.02564502098146382, 0.05206493183793191, -0.02564502098146382, 0.2021515177149605 },
            { -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, 0.01008747151841086, -0.02047974604515852, -0.07951631932089745, -0.07951631932089745, 0.1614353035015314, 0.626801773546817, 0.001528041259380969, -0.003102253808749921, -0.01204506168812308, -0.0007526496006822372, 0.001528041259380969, 0.005932896650599213, 0.005932896650599213, -0.01204506168812308, -0.04676713125840375, -0.006604977714117027, 0.01340953141450435, 0.05206493183793191, 0.003253337440023821, -0.006604977714117027, -0.02564502098146382, -0.02564502098146382, 0.05206493183793191, 0.2021515177149605 },
            { -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, 0.005375660200524641, -0.07204789468604419, -0.02323635936212555, -0.04237461412261773, 0.5679305651369415, 0.1831648067131272, 0.0008143002503473599, -0.01091375133311443, -0.003519823154724961, -0.0004010904512537009, 0.005375660200524633, 0.001733718560027011, 0.00316166804934647, -0.04237461412261768, -0.0136663502226564, -0.003519823154724963, 0.04717482848718269, 0.01521448020586152, 0.001733718560027013, -0.02323635936212554, -0.007494020453458505, -0.01366635022265641, 0.1831648067131271, 0.05907297208095796 },
            { -0.07204789468604421, 0.005375660200524635, -0.02323635936212554, 0.1462727883360566, -0.01091375133311444, 0.04717482848718269, 0.5679305651369416, -0.04237461412261768, 0.1831648067131271, 0.005375660200524634, -0.0004010904512537004, 0.001733718560027011, -0.01091375133311444, 0.000814300250347359, -0.003519823154724959, -0.04237461412261769, 0.003161668049346466, -0.0136663502226564, -0.02323635936212554, 0.001733718560027011, -0.007494020453458502, 0.04717482848718269, -0.003519823154724959, 0.01521448020586151, 0.1831648067131271, -0.0136663502226564, 0.05907297208095794 },
            { -0.02047974604515852, 0.01008747151841086, -0.07951631932089745, 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, 0.1614353035015314, -0.07951631932089745, 0.626801773546817, 0.001528041259380969, -0.0007526496006822372, 0.005932896650599213, -0.003102253808749921, 0.001528041259380969, -0.01204506168812308, -0.01204506168812308, 0.005932896650599213, -0.04676713125840375, -0.006604977714117027, 0.003253337440023821, -0.02564502098146382, 0.01340953141450435, -0.006604977714117027, 0.05206493183793191, 0.05206493183793191, -0.02564502098146382, 0.2021515177149605 },
            { 0.01008747151841086, -0.02047974604515852, -0.07951631932089745, -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, -0.07951631932089745, 0.1614353035015314, 0.626801773546817, -0.0007526496006822372, 0.001528041259380969, 0.005932896650599213, 0.001528041259380969, -0.003102253808749921, -0.01204506168812308, 0.005932896650599213, -0.01204506168812308, -0.04676713125840375, 0.003253337440023821, -0.006604977714117027, -0.02564502098146382, -0.006604977714117027, 0.01340953141450435, 0.05206493183793191, -0.02564502098146382, 0.05206493183793191, 0.2021515177149605 },
            { 0.005375660200524641, -0.07204789468604419, -0.02323635936212555, -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, -0.04237461412261773, 0.5679305651369415, 0.1831648067131272, -0.0004010904512537009, 0.005375660200524633, 0.001733718560027011, 0.0008143002503473599, -0.01091375133311443, -0.003519823154724961, 0.00316166804934647, -0.04237461412261768, -0.0136663502226564, 0.001733718560027013, -0.02323635936212554, -0.007494020453458505, -0.003519823154724963, 0.04717482848718269, 0.01521448020586152, -0.01366635022265641, 0.1831648067131271, 0.05907297208095796 },
            { -0.03839465611263239, 0.002864714169330019, -0.01238276331190518, 0.5145887271371518, -0.03839465611263233, 0.1659613877624345, 0.1659613877624346, -0.01238276331190517, 0.05352465138765496, 0.002864714169330019, -0.0002137429554749963, 0.0009239066345851065, -0.03839465611263234, 0.002864714169330015, -0.01238276331190516, -0.01238276331190517, 0.000923906634585106, -0.003993598140034288, -0.01238276331190518, 0.0009239066345851065, -0.003993598140034291, 0.1659613877624345, -0.01238276331190516, 0.05352465138765493, 0.05352465138765496, -0.003993598140034288, 0.01726237858574031 },
            { -0.01091375133311445, 0.005375660200524641, -0.04237461412261774, 0.1462727883360566, -0.07204789468604418, 0.5679305651369415, 0.04717482848718271, -0.02323635936212555, 0.1831648067131272, 0.0008143002503473598, -0.0004010904512537009, 0.00316166804934647, -0.01091375133311443, 0.005375660200524633, -0.04237461412261768, -0.003519823154724961, 0.001733718560027012, -0.0136663502226564, -0.003519823154724963, 0.001733718560027013, -0.01366635022265641, 0.04717482848718269, -0.02323635936212554, 0.1831648067131271, 0.01521448020586152, -0.007494020453458506, 0.05907297208095796 },
            { 0.005375660200524641, -0.01091375133311445, -0.04237461412261774, -0.07204789468604418, 0.1462727883360566, 0.5679305651369415, -0.02323635936212555, 0.04717482848718271, 0.1831648067131272, -0.0004010904512537009, 0.0008143002503473598, 0.00316166804934647, 0.005375660200524633, -0.01091375133311443, -0.04237461412261768, 0.001733718560027012, -0.003519823154724961, -0.0136663502226564, 0.001733718560027013, -0.003519823154724963, -0.01366635022265641, -0.02323635936212554, 0.04717482848718269, 0.1831648067131271, -0.007494020453458506, 0.01521448020586152, 0.05907297208095796 },
            { 0.002864714169330022, -0.03839465611263238, -0.01238276331190519, -0.03839465611263238, 0.5145887271371516, 0.1659613877624345, -0.01238276331190519, 0.1659613877624345, 0.05352465138765498, -0.0002137429554749966, 0.002864714169330018, 0.000923906634585107, 0.002864714169330019, -0.03839465611263233, -0.01238276331190517, 0.0009239066345851071, -0.01238276331190517, -0.00399359814003429, 0.0009239066345851076, -0.01238276331190518, -0.003993598140034292, -0.01238276331190518, 0.1659613877624345, 0.05352465138765495, -0.003993598140034293, 0.05352465138765495, 0.01726237858574031 },
            { 0.1462727883360566, -0.01091375133311444, 0.04717482848718269, -0.01091375133311444, 0.000814300250347359, -0.003519823154724959, 0.04717482848718269, -0.003519823154724959, 0.01521448020586151, -0.07204789468604421, 0.005375660200524635, -0.02323635936212554, 0.005375660200524634, -0.0004010904512537004, 0.001733718560027011, -0.02323635936212554, 0.001733718560027011, -0.007494020453458502, 0.5679305651369416, -0.04237461412261768, 0.1831648067131271, -0.04237461412261769, 0.003161668049346466, -0.0136663502226564, 0.1831648067131271, -0.0136663502226564, 0.05907297208095794 },
            { 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, -0.003102253808749921, 0.001528041259380969, -0.01204506168812308, 0.01340953141450435, -0.006604977714117027, 0.05206493183793191, -0.02047974604515852, 0.01008747151841086, -0.07951631932089745, 0.001528041259380969, -0.0007526496006822372, 0.005932896650599213, -0.006604977714117027, 0.003253337440023821, -0.02564502098146382, 0.1614353035015314, -0.07951631932089745, 0.626801773546817, -0.01204506168812308, 0.005932896650599213, -0.04676713125840375, 0.05206493183793191, -0.02564502098146382, 0.2021515177149605 },
            { -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, 0.001528041259380969, -0.003102253808749921, -0.01204506168812308, -0.006604977714117027, 0.01340953141450435, 0.05206493183793191, 0.01008747151841086, -0.02047974604515852, -0.07951631932089745, -0.0007526496006822372, 0.001528041259380969, 0.005932896650599213, 0.003253337440023821, -0.006604977714117027, -0.02564502098146382, -0.07951631932089745, 0.1614353035015314, 0.626801773546817, 0.005932896650599213, -0.01204506168812308, -0.04676713125840375, -0.02564502098146382, 0.05206493183793191, 0.2021515177149605 },
            { -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, 0.0008143002503473599, -0.01091375133311443, -0.003519823154724961, -0.003519823154724963, 0.04717482848718269, 0.01521448020586152, 0.005375660200524641, -0.07204789468604419, -0.02323635936212555, -0.0004010904512537009, 0.005375660200524633, 0.001733718560027011, 0.001733718560027013, -0.02323635936212554, -0.007494020453458505, -0.04237461412261773, 0.5679305651369415, 0.1831648067131272, 0.00316166804934647, -0.04237461412261768, -0.0136663502226564, -0.01366635022265641, 0.1831648067131271, 0.05907297208095796 },
            { 0.04157830803375191, -0.003102253808749921, 0.01340953141450435, -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, 0.01008747151841086, -0.0007526496006822372, 0.003253337440023821, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, 0.626801773546817, -0.04676713125840375, 0.2021515177149605 },
            { 0.01181871022365283, -0.005821405329077965, 0.04588828074493147, -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, 0.002867382257803024, -0.001412353297458125, 0.01113313039740754, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, 0.1781695523350284, -0.08775891462054997, 0.6917755222888954 },
            { -0.005821405329077965, 0.01181871022365283, 0.04588828074493147, 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, -0.001412353297458125, 0.002867382257803024, 0.01113313039740754, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, -0.08775891462054997, 0.1781695523350284, 0.6917755222888954 },
            { -0.003102253808749924, 0.04157830803375191, 0.01340953141450436, 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, -0.0007526496006822381, 0.01008747151841086, 0.003253337440023822, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, -0.0467671312584038, 0.6268017735468169, 0.2021515177149606 },
            { -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, 0.04157830803375191, -0.003102253808749921, 0.01340953141450435, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, 0.01008747151841086, -0.0007526496006822372, 0.003253337440023821, -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, 0.626801773546817, -0.04676713125840375, 0.2021515177149605 },
            { -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, 0.01181871022365283, -0.005821405329077965, 0.04588828074493147, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, 0.002867382257803024, -0.001412353297458125, 0.01113313039740754, -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, 0.1781695523350284, -0.08775891462054997, 0.6917755222888954 },
            { 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, -0.005821405329077965, 0.01181871022365283, 0.04588828074493147, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, -0.001412353297458125, 0.002867382257803024, 0.01113313039740754, 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, -0.08775891462054997, 0.1781695523350284, 0.6917755222888954 },
            { 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, -0.003102253808749924, 0.04157830803375191, 0.01340953141450436, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, -0.0007526496006822381, 0.01008747151841086, 0.003253337440023822, 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, -0.0467671312584038, 0.6268017735468169, 0.2021515177149606 },
            { -0.01091375133311445, 0.0008143002503473599, -0.003519823154724964, 0.1462727883360566, -0.01091375133311443, 0.04717482848718269, 0.04717482848718271, -0.003519823154724961, 0.01521448020586152, 0.00537566020052464, -0.0004010904512537009, 0.001733718560027013, -0.07204789468604419, 0.005375660200524634, -0.02323635936212554, -0.02323635936212555, 0.001733718560027011, -0.007494020453458506, -0.04237461412261773, 0.00316166804934647, -0.01366635022265641, 0.5679305651369415, -0.04237461412261768, 0.1831648067131271, 0.1831648067131272, -0.0136663502226564, 0.05907297208095796 },
            { -0.003102253808749925, 0.001528041259380971, -0.0120450616881231, 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, 0.01340953141450436, -0.006604977714117031, 0.05206493183793194, 0.001528041259380971, -0.0007526496006822381, 0.005932896650599219, -0.02047974604515851, 0.01008747151841086, -0.07951631932089744, -0.006604977714117031, 0.003253337440023823, -0.02564502098146384, -0.0120450616881231, 0.005932896650599219, -0.04676713125840379, 0.1614353035015314, -0.07951631932089744, 0.6268017735468169, 0.05206493183793194, -0.02564502098146384, 0.2021515177149606 },
            { 0.001528041259380971, -0.003102253808749925, -0.0120450616881231, -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, -0.006604977714117031, 0.01340953141450436, 0.05206493183793194, -0.0007526496006822381, 0.001528041259380971, 0.005932896650599219, 0.01008747151841086, -0.02047974604515851, -0.07951631932089744, 0.003253337440023823, -0.006604977714117031, -0.02564502098146384, 0.005932896650599219, -0.0120450616881231, -0.04676713125840379, -0.07951631932089744, 0.1614353035015314, 0.6268017735468169, -0.02564502098146384, 0.05206493183793194, 0.2021515177149606 },
            { 0.0008143002503473608, -0.01091375133311445, -0.003519823154724965, -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, -0.003519823154724965, 0.04717482848718271, 0.01521448020586152, -0.0004010904512537013, 0.00537566020052464, 0.001733718560027013, 0.00537566020052464, -0.07204789468604418, -0.02323635936212555, 0.001733718560027013, -0.02323635936212555, -0.007494020453458508, 0.003161668049346473, -0.04237461412261773, -0.01366635022265642, -0.04237461412261773, 0.5679305651369414, 0.1831648067131272, -0.01366635022265642, 0.1831648067131272, 0.05907297208095798 },
            { -0.07204789468604421, 0.005375660200524635, -0.02323635936212554, 0.005375660200524634, -0.0004010904512537004, 0.001733718560027011, -0.02323635936212554, 0.001733718560027011, -0.007494020453458502, 0.1462727883360566, -0.01091375133311444, 0.04717482848718269, -0.01091375133311444, 0.000814300250347359, -0.003519823154724959, 0.04717482848718269, -0.003519823154724959, 0.01521448020586151, 0.5679305651369416, -0.04237461412261768, 0.1831648067131271, -0.04237461412261769, 0.003161668049346466, -0.0136663502226564, 0.1831648067131271, -0.0136663502226564, 0.05907297208095794 },
            { -0.02047974604515852, 0.01008747151841086, -0.07951631932089745, 0.001528041259380969, -0.0007526496006822372, 0.005932896650599213, -0.006604977714117027, 0.003253337440023821, -0.02564502098146382, 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, -0.003102253808749921, 0.001528041259380969, -0.01204506168812308, 0.01340953141450435, -0.006604977714117027, 0.05206493183793191, 0.1614353035015314, -0.07951631932089745, 0.626801773546817, -0.01204506168812308, 0.005932896650599213, -0.04676713125840375, 0.05206493183793191, -0.02564502098146382, 0.2021515177149605 },
            { 0.01008747151841086, -0.02047974604515852, -0.07951631932089745, -0.0007526496006822372, 0.001528041259380969, 0.005932896650599213, 0.003253337440023821, -0.006604977714117027, -0.02564502098146382, -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, 0.001528041259380969, -0.003102253808749921, -0.01204506168812308, -0.006604977714117027, 0.01340953141450435, 0.05206493183793191, -0.07951631932089745, 0.1614353035015314, 0.626801773546817, 0.005932896650599213, -0.01204506168812308, -0.04676713125840375, -0.02564502098146382, 0.05206493183793191, 0.2021515177149605 },
            { 0.005375660200524641, -0.07204789468604419, -0.02323635936212555, -0.0004010904512537009, 0.005375660200524633, 0.001733718560027011, 0.001733718560027013, -0.02323635936212554, -0.007494020453458505, -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, 0.0008143002503473599, -0.01091375133311443, -0.003519823154724961, -0.003519823154724963, 0.04717482848718269, 0.01521448020586152, -0.04237461412261773, 0.5679305651369415, 0.1831648067131272, 0.00316166804934647, -0.04237461412261768, -0.0136663502226564, -0.01366635022265641, 0.1831648067131271, 0.05907297208095796 },
            { -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, 0.01008747151841086, -0.0007526496006822372, 0.003253337440023821, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, 0.04157830803375191, -0.003102253808749921, 0.01340953141450435, -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, 0.626801773546817, -0.04676713125840375, 0.2021515177149605 },
            { -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, 0.002867382257803024, -0.001412353297458125, 0.01113313039740754, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, 0.01181871022365283, -0.005821405329077965, 0.04588828074493147, -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, 0.1781695523350284, -0.08775891462054997, 0.6917755222888954 },
            { 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, -0.001412353297458125, 0.002867382257803024, 0.01113313039740754, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, -0.005821405329077965, 0.01181871022365283, 0.04588828074493147, 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, -0.08775891462054997, 0.1781695523350284, 0.6917755222888954 },
            { 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, -0.0007526496006822381, 0.01008747151841086, 0.003253337440023822, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, -0.003102253808749924, 0.04157830803375191, 0.01340953141450436, 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, -0.0467671312584038, 0.6268017735468169, 0.2021515177149606 },
            { 0.01008747151841086, -0.0007526496006822372, 0.003253337440023821, -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, 0.04157830803375191, -0.003102253808749921, 0.01340953141450435, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, 0.626801773546817, -0.04676713125840375, 0.2021515177149605 },
            { 0.002867382257803024, -0.001412353297458125, 0.01113313039740754, -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, 0.01181871022365283, -0.005821405329077965, 0.04588828074493147, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, 0.1781695523350284, -0.08775891462054997, 0.6917755222888954 },
            { -0.001412353297458125, 0.002867382257803024, 0.01113313039740754, 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, -0.005821405329077965, 0.01181871022365283, 0.04588828074493147, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, -0.08775891462054997, 0.1781695523350284, 0.6917755222888954 },
            { -0.0007526496006822381, 0.01008747151841086, 0.003253337440023822, 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, -0.003102253808749924, 0.04157830803375191, 0.01340953141450436, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, -0.0467671312584038, 0.6268017735468169, 0.2021515177149606 },
            { 0.00537566020052464, -0.0004010904512537009, 0.001733718560027013, -0.07204789468604419, 0.005375660200524634, -0.02323635936212554, -0.02323635936212555, 0.001733718560027011, -0.007494020453458506, -0.01091375133311445, 0.0008143002503473599, -0.003519823154724964, 0.1462727883360566, -0.01091375133311443, 0.04717482848718269, 0.04717482848718271, -0.003519823154724961, 0.01521448020586152, -0.04237461412261773, 0.00316166804934647, -0.01366635022265641, 0.5679305651369415, -0.04237461412261768, 0.1831648067131271, 0.1831648067131272, -0.0136663502226564, 0.05907297208095796 },
            { 0.001528041259380971, -0.0007526496006822381, 0.005932896650599219, -0.02047974604515851, 0.01008747151841086, -0.07951631932089744, -0.006604977714117031, 0.003253337440023823, -0.02564502098146384, -0.003102253808749925, 0.001528041259380971, -0.0120450616881231, 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, 0.01340953141450436, -0.006604977714117031, 0.05206493183793194, -0.0120450616881231, 0.005932896650599219, -0.04676713125840379, 0.1614353035015314, -0.07951631932089744, 0.6268017735468169, 0.05206493183793194, -0.02564502098146384, 0.2021515177149606 },
            { -0.0007526496006822381, 0.001528041259380971, 0.005932896650599219, 0.01008747151841086, -0.02047974604515851, -0.07951631932089744, 0.003253337440023823, -0.006604977714117031, -0.02564502098146384, 0.001528041259380971, -0.003102253808749925, -0.0120450616881231, -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, -0.006604977714117031, 0.01340953141450436, 0.05206493183793194, 0.005932896650599219, -0.0120450616881231, -0.04676713125840379, -0.07951631932089744, 0.1614353035015314, 0.6268017735468169, -0.02564502098146384, 0.05206493183793194, 0.2021515177149606 },
            { -0.0004010904512537013, 0.00537566020052464, 0.001733718560027013, 0.00537566020052464, -0.07204789468604418, -0.02323635936212555, 0.001733718560027013, -0.02323635936212555, -0.007494020453458508, 0.0008143002503473608, -0.01091375133311445, -0.003519823154724965, -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, -0.003519823154724965, 0.04717482848718271, 0.01521448020586152, 0.003161668049346473, -0.04237461412261773, -0.01366635022265642, -0.04237461412261773, 0.5679305651369414, 0.1831648067131272, -0.01366635022265642, 0.1831648067131272, 0.05907297208095798 },
            { -0.03839465611263239, 0.002864714169330019, -0.01238276331190518, 0.002864714169330019, -0.0002137429554749963, 0.0009239066345851065, -0.01238276331190518, 0.0009239066345851065, -0.003993598140034291, 0.5145887271371518, -0.03839465611263233, 0.1659613877624345, -0.03839465611263234, 0.002864714169330015, -0.01238276331190516, 0.1659613877624345, -0.01238276331190516, 0.05352465138765493, 0.1659613877624346, -0.01238276331190517, 0.05352465138765496, -0.01238276331190517, 0.000923906634585106, -0.003993598140034288, 0.05352465138765496, -0.003993598140034288, 0.01726237858574031 },
            { -0.01091375133311445, 0.005375660200524641, -0.04237461412261774, 0.0008143002503473598, -0.0004010904512537009, 0.00316166804934647, -0.003519823154724963, 0.001733718560027013, -0.01366635022265641, 0.1462727883360566, -0.07204789468604418, 0.5679305651369415, -0.01091375133311443, 0.005375660200524633, -0.04237461412261768, 0.04717482848718269, -0.02323635936212554, 0.1831648067131271, 0.04717482848718271, -0.02323635936212555, 0.1831648067131272, -0.003519823154724961, 0.001733718560027012, -0.0136663502226564, 0.01521448020586152, -0.007494020453458506, 0.05907297208095796 },
            { 0.005375660200524641, -0.01091375133311445, -0.04237461412261774, -0.0004010904512537009, 0.0008143002503473598, 0.00316166804934647, 0.001733718560027013, -0.003519823154724963, -0.01366635022265641, -0.07204789468604418, 0.1462727883360566, 0.5679305651369415, 0.005375660200524633, -0.01091375133311443, -0.04237461412261768, -0.02323635936212554, 0.04717482848718269, 0.1831648067131271, -0.02323635936212555, 0.04717482848718271, 0.1831648067131272, 0.001733718560027012, -0.003519823154724961, -0.0136663502226564, -0.007494020453458506, 0.01521448020586152, 0.05907297208095796 },
            { 0.002864714169330022, -0.03839465611263238, -0.01238276331190519, -0.0002137429554749966, 0.002864714169330018, 0.000923906634585107, 0.0009239066345851076, -0.01238276331190518, -0.003993598140034292, -0.03839465611263238, 0.5145887271371516, 0.1659613877624345, 0.002864714169330019, -0.03839465611263233, -0.01238276331190517, -0.01238276331190518, 0.1659613877624345, 0.05352465138765495, -0.01238276331190519, 0.1659613877624345, 0.05352465138765498, 0.0009239066345851071, -0.01238276331190517, -0.00399359814003429, -0.003993598140034293, 0.05352465138765495, 0.01726237858574031 },
            { -0.01091375133311445, 0.0008143002503473599, -0.003519823154724964, 0.00537566020052464, -0.0004010904512537009, 0.001733718560027013, -0.04237461412261773, 0.00316166804934647, -0.01366635022265641, 0.1462727883360566, -0.01091375133311443, 0.04717482848718269, -0.07204789468604419, 0.005375660200524634, -0.02323635936212554, 0.5679305651369415, -0.04237461412261768, 0.1831648067131271, 0.04717482848718271, -0.003519823154724961, 0.01521448020586152, -0.02323635936212555, 0.001733718560027011, -0.007494020453458506, 0.1831648067131272, -0.0136663502226564, 0.05907297208095796 },
            { -0.003102253808749925, 0.001528041259380971, -0.0120450616881231, 0.001528041259380971, -0.0007526496006822381, 0.005932896650599219, -0.0120450616881231, 0.005932896650599219, -0.04676713125840379, 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, -0.02047974604515851, 0.01008747151841086, -0.07951631932089744, 0.1614353035015314, -0.07951631932089744, 0.6268017735468169, 0.01340953141450436, -0.006604977714117031, 0.05206493183793194, -0.006604977714117031, 0.003253337440023823, -0.02564502098146384, 0.05206493183793194, -0.02564502098146384, 0.2021515177149606 },
            { 0.001528041259380971, -0.003102253808749925, -0.0120450616881231, -0.0007526496006822381, 0.001528041259380971, 0.005932896650599219, 0.005932896650599219, -0.0120450616881231, -0.04676713125840379, -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, 0.01008747151841086, -0.02047974604515851, -0.07951631932089744, -0.07951631932089744, 0.1614353035015314, 0.6268017735468169, -0.006604977714117031, 0.01340953141450436, 0.05206493183793194, 0.003253337440023823, -0.006604977714117031, -0.02564502098146384, -0.02564502098146384, 0.05206493183793194, 0.2021515177149606 },
            { 0.0008143002503473608, -0.01091375133311445, -0.003519823154724965, -0.0004010904512537013, 0.00537566020052464, 0.001733718560027013, 0.003161668049346473, -0.04237461412261773, -0.01366635022265642, -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, 0.00537566020052464, -0.07204789468604418, -0.02323635936212555, -0.04237461412261773, 0.5679305651369414, 0.1831648067131272, -0.003519823154724965, 0.04717482848718271, 0.01521448020586152, 0.001733718560027013, -0.02323635936212555, -0.007494020453458508, -0.01366635022265642, 0.1831648067131272, 0.05907297208095798 },
            { 0.00537566020052464, -0.0004010904512537009, 0.001733718560027013, -0.01091375133311445, 0.0008143002503473599, -0.003519823154724964, -0.04237461412261773, 0.00316166804934647, -0.01366635022265641, -0.07204789468604419, 0.005375660200524634, -0.02323635936212554, 0.1462727883360566, -0.01091375133311443, 0.04717482848718269, 0.5679305651369415, -0.04237461412261768, 0.1831648067131271, -0.02323635936212555, 0.001733718560027011, -0.007494020453458506, 0.04717482848718271, -0.003519823154724961, 0.01521448020586152, 0.1831648067131272, -0.0136663502226564, 0.05907297208095796 },
            { 0.001528041259380971, -0.0007526496006822381, 0.005932896650599219, -0.003102253808749925, 0.001528041259380971, -0.0120450616881231, -0.0120450616881231, 0.005932896650599219, -0.04676713125840379, -0.02047974604515851, 0.01008747151841086, -0.07951631932089744, 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, 0.1614353035015314, -0.07951631932089744, 0.6268017735468169, -0.006604977714117031, 0.003253337440023823, -0.02564502098146384, 0.01340953141450436, -0.006604977714117031, 0.05206493183793194, 0.05206493183793194, -0.02564502098146384, 0.2021515177149606 },
            { -0.0007526496006822381, 0.001528041259380971, 0.005932896650599219, 0.001528041259380971, -0.003102253808749925, -0.0120450616881231, 0.005932896650599219, -0.0120450616881231, -0.04676713125840379, 0.01008747151841086, -0.02047974604515851, -0.07951631932089744, -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, -0.07951631932089744, 0.1614353035015314, 0.6268017735468169, 0.003253337440023823, -0.006604977714117031, -0.02564502098146384, -0.006604977714117031, 0.01340953141450436, 0.05206493183793194, -0.02564502098146384, 0.05206493183793194, 0.2021515177149606 },
            { -0.0004010904512537013, 0.00537566020052464, 0.001733718560027013, 0.0008143002503473608, -0.01091375133311445, -0.003519823154724965, 0.003161668049346473, -0.04237461412261773, -0.01366635022265642, 0.00537566020052464, -0.07204789468604418, -0.02323635936212555, -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, -0.04237461412261773, 0.5679305651369414, 0.1831648067131272, 0.001733718560027013, -0.02323635936212555, -0.007494020453458508, -0.003519823154724965, 0.04717482848718271, 0.01521448020586152, -0.01366635022265642, 0.1831648067131272, 0.05907297208095798 },
            { 0.002864714169330022, -0.0002137429554749966, 0.0009239066345851077, -0.03839465611263238, 0.002864714169330019, -0.01238276331190518, -0.01238276331190519, 0.000923906634585107, -0.003993598140034292, -0.03839465611263238, 0.002864714169330019, -0.01238276331190518, 0.5145887271371518, -0.03839465611263233, 0.1659613877624345, 0.1659613877624345, -0.01238276331190517, 0.05352465138765495, -0.01238276331190519, 0.000923906634585107, -0.003993598140034292, 0.1659613877624345, -0.01238276331190517, 0.05352465138765495, 0.05352465138765498, -0.00399359814003429, 0.01726237858574031 },
            { 0.0008143002503473608, -0.0004010904512537013, 0.003161668049346474, -0.01091375133311445, 0.00537566020052464, -0.04237461412261773, -0.003519823154724965, 0.001733718560027013, -0.01366635022265642, -0.01091375133311445, 0.00537566020052464, -0.04237461412261773, 0.1462727883360566, -0.07204789468604418, 0.5679305651369415, 0.04717482848718271, -0.02323635936212555, 0.1831648067131272, -0.003519823154724965, 0.001733718560027013, -0.01366635022265642, 0.04717482848718271, -0.02323635936212555, 0.1831648067131272, 0.01521448020586152, -0.007494020453458508, 0.05907297208095798 },
            { -0.0004010904512537013, 0.0008143002503473608, 0.003161668049346474, 0.00537566020052464, -0.01091375133311445, -0.04237461412261773, 0.001733718560027013, -0.003519823154724965, -0.01366635022265642, 0.00537566020052464, -0.01091375133311445, -0.04237461412261773, -0.07204789468604418, 0.1462727883360566, 0.5679305651369415, -0.02323635936212555, 0.04717482848718271, 0.1831648067131272, 0.001733718560027013, -0.003519823154724965, -0.01366635022265642, -0.02323635936212555, 0.04717482848718271, 0.1831648067131272, -0.007494020453458508, 0.01521448020586152, 0.05907297208095798 },
            { -0.0002137429554749968, 0.002864714169330022, 0.000923906634585108, 0.002864714169330022, -0.03839465611263237, -0.01238276331190518, 0.000923906634585108, -0.01238276331190518, -0.003993598140034294, 0.002864714169330022, -0.03839465611263237, -0.01238276331190518, -0.03839465611263238, 0.5145887271371516, 0.1659613877624345, -0.01238276331190518, 0.1659613877624345, 0.05352465138765497, 0.000923906634585108, -0.01238276331190518, -0.003993598140034294, -0.01238276331190518, 0.1659613877624345, 0.05352465138765497, -0.003993598140034295, 0.05352465138765497, 0.01726237858574032 } } };
    alignas(32) static const double FE37_C3_D001_Q64[1][64][8] =
        { { { -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014 },
            { -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014 },
            { -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014 },
            { -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014 },
            { -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278 },
            { -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278 },
            { -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278 },
            { -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278 },
            { -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094 },
            { -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094 },
            { -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094 },
            { -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094 },
            { -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785, -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769 },
            { -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785, -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769 },
            { -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785, -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769 },
            { -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785, -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769 },
            { -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278 },
            { -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278 },
            { -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278 },
            { -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278 },
            { -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338 },
            { -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338 },
            { -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338 },
            { -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338 },
            { -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901, -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738 },
            { -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901, -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738 },
            { -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901, -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738 },
            { -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901, -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738 },
            { -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591 },
            { -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591 },
            { -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591 },
            { -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591 },
            { -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094 },
            { -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094 },
            { -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094 },
            { -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094 },
            { -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338, -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738 },
            { -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338, -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738 },
            { -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338, -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738 },
            { -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338, -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738 },
            { -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901 },
            { -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901 },
            { -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901 },
            { -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901 },
            { -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671 },
            { -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671 },
            { -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671 },
            { -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671 },
            { -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014, -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769 },
            { -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014, -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769 },
            { -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014, -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769 },
            { -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014, -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769 },
            { -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591 },
            { -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591 },
            { -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591 },
            { -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591 },
            { -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671 },
            { -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671 },
            { -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671 },
            { -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671 },
            { -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785 },
            { -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785 },
            { -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785 },
            { -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785 } } };
    alignas(32) static const double FE37_C3_D010_Q64[1][64][8] =
        { { { -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769 },
            { -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769 },
            { -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769 },
            { -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769 },
            { -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591 },
            { -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591 },
            { -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591 },
            { -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591 },
            { -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671 },
            { -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671 },
            { -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671 },
            { -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671 },
            { -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785 },
            { -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785 },
            { -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785 },
            { -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785 } } };
    alignas(32) static const double FE37_C3_D100_Q64[1][64][8] =
        { { { -0.8659570925834785, -0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.8659570925834785, 0.06461106321354769, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.6234718442658671, 0.3070963115311591, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.3070963115311591, 0.6234718442658671, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.06461106321354769, 0.8659570925834785, 0.004820780989426014, 0.06461106321354769 },
            { -0.6234718442658671, -0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.6234718442658671, 0.04651867752656094, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.4488872992916901, 0.221103222500738, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.221103222500738, 0.4488872992916901, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.04651867752656094, 0.6234718442658671, 0.02291316667641278, 0.3070963115311591 },
            { -0.3070963115311591, -0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.3070963115311591, 0.02291316667641278, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.221103222500738, 0.1089062557068338, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.1089062557068338, 0.221103222500738, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.02291316667641278, 0.3070963115311591, 0.04651867752656094, 0.6234718442658671 },
            { -0.06461106321354769, -0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.06461106321354769, 0.004820780989426014, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.04651867752656094, 0.02291316667641278, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.02291316667641278, 0.04651867752656094, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.004820780989426014, 0.06461106321354769, 0.06461106321354769, 0.8659570925834785 },
            { -0.8659570925834785, -0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.8659570925834785, 0.06461106321354769, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.6234718442658671, 0.3070963115311591, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.3070963115311591, 0.6234718442658671, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.06461106321354769, 0.8659570925834785, 0.004820780989426014, 0.06461106321354769 },
            { -0.6234718442658671, -0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.6234718442658671, 0.04651867752656094, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.4488872992916901, 0.221103222500738, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.221103222500738, 0.4488872992916901, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.04651867752656094, 0.6234718442658671, 0.02291316667641278, 0.3070963115311591 },
            { -0.3070963115311591, -0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.3070963115311591, 0.02291316667641278, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.221103222500738, 0.1089062557068338, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.1089062557068338, 0.221103222500738, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.02291316667641278, 0.3070963115311591, 0.04651867752656094, 0.6234718442658671 },
            { -0.06461106321354769, -0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.06461106321354769, 0.004820780989426014, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.04651867752656094, 0.02291316667641278, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.02291316667641278, 0.04651867752656094, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.004820780989426014, 0.06461106321354769, 0.06461106321354769, 0.8659570925834785 },
            { -0.8659570925834785, -0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.8659570925834785, 0.06461106321354769, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.6234718442658671, 0.3070963115311591, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.3070963115311591, 0.6234718442658671, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.06461106321354769, 0.8659570925834785, 0.004820780989426014, 0.06461106321354769 },
            { -0.6234718442658671, -0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.6234718442658671, 0.04651867752656094, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.4488872992916901, 0.221103222500738, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.221103222500738, 0.4488872992916901, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.04651867752656094, 0.6234718442658671, 0.02291316667641278, 0.3070963115311591 },
            { -0.3070963115311591, -0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.3070963115311591, 0.02291316667641278, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.221103222500738, 0.1089062557068338, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.1089062557068338, 0.221103222500738, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.02291316667641278, 0.3070963115311591, 0.04651867752656094, 0.6234718442658671 },
            { -0.06461106321354769, -0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.06461106321354769, 0.004820780989426014, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.04651867752656094, 0.02291316667641278, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.02291316667641278, 0.04651867752656094, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.004820780989426014, 0.06461106321354769, 0.06461106321354769, 0.8659570925834785 },
            { -0.8659570925834785, -0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.8659570925834785, 0.06461106321354769, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.6234718442658671, 0.3070963115311591, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.3070963115311591, 0.6234718442658671, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.06461106321354769, 0.8659570925834785, 0.004820780989426014, 0.06461106321354769 },
            { -0.6234718442658671, -0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.6234718442658671, 0.04651867752656094, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.4488872992916901, 0.221103222500738, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.221103222500738, 0.4488872992916901, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.04651867752656094, 0.6234718442658671, 0.02291316667641278, 0.3070963115311591 },
            { -0.3070963115311591, -0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.3070963115311591, 0.02291316667641278, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.221103222500738, 0.1089062557068338, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.1089062557068338, 0.221103222500738, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.02291316667641278, 0.3070963115311591, 0.04651867752656094, 0.6234718442658671 },
            { -0.06461106321354769, -0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.06461106321354769, 0.004820780989426014, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.04651867752656094, 0.02291316667641278, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.02291316667641278, 0.04651867752656094, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.004820780989426014, 0.06461106321354769, 0.06461106321354769, 0.8659570925834785 } } };
    alignas(32) static const double FE37_C3_Q64[1][64][8] =
        { { { 0.8058320946447624, 0.06012499793871617, 0.06012499793871616, 0.004486065274831529, 0.06012499793871616, 0.004486065274831529, 0.00448606527483153, 0.0003347157145944845 },
            { 0.5801830443098588, 0.2857740482736197, 0.04328879995600837, 0.02132226325753931, 0.04328879995600837, 0.02132226325753931, 0.003229877570552553, 0.001590903418873461 },
            { 0.2857740482736197, 0.5801830443098588, 0.02132226325753931, 0.04328879995600837, 0.02132226325753931, 0.04328879995600837, 0.001590903418873461, 0.003229877570552553 },
            { 0.06012499793871617, 0.8058320946447624, 0.004486065274831529, 0.06012499793871616, 0.004486065274831529, 0.06012499793871616, 0.0003347157145944845, 0.00448606527483153 },
            { 0.5801830443098587, 0.04328879995600837, 0.2857740482736197, 0.02132226325753932, 0.04328879995600838, 0.003229877570552553, 0.02132226325753932, 0.001590903418873461 },
            { 0.4177202262625758, 0.2057516180032913, 0.2057516180032913, 0.1013446935278677, 0.03116707302911426, 0.01535160449744667, 0.01535160449744667, 0.007561562178966105 },
            { 0.2057516180032913, 0.4177202262625758, 0.1013446935278677, 0.2057516180032913, 0.01535160449744667, 0.03116707302911426, 0.007561562178966105, 0.01535160449744667 },
            { 0.04328879995600837, 0.5801830443098587, 0.02132226325753932, 0.2857740482736197, 0.003229877570552553, 0.04328879995600838, 0.001590903418873461, 0.02132226325753932 },
            { 0.2857740482736197, 0.02132226325753932, 0.5801830443098587, 0.04328879995600837, 0.02132226325753932, 0.001590903418873461, 0.04328879995600838, 0.003229877570552553 },
            { 0.2057516180032913, 0.1013446935278677, 0.4177202262625758, 0.2057516180032913, 0.01535160449744667, 0.007561562178966105, 0.03116707302911426, 0.01535160449744667 },
            { 0.1013446935278677, 0.2057516180032913, 0.2057516180032913, 0.4177202262625758, 0.007561562178966105, 0.01535160449744667, 0.01535160449744667, 0.03116707302911426 },
            { 0.02132226325753932, 0.2857740482736197, 0.04328879995600837, 0.5801830443098587, 0.001590903418873461, 0.02132226325753932, 0.003229877570552553, 0.04328879995600838 },
            { 0.06012499793871616, 0.004486065274831529, 0.8058320946447624, 0.06012499793871617, 0.00448606527483153, 0.0003347157145944845, 0.06012499793871616, 0.004486065274831529 },
            { 0.04328879995600837, 0.02132226325753931, 0.5801830443098588, 0.2857740482736197, 0.003229877570552553, 0.001590903418873461, 0.04328879995600837, 0.02132226325753931 },
            { 0.02132226325753931, 0.04328879995600837, 0.2857740482736197, 0.5801830443098588, 0.001590903418873461, 0.003229877570552553, 0.02132226325753931, 0.04328879995600837 },
            { 0.004486065274831529, 0.06012499793871616, 0.06012499793871617, 0.8058320946447624, 0.0003347157145944845, 0.00448606527483153, 0.004486065274831529, 0.06012499793871616 },
            { 0.5801830443098587, 0.04328879995600837, 0.04328879995600838, 0.003229877570552553, 0.2857740482736197, 0.02132226325753932, 0.02132226325753932, 0.001590903418873461 },
            { 0.4177202262625758, 0.2057516180032913, 0.03116707302911426, 0.01535160449744667, 0.2057516180032913, 0.1013446935278677, 0.01535160449744667, 0.007561562178966105 },
            { 0.2057516180032913, 0.4177202262625758, 0.01535160449744667, 0.03116707302911426, 0.1013446935278677, 0.2057516180032913, 0.007561562178966105, 0.01535160449744667 },
            { 0.04328879995600837, 0.5801830443098587, 0.003229877570552553, 0.04328879995600838, 0.02132226325753932, 0.2857740482736197, 0.001590903418873461, 0.02132226325753932 },
            { 0.4177202262625758, 0.03116707302911426, 0.2057516180032913, 0.01535160449744667, 0.2057516180032913, 0.01535160449744667, 0.1013446935278677, 0.007561562178966105 },
            { 0.3007502358784333, 0.1481370634132568, 0.1481370634132568, 0.07296615908748122, 0.1481370634132568, 0.07296615908748122, 0.07296615908748122, 0.03594009661935264 },
            { 0.1481370634132568, 0.3007502358784333, 0.07296615908748122, 0.1481370634132568, 0.07296615908748122, 0.1481370634132568, 0.03594009661935264, 0.07296615908748122 },
            { 0.03116707302911426, 0.4177202262625758, 0.01535160449744667, 0.2057516180032913, 0.01535160449744667, 0.2057516180032913, 0.007561562178966105, 0.1013446935278677 },
            { 0.2057516180032913, 0.01535160449744667, 0.4177202262625758, 0.03116707302911426, 0.1013446935278677, 0.007561562178966105, 0.2057516180032913, 0.01535160449744667 },
            { 0.1481370634132568, 0.07296615908748122, 0.3007502358784333, 0.1481370634132568, 0.07296615908748122, 0.03594009661935264, 0.1481370634132568, 0.07296615908748122 },
            { 0.07296615908748122, 0.1481370634132568, 0.1481370634132568, 0.3007502358784333, 0.03594009661935264, 0.07296615908748122, 0.07296615908748122, 0.1481370634132568 },
            { 0.01535160449744667, 0.2057516180032913, 0.03116707302911426, 0.4177202262625758, 0.007561562178966105, 0.1013446935278677, 0.01535160449744667, 0.2057516180032913 },
            { 0.04328879995600838, 0.003229877570552553, 0.5801830443098587, 0.04328879995600837, 0.02132226325753932, 0.001590903418873461, 0.2857740482736197, 0.02132226325753932 },
            { 0.03116707302911426, 0.01535160449744667, 0.4177202262625758, 0.2057516180032913, 0.01535160449744667, 0.007561562178966105, 0.2057516180032913, 0.1013446935278677 },
            { 0.01535160449744667, 0.03116707302911426, 0.2057516180032913, 0.4177202262625758, 0.007561562178966105, 0.01535160449744667, 0.1013446935278677, 0.2057516180032913 },
            { 0.003229877570552553, 0.04328879995600838, 0.04328879995600837, 0.5801830443098587, 0.001590903418873461, 0.02132226325753932, 0.02132226325753932, 0.2857740482736197 },
            { 0.2857740482736197, 0.02132226325753932, 0.02132226325753932, 0.001590903418873461, 0.5801830443098587, 0.04328879995600837, 0.04328879995600838, 0.003229877570552553 },
            { 0.2057516180032913, 0.1013446935278677, 0.01535160449744667, 0.007561562178966105, 0.4177202262625758, 0.2057516180032913, 0.03116707302911426, 0.01535160449744667 },
            { 0.1013446935278677, 0.2057516180032913, 0.007561562178966105, 0.01535160449744667, 0.2057516180032913, 0.4177202262625758, 0.01535160449744667, 0.03116707302911426 },
            { 0.02132226325753932, 0.2857740482736197, 0.001590903418873461, 0.02132226325753932, 0.04328879995600837, 0.5801830443098587, 0.003229877570552553, 0.04328879995600838 },
            { 0.2057516180032913, 0.01535160449744667, 0.1013446935278677, 0.007561562178966105, 0.4177202262625758, 0.03116707302911426, 0.2057516180032913, 0.01535160449744667 },
            { 0.1481370634132568, 0.07296615908748122, 0.07296615908748122, 0.03594009661935264, 0.3007502358784333, 0.1481370634132568, 0.1481370634132568, 0.07296615908748122 },
            { 0.07296615908748122, 0.1481370634132568, 0.03594009661935264, 0.07296615908748122, 0.1481370634132568, 0.3007502358784333, 0.07296615908748122, 0.1481370634132568 },
            { 0.01535160449744667, 0.2057516180032913, 0.007561562178966105, 0.1013446935278677, 0.03116707302911426, 0.4177202262625758, 0.01535160449744667, 0.2057516180032913 },
            { 0.1013446935278677, 0.007561562178966105, 0.2057516180032913, 0.01535160449744667, 0.2057516180032913, 0.01535160449744667, 0.4177202262625758, 0.03116707302911426 },
            { 0.07296615908748122, 0.03594009661935264, 0.1481370634132568, 0.07296615908748122, 0.1481370634132568, 0.07296615908748122, 0.3007502358784333, 0.1481370634132568 },
            { 0.03594009661935264, 0.07296615908748122, 0.07296615908748122, 0.1481370634132568, 0.07296615908748122, 0.1481370634132568, 0.1481370634132568, 0.3007502358784333 },
            { 0.007561562178966105, 0.1013446935278677, 0.01535160449744667, 0.2057516180032913, 0.01535160449744667, 0.2057516180032913, 0.03116707302911426, 0.4177202262625758 },
            { 0.02132226325753932, 0.001590903418873461, 0.2857740482736197, 0.02132226325753932, 0.04328879995600838, 0.003229877570552553, 0.5801830443098587, 0.04328879995600837 },
            { 0.01535160449744667, 0.007561562178966105, 0.2057516180032913, 0.1013446935278677, 0.03116707302911426, 0.01535160449744667, 0.4177202262625758, 0.2057516180032913 },
            { 0.007561562178966105, 0.01535160449744667, 0.1013446935278677, 0.2057516180032913, 0.01535160449744667, 0.03116707302911426, 0.2057516180032913, 0.4177202262625758 },
            { 0.001590903418873461, 0.02132226325753932, 0.02132226325753932, 0.2857740482736197, 0.003229877570552553, 0.04328879995600838, 0.04328879995600837, 0.5801830443098587 },
            { 0.06012499793871616, 0.004486065274831529, 0.00448606527483153, 0.0003347157145944845, 0.8058320946447624, 0.06012499793871617, 0.06012499793871616, 0.004486065274831529 },
            { 0.04328879995600837, 0.02132226325753931, 0.003229877570552553, 0.001590903418873461, 0.5801830443098588, 0.2857740482736197, 0.04328879995600837, 0.02132226325753931 },
            { 0.02132226325753931, 0.04328879995600837, 0.001590903418873461, 0.003229877570552553, 0.2857740482736197, 0.5801830443098588, 0.02132226325753931, 0.04328879995600837 },
            { 0.004486065274831529, 0.06012499793871616, 0.0003347157145944845, 0.00448606527483153, 0.06012499793871617, 0.8058320946447624, 0.004486065274831529, 0.06012499793871616 },
            { 0.04328879995600838, 0.003229877570552553, 0.02132226325753932, 0.001590903418873461, 0.5801830443098587, 0.04328879995600837, 0.2857740482736197, 0.02132226325753932 },
            { 0.03116707302911426, 0.01535160449744667, 0.01535160449744667, 0.007561562178966105, 0.4177202262625758, 0.2057516180032913, 0.2057516180032913, 0.1013446935278677 },
            { 0.01535160449744667, 0.03116707302911426, 0.007561562178966105, 0.01535160449744667, 0.2057516180032913, 0.4177202262625758, 0.1013446935278677, 0.2057516180032913 },
            { 0.003229877570552553, 0.04328879995600838, 0.001590903418873461, 0.02132226325753932, 0.04328879995600837, 0.5801830443098587, 0.02132226325753932, 0.2857740482736197 },
            { 0.02132226325753932, 0.001590903418873461, 0.04328879995600838, 0.003229877570552553, 0.2857740482736197, 0.02132226325753932, 0.5801830443098587, 0.04328879995600837 },
            { 0.01535160449744667, 0.007561562178966105, 0.03116707302911426, 0.01535160449744667, 0.2057516180032913, 0.1013446935278677, 0.4177202262625758, 0.2057516180032913 },
            { 0.007561562178966105, 0.01535160449744667, 0.01535160449744667, 0.03116707302911426, 0.1013446935278677, 0.2057516180032913, 0.2057516180032913, 0.4177202262625758 },
            { 0.001590903418873461, 0.02132226325753932, 0.003229877570552553, 0.04328879995600838, 0.02132226325753932, 0.2857740482736197, 0.04328879995600837, 0.5801830443098587 },
            { 0.00448606527483153, 0.0003347157145944845, 0.06012499793871616, 0.004486065274831529, 0.06012499793871616, 0.004486065274831529, 0.8058320946447624, 0.06012499793871617 },
            { 0.003229877570552553, 0.001590903418873461, 0.04328879995600837, 0.02132226325753931, 0.04328879995600837, 0.02132226325753931, 0.5801830443098588, 0.2857740482736197 },
            { 0.001590903418873461, 0.003229877570552553, 0.02132226325753931, 0.04328879995600837, 0.02132226325753931, 0.04328879995600837, 0.2857740482736197, 0.5801830443098588 },
            { 0.0003347157145944845, 0.00448606527483153, 0.004486065274831529, 0.06012499793871616, 0.004486065274831529, 0.06012499793871616, 0.06012499793871617, 0.8058320946447624 } } };
    alignas(32) double BF0[27][27] = {};
    alignas(32) double BF1[27][27] = {};
    alignas(32) double BF2[27][27] = {};
    alignas(32) double BF3[27][27] = {};
    alignas(32) double BF4[27][27] = {};
    alignas(32) double BF5[27][27] = {};
    alignas(32) double BF6[27][27] = {};
    alignas(32) double BF7[27][27] = {};
    alignas(32) double BF8[27][27] = {};
    alignas(32) double BF9[27][27] = {};
    alignas(32) double BF10[27][8] = {};
    alignas(32) double BF11[27][8] = {};
    alignas(32) double BF12[27][8] = {};
    alignas(32) double BF13[27][8] = {};
    alignas(32) double BF14[27][8] = {};
    alignas(32) double BF15[27][8] = {};
    alignas(32) double BF16[27][8] = {};
    alignas(32) double BF17[27][8] = {};
    alignas(32) double BF18[27][8] = {};
    alignas(32) double BF19[8][27] = {};
    alignas(32) double BF20[8][27] = {};
    alignas(32) double BF21[8][27] = {};
    alignas(32) double BF22[8][27] = {};
    alignas(32) double BF23[8][27] = {};
    alignas(32) double BF24[8][27] = {};
    alignas(32) double BF25[8][27] = {};
    alignas(32) double BF26[8][27] = {};
    alignas(32) double BF27[8][27] = {};
    for (int iq = 0; iq < 64; ++iq)
    {
        // Quadrature loop body setup (num_points=64)
        // Unstructured varying computations for num_points=64
        const double J_c4 = coordinate_dofs[1] * FE37_C3_D010_Q64[0][iq][0] + coordinate_dofs[4] * FE37_C3_D010_Q64[0][iq][1] + coordinate_dofs[7] * FE37_C3_D010_Q64[0][iq][2] + coordinate_dofs[10] * FE37_C3_D010_Q64[0][iq][3] + coordinate_dofs[13] * FE37_C3_D010_Q64[0][iq][4] + coordinate_dofs[16] * FE37_C3_D010_Q64[0][iq][5] + coordinate_dofs[19] * FE37_C3_D010_Q64[0][iq][6] + coordinate_dofs[22] * FE37_C3_D010_Q64[0][iq][7];
        const double J_c8 = coordinate_dofs[2] * FE37_C3_D001_Q64[0][iq][0] + coordinate_dofs[5] * FE37_C3_D001_Q64[0][iq][1] + coordinate_dofs[8] * FE37_C3_D001_Q64[0][iq][2] + coordinate_dofs[11] * FE37_C3_D001_Q64[0][iq][3] + coordinate_dofs[14] * FE37_C3_D001_Q64[0][iq][4] + coordinate_dofs[17] * FE37_C3_D001_Q64[0][iq][5] + coordinate_dofs[20] * FE37_C3_D001_Q64[0][iq][6] + coordinate_dofs[23] * FE37_C3_D001_Q64[0][iq][7];
        const double J_c5 = coordinate_dofs[1] * FE37_C3_D001_Q64[0][iq][0] + coordinate_dofs[4] * FE37_C3_D001_Q64[0][iq][1] + coordinate_dofs[7] * FE37_C3_D001_Q64[0][iq][2] + coordinate_dofs[10] * FE37_C3_D001_Q64[0][iq][3] + coordinate_dofs[13] * FE37_C3_D001_Q64[0][iq][4] + coordinate_dofs[16] * FE37_C3_D001_Q64[0][iq][5] + coordinate_dofs[19] * FE37_C3_D001_Q64[0][iq][6] + coordinate_dofs[22] * FE37_C3_D001_Q64[0][iq][7];
        const double J_c7 = coordinate_dofs[2] * FE37_C3_D010_Q64[0][iq][0] + coordinate_dofs[5] * FE37_C3_D010_Q64[0][iq][1] + coordinate_dofs[8] * FE37_C3_D010_Q64[0][iq][2] + coordinate_dofs[11] * FE37_C3_D010_Q64[0][iq][3] + coordinate_dofs[14] * FE37_C3_D010_Q64[0][iq][4] + coordinate_dofs[17] * FE37_C3_D010_Q64[0][iq][5] + coordinate_dofs[20] * FE37_C3_D010_Q64[0][iq][6] + coordinate_dofs[23] * FE37_C3_D010_Q64[0][iq][7];
        const double J_c0 = coordinate_dofs[0] * FE37_C3_D100_Q64[0][iq][0] + coordinate_dofs[3] * FE37_C3_D100_Q64[0][iq][1] + coordinate_dofs[6] * FE37_C3_D100_Q64[0][iq][2] + coordinate_dofs[9] * FE37_C3_D100_Q64[0][iq][3] + coordinate_dofs[12] * FE37_C3_D100_Q64[0][iq][4] + coordinate_dofs[15] * FE37_C3_D100_Q64[0][iq][5] + coordinate_dofs[18] * FE37_C3_D100_Q64[0][iq][6] + coordinate_dofs[21] * FE37_C3_D100_Q64[0][iq][7];
        const double J_c1 = coordinate_dofs[0] * FE37_C3_D010_Q64[0][iq][0] + coordinate_dofs[3] * FE37_C3_D010_Q64[0][iq][1] + coordinate_dofs[6] * FE37_C3_D010_Q64[0][iq][2] + coordinate_dofs[9] * FE37_C3_D010_Q64[0][iq][3] + coordinate_dofs[12] * FE37_C3_D010_Q64[0][iq][4] + coordinate_dofs[15] * FE37_C3_D010_Q64[0][iq][5] + coordinate_dofs[18] * FE37_C3_D010_Q64[0][iq][6] + coordinate_dofs[21] * FE37_C3_D010_Q64[0][iq][7];
        const double J_c6 = coordinate_dofs[2] * FE37_C3_D100_Q64[0][iq][0] + coordinate_dofs[5] * FE37_C3_D100_Q64[0][iq][1] + coordinate_dofs[8] * FE37_C3_D100_Q64[0][iq][2] + coordinate_dofs[11] * FE37_C3_D100_Q64[0][iq][3] + coordinate_dofs[14] * FE37_C3_D100_Q64[0][iq][4] + coordinate_dofs[17] * FE37_C3_D100_Q64[0][iq][5] + coordinate_dofs[20] * FE37_C3_D100_Q64[0][iq][6] + coordinate_dofs[23] * FE37_C3_D100_Q64[0][iq][7];
        const double J_c3 = coordinate_dofs[1] * FE37_C3_D100_Q64[0][iq][0] + coordinate_dofs[4] * FE37_C3_D100_Q64[0][iq][1] + coordinate_dofs[7] * FE37_C3_D100_Q64[0][iq][2] + coordinate_dofs[10] * FE37_C3_D100_Q64[0][iq][3] + coordinate_dofs[13] * FE37_C3_D100_Q64[0][iq][4] + coordinate_dofs[16] * FE37_C3_D100_Q64[0][iq][5] + coordinate_dofs[19] * FE37_C3_D100_Q64[0][iq][6] + coordinate_dofs[22] * FE37_C3_D100_Q64[0][iq][7];
        const double J_c2 = coordinate_dofs[0] * FE37_C3_D001_Q64[0][iq][0] + coordinate_dofs[3] * FE37_C3_D001_Q64[0][iq][1] + coordinate_dofs[6] * FE37_C3_D001_Q64[0][iq][2] + coordinate_dofs[9] * FE37_C3_D001_Q64[0][iq][3] + coordinate_dofs[12] * FE37_C3_D001_Q64[0][iq][4] + coordinate_dofs[15] * FE37_C3_D001_Q64[0][iq][5] + coordinate_dofs[18] * FE37_C3_D001_Q64[0][iq][6] + coordinate_dofs[21] * FE37_C3_D001_Q64[0][iq][7];
        alignas(32) double sv64[99];
        sv64[0] = J_c4 * J_c8;
        sv64[1] = J_c5 * J_c7;
        sv64[2] = sv64[0] + -1 * sv64[1];
        sv64[3] = J_c0 * sv64[2];
        sv64[4] = J_c5 * J_c6;
        sv64[5] = J_c3 * J_c8;
        sv64[6] = sv64[4] + -1 * sv64[5];
        sv64[7] = J_c1 * sv64[6];
        sv64[8] = sv64[3] + sv64[7];
        sv64[9] = J_c3 * J_c7;
        sv64[10] = J_c4 * J_c6;
        sv64[11] = sv64[9] + -1 * sv64[10];
        sv64[12] = J_c2 * sv64[11];
        sv64[13] = sv64[8] + sv64[12];
        sv64[14] = sv64[2] / sv64[13];
        sv64[15] = J_c3 * (-1 * J_c8);
        sv64[16] = sv64[4] + sv64[15];
        sv64[17] = sv64[16] / sv64[13];
        sv64[18] = sv64[11] / sv64[13];
        sv64[19] = J_c2 * J_c7;
        sv64[20] = J_c8 * (-1 * J_c1);
        sv64[21] = sv64[19] + sv64[20];
        sv64[22] = sv64[21] / sv64[13];
        sv64[23] = J_c0 * J_c8;
        sv64[24] = J_c6 * (-1 * J_c2);
        sv64[25] = sv64[23] + sv64[24];
        sv64[26] = sv64[25] / sv64[13];
        sv64[27] = J_c1 * J_c6;
        sv64[28] = J_c0 * J_c7;
        sv64[29] = sv64[27] + -1 * sv64[28];
        sv64[30] = sv64[29] / sv64[13];
        sv64[31] = J_c1 * J_c5;
        sv64[32] = J_c2 * J_c4;
        sv64[33] = sv64[31] + -1 * sv64[32];
        sv64[34] = sv64[33] / sv64[13];
        sv64[35] = J_c2 * J_c3;
        sv64[36] = J_c0 * J_c5;
        sv64[37] = sv64[35] + -1 * sv64[36];
        sv64[38] = sv64[37] / sv64[13];
        sv64[39] = J_c0 * J_c4;
        sv64[40] = J_c1 * J_c3;
        sv64[41] = sv64[39] + -1 * sv64[40];
        sv64[42] = sv64[41] / sv64[13];
        sv64[43] = sv64[14] * sv64[14];
        sv64[44] = sv64[14] * sv64[17];
        sv64[45] = sv64[18] * sv64[14];
        sv64[46] = sv64[17] * sv64[17];
        sv64[47] = sv64[18] * sv64[17];
        sv64[48] = sv64[18] * sv64[18];
        sv64[49] = sv64[22] * sv64[22];
        sv64[50] = sv64[22] * sv64[26];
        sv64[51] = sv64[22] * sv64[30];
        sv64[52] = sv64[26] * sv64[26];
        sv64[53] = sv64[26] * sv64[30];
        sv64[54] = sv64[30] * sv64[30];
        sv64[55] = sv64[49] + sv64[43];
        sv64[56] = sv64[50] + sv64[44];
        sv64[57] = sv64[51] + sv64[45];
        sv64[58] = sv64[52] + sv64[46];
        sv64[59] = sv64[53] + sv64[47];
        sv64[60] = sv64[48] + sv64[54];
        sv64[61] = sv64[34] * sv64[34];
        sv64[62] = sv64[34] * sv64[38];
        sv64[63] = sv64[42] * sv64[34];
        sv64[64] = sv64[38] * sv64[38];
        sv64[65] = sv64[42] * sv64[38];
        sv64[66] = sv64[42] * sv64[42];
        sv64[67] = sv64[55] + sv64[61];
        sv64[68] = sv64[56] + sv64[62];
        sv64[69] = sv64[57] + sv64[63];
        sv64[70] = sv64[58] + sv64[64];
        sv64[71] = sv64[59] + sv64[65];
        sv64[72] = sv64[60] + sv64[66];
        sv64[73] = std::abs(sv64[13]);
        sv64[74] = sv64[14] * sv64[73];
        sv64[75] = sv64[17] * sv64[73];
        sv64[76] = sv64[18] * sv64[73];
        sv64[77] = sv64[22] * sv64[73];
        sv64[78] = sv64[26] * sv64[73];
        sv64[79] = sv64[30] * sv64[73];
        sv64[80] = sv64[34] * sv64[73];
        sv64[81] = sv64[38] * sv64[73];
        sv64[82] = sv64[42] * sv64[73];
        sv64[83] = 0.01 * sv64[67] * sv64[73];
        sv64[84] = 0.01 * sv64[68] * sv64[73];
        sv64[85] = 0.01 * sv64[69] * sv64[73];
        sv64[86] = 0.01 * sv64[70] * sv64[73];
        sv64[87] = 0.01 * sv64[71] * sv64[73];
        sv64[88] = 0.01 * sv64[72] * sv64[73];
        sv64[89] = -1 * sv64[14] * sv64[73];
        sv64[90] = -1 * sv64[17] * sv64[73];
        sv64[91] = -1 * sv64[18] * sv64[73];
        sv64[92] = -1 * sv64[22] * sv64[73];
        sv64[93] = -1 * sv64[26] * sv64[73];
        sv64[94] = -1 * sv64[30] * sv64[73];
        sv64[95] = -1 * sv64[34] * sv64[73];
        sv64[96] = -1 * sv64[38] * sv64[73];
        sv64[97] = -1 * sv64[42] * sv64[73];
        sv64[98] = 1.0 / w[0][0] * sv64[73];
        const double fw0 = sv64[98] * weights64[iq];
        alignas(32) double TF0[27];
        for (int i = 0; i < 27; ++i)
            TF0[i] = fw0 * FE35_C0_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 27; ++j)
                BF0[i][j] += TF0[i] * FE35_C0_Q64[0][iq][j];
        const double fw1 = sv64[83] * weights64[iq];
        alignas(32) double TF1[27];
        for (int i = 0; i < 27; ++i)
            TF1[i] = fw1 * FE35_C0_D100_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 27; ++j)
                BF1[i][j] += TF1[i] * FE35_C0_D100_Q64[0][iq][j];
        const double fw2 = sv64[84] * weights64[iq];
        alignas(32) double TF2[27];
        for (int i = 0; i < 27; ++i)
            TF2[i] = fw2 * FE35_C0_D100_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 27; ++j)
                BF2[i][j] += TF2[i] * FE35_C0_D010_Q64[0][iq][j];
        const double fw3 = sv64[85] * weights64[iq];
        alignas(32) double TF3[27];
        for (int i = 0; i < 27; ++i)
            TF3[i] = fw3 * FE35_C0_D100_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 27; ++j)
                BF3[i][j] += TF3[i] * FE35_C0_D001_Q64[0][iq][j];
        alignas(32) double TF4[27];
        for (int i = 0; i < 27; ++i)
            TF4[i] = fw2 * FE35_C0_D010_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 27; ++j)
                BF4[i][j] += TF4[i] * FE35_C0_D100_Q64[0][iq][j];
        const double fw4 = sv64[86] * weights64[iq];
        alignas(32) double TF5[27];
        for (int i = 0; i < 27; ++i)
            TF5[i] = fw4 * FE35_C0_D010_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 27; ++j)
                BF5[i][j] += TF5[i] * FE35_C0_D010_Q64[0][iq][j];
        const double fw5 = sv64[87] * weights64[iq];
        alignas(32) double TF6[27];
        for (int i = 0; i < 27; ++i)
            TF6[i] = fw5 * FE35_C0_D010_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 27; ++j)
                BF6[i][j] += TF6[i] * FE35_C0_D001_Q64[0][iq][j];
        alignas(32) double TF7[27];
        for (int i = 0; i < 27; ++i)
            TF7[i] = fw3 * FE35_C0_D001_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 27; ++j)
                BF7[i][j] += TF7[i] * FE35_C0_D100_Q64[0][iq][j];
        alignas(32) double TF8[27];
        for (int i = 0; i < 27; ++i)
            TF8[i] = fw5 * FE35_C0_D001_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 27; ++j)
                BF8[i][j] += TF8[i] * FE35_C0_D010_Q64[0][iq][j];
        const double fw6 = sv64[88] * weights64[iq];
        alignas(32) double TF9[27];
        for (int i = 0; i < 27; ++i)
            TF9[i] = fw6 * FE35_C0_D001_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 27; ++j)
                BF9[i][j] += TF9[i] * FE35_C0_D001_Q64[0][iq][j];
        const double fw7 = sv64[89] * weights64[iq];
        alignas(32) double TF10[27];
        for (int i = 0; i < 27; ++i)
            TF10[i] = fw7 * FE35_C0_D100_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 8; ++j)
                BF10[i][j] += TF10[i] * FE37_C3_Q64[0][iq][j];
        const double fw8 = sv64[90] * weights64[iq];
        alignas(32) double TF11[27];
        for (int i = 0; i < 27; ++i)
            TF11[i] = fw8 * FE35_C0_D010_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 8; ++j)
                BF11[i][j] += TF11[i] * FE37_C3_Q64[0][iq][j];
        const double fw9 = sv64[91] * weights64[iq];
        alignas(32) double TF12[27];
        for (int i = 0; i < 27; ++i)
            TF12[i] = fw9 * FE35_C0_D001_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 8; ++j)
                BF12[i][j] += TF12[i] * FE37_C3_Q64[0][iq][j];
        const double fw10 = sv64[92] * weights64[iq];
        alignas(32) double TF13[27];
        for (int i = 0; i < 27; ++i)
            TF13[i] = fw10 * FE35_C0_D100_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 8; ++j)
                BF13[i][j] += TF13[i] * FE37_C3_Q64[0][iq][j];
        const double fw11 = sv64[93] * weights64[iq];
        alignas(32) double TF14[27];
        for (int i = 0; i < 27; ++i)
            TF14[i] = fw11 * FE35_C0_D010_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 8; ++j)
                BF14[i][j] += TF14[i] * FE37_C3_Q64[0][iq][j];
        const double fw12 = sv64[94] * weights64[iq];
        alignas(32) double TF15[27];
        for (int i = 0; i < 27; ++i)
            TF15[i] = fw12 * FE35_C0_D001_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 8; ++j)
                BF15[i][j] += TF15[i] * FE37_C3_Q64[0][iq][j];
        const double fw13 = sv64[95] * weights64[iq];
        alignas(32) double TF16[27];
        for (int i = 0; i < 27; ++i)
            TF16[i] = fw13 * FE35_C0_D100_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 8; ++j)
                BF16[i][j] += TF16[i] * FE37_C3_Q64[0][iq][j];
        const double fw14 = sv64[96] * weights64[iq];
        alignas(32) double TF17[27];
        for (int i = 0; i < 27; ++i)
            TF17[i] = fw14 * FE35_C0_D010_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 8; ++j)
                BF17[i][j] += TF17[i] * FE37_C3_Q64[0][iq][j];
        const double fw15 = sv64[97] * weights64[iq];
        alignas(32) double TF18[27];
        for (int i = 0; i < 27; ++i)
            TF18[i] = fw15 * FE35_C0_D001_Q64[0][iq][i];
        for (int i = 0; i < 27; ++i)
            for (int j = 0; j < 8; ++j)
                BF18[i][j] += TF18[i] * FE37_C3_Q64[0][iq][j];
        const double fw16 = sv64[74] * weights64[iq];
        alignas(32) double TF19[8];
        for (int i = 0; i < 8; ++i)
            TF19[i] = fw16 * FE37_C3_Q64[0][iq][i];
        for (int i = 0; i < 8; ++i)
            for (int j = 0; j < 27; ++j)
                BF19[i][j] += TF19[i] * FE35_C0_D100_Q64[0][iq][j];
        const double fw17 = sv64[75] * weights64[iq];
        alignas(32) double TF20[8];
        for (int i = 0; i < 8; ++i)
            TF20[i] = fw17 * FE37_C3_Q64[0][iq][i];
        for (int i = 0; i < 8; ++i)
            for (int j = 0; j < 27; ++j)
                BF20[i][j] += TF20[i] * FE35_C0_D010_Q64[0][iq][j];
        const double fw18 = sv64[76] * weights64[iq];
        alignas(32) double TF21[8];
        for (int i = 0; i < 8; ++i)
            TF21[i] = fw18 * FE37_C3_Q64[0][iq][i];
        for (int i = 0; i < 8; ++i)
            for (int j = 0; j < 27; ++j)
                BF21[i][j] += TF21[i] * FE35_C0_D001_Q64[0][iq][j];
        const double fw19 = sv64[77] * weights64[iq];
        alignas(32) double TF22[8];
        for (int i = 0; i < 8; ++i)
            TF22[i] = fw19 * FE37_C3_Q64[0][iq][i];
        for (int i = 0; i < 8; ++i)
            for (int j = 0; j < 27; ++j)
                BF22[i][j] += TF22[i] * FE35_C0_D100_Q64[0][iq][j];
        const double fw20 = sv64[78] * weights64[iq];
        alignas(32) double TF23[8];
        for (int i = 0; i < 8; ++i)
            TF23[i] = fw20 * FE37_C3_Q64[0][iq][i];
        for (int i = 0; i < 8; ++i)
            for (int j = 0; j < 27; ++j)
                BF23[i][j] += TF23[i] * FE35_C0_D010_Q64[0][iq][j];
        const double fw21 = sv64[79] * weights64[iq];
        alignas(32) double TF24[8];
        for (int i = 0; i < 8; ++i)
            TF24[i] = fw21 * FE37_C3_Q64[0][iq][i];
        for (int i = 0; i < 8; ++i)
            for (int j = 0; j < 27; ++j)
                BF24[i][j] += TF24[i] * FE35_C0_D001_Q64[0][iq][j];
        const double fw22 = sv64[80] * weights64[iq];
        alignas(32) double TF25[8];
        for (int i = 0; i < 8; ++i)
            TF25[i] = fw22 * FE37_C3_Q64[0][iq][i];
        for (int i = 0; i < 8; ++i)
            for (int j = 0; j < 27; ++j)
                BF25[i][j] += TF25[i] * FE35_C0_D100_Q64[0][iq][j];
        const double fw23 = sv64[81] * weights64[iq];
        alignas(32) double TF26[8];
        for (int i = 0; i < 8; ++i)
            TF26[i] = fw23 * FE37_C3_Q64[0][iq][i];
        for (int i = 0; i < 8; ++i)
            for (int j = 0; j < 27; ++j)
                BF26[i][j] += TF26[i] * FE35_C0_D010_Q64[0][iq][j];
        const double fw24 = sv64[82] * weights64[iq];
        alignas(32) double TF27[8];
        for (int i = 0; i < 8; ++i)
            TF27[i] = fw24 * FE37_C3_Q64[0][iq][i];
        for (int i = 0; i < 8; ++i)
            for (int j = 0; j < 27; ++j)
                BF27[i][j] += TF27[i] * FE35_C0_D001_Q64[0][iq][j];
    }
    std::fill_n(A, 7921, 0.0);
    for (int i = 0; i < 27; ++i)
        for (int j = 0; j < 27; ++j)
            A[89 * i + j] += BF0[i][j] + BF1[i][j] + BF2[i][j] + BF3[i][j] + BF4[i][j] + BF5[i][j] + BF6[i][j] + BF7[i][j] + BF8[i][j] + BF9[i][j];
    for (int i = 0; i < 27; ++i)
        for (int j = 0; j < 8; ++j)
            A[89 * i + (j + 81)] += BF10[i][j] + BF11[i][j] + BF12[i][j];
    for (int i = 0; i < 27; ++i)
        for (int j = 0; j < 27; ++j)
            A[89 * (i + 27) + (j + 27)] += BF0[i][j] + BF1[i][j] + BF2[i][j] + BF3[i][j] + BF4[i][j] + BF5[i][j] + BF6[i][j] + BF7[i][j] + BF8[i][j] + BF9[i][j];
    for (int i = 0; i < 27; ++i)
        for (int j = 0; j < 8; ++j)
            A[89 * (i + 27) + (j + 81)] += BF13[i][j] + BF14[i][j] + BF15[i][j];
    for (int i = 0; i < 27; ++i)
        for (int j = 0; j < 27; ++j)
            A[89 * (i + 54) + (j + 54)] += BF0[i][j] + BF1[i][j] + BF2[i][j] + BF3[i][j] + BF4[i][j] + BF5[i][j] + BF6[i][j] + BF7[i][j] + BF8[i][j] + BF9[i][j];
    for (int i = 0; i < 27; ++i)
        for (int j = 0; j < 8; ++j)
            A[89 * (i + 54) + (j + 81)] += BF16[i][j] + BF17[i][j] + BF18[i][j];
    for (int i = 0; i < 8; ++i)
        for (int j = 0; j < 27; ++j)
            A[89 * (i + 81) + j] += BF19[i][j] + BF20[i][j] + BF21[i][j];
    for (int i = 0; i < 8; ++i)
        for (int j = 0; j < 27; ++j)
            A[89 * (i + 81) + (j + 27)] += BF22[i][j] + BF23[i][j] + BF24[i][j];
    for (int i = 0; i < 8; ++i)
        for (int j = 0; j < 27; ++j)
            A[89 * (i + 81) + (j + 54)] += BF25[i][j] + BF26[i][j] + BF27[i][j];
  }

};


class navierstokes_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  navierstokes_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~navierstokes_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 9
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 7
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           7
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // 
    // and the following integral 1 metadata:
    // 
    // estimated_polynomial_degree: 8
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           9
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights64[64] = { 0.005261434686316424, 0.009863939474383809, 0.009863939474383809, 0.005261434686316424, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.005261434686316424, 0.009863939474383809, 0.009863939474383809, 0.005261434686316424, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.01849254200709766, 0.03466912086923913, 0.03466912086923913, 0.01849254200709766, 0.01849254200709766, 0.03466912086923913, 0.03466912086923913, 0.01849254200709766, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.01849254200709766, 0.03466912086923913, 0.03466912086923913, 0.01849254200709766, 0.01849254200709766, 0.03466912086923913, 0.03466912086923913, 0.01849254200709766, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.005261434686316424, 0.009863939474383809, 0.009863939474383809, 0.005261434686316424, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.009863939474383809, 0.01849254200709766, 0.01849254200709766, 0.009863939474383809, 0.005261434686316424, 0.009863939474383809, 0.009863939474383809, 0.005261434686316424 };
    alignas(32) static const double weights125[125] = { 0.001662467052579082, 0.003358438595671481, 0.003991775919106037, 0.003358438595671481, 0.001662467052579082, 0.003358438595671481, 0.006784561404328519, 0.008064, 0.006784561404328519, 0.003358438595671481, 0.003991775919106037, 0.008064, 0.009584716258668153, 0.008064, 0.003991775919106037, 0.003358438595671481, 0.006784561404328519, 0.008064, 0.006784561404328519, 0.003358438595671481, 0.001662467052579082, 0.003358438595671481, 0.003991775919106038, 0.003358438595671481, 0.001662467052579082, 0.003358438595671481, 0.006784561404328519, 0.008064, 0.006784561404328519, 0.003358438595671481, 0.006784561404328519, 0.01370585530681735, 0.01629051763370603, 0.01370585530681735, 0.00678456140432852, 0.008064, 0.01629051763370603, 0.0193625978702756, 0.01629051763370603, 0.008064000000000002, 0.006784561404328519, 0.01370585530681735, 0.01629051763370603, 0.01370585530681735, 0.00678456140432852, 0.003358438595671481, 0.00678456140432852, 0.008064000000000002, 0.00678456140432852, 0.003358438595671481, 0.003991775919106037, 0.008064, 0.009584716258668153, 0.008064, 0.003991775919106037, 0.008064, 0.01629051763370603, 0.0193625978702756, 0.01629051763370603, 0.008064000000000002, 0.009584716258668155, 0.0193625978702756, 0.02301401371742113, 0.0193625978702756, 0.009584716258668155, 0.008064, 0.01629051763370603, 0.0193625978702756, 0.01629051763370603, 0.008064000000000002, 0.003991775919106038, 0.008064000000000002, 0.009584716258668156, 0.008064000000000002, 0.003991775919106038, 0.003358438595671481, 0.006784561404328519, 0.008064, 0.006784561404328519, 0.003358438595671481, 0.006784561404328519, 0.01370585530681735, 0.01629051763370603, 0.01370585530681735, 0.00678456140432852, 0.008064, 0.01629051763370603, 0.0193625978702756, 0.01629051763370603, 0.008064000000000002, 0.006784561404328519, 0.01370585530681735, 0.01629051763370603, 0.01370585530681735, 0.00678456140432852, 0.003358438595671481, 0.00678456140432852, 0.008064000000000002, 0.00678456140432852, 0.003358438595671481, 0.001662467052579082, 0.003358438595671481, 0.003991775919106038, 0.003358438595671481, 0.001662467052579082, 0.003358438595671481, 0.00678456140432852, 0.008064000000000002, 0.00678456140432852, 0.003358438595671481, 0.003991775919106038, 0.008064000000000002, 0.009584716258668156, 0.008064000000000002, 0.003991775919106038, 0.003358438595671481, 0.00678456140432852, 0.008064000000000002, 0.00678456140432852, 0.003358438595671481, 0.001662467052579082, 0.003358438595671482, 0.003991775919106038, 0.003358438595671482, 0.001662467052579082 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE12_C0_D001_Q125[1][125][27] =
        { { { -2.097816119650776, -0.6059613432438324, 2.703777462894609, 0.1032522885798695, 0.0298247758203293, -0.1330770644001988, -0.4343893376576197, -0.1254748421809385, 0.5598641798385582, 0.1032522885798695, 0.0298247758203293, -0.1330770644001988, -0.00508196833703203, -0.001467943892214536, 0.006549912229246566, 0.02138018333814184, 0.006175738899621264, -0.02755592223776311, -0.4343893376576197, -0.1254748421809385, 0.5598641798385582, 0.02138018333814184, 0.006175738899621264, -0.02755592223776311, -0.08994787241030325, -0.02598174981930525, 0.1159296222296085 },
            { -1.549245400433187, -0.0573906240262432, 1.606636024459431, 0.07625221851817592, 0.00282470575863575, -0.07907692427681168, -0.3207982229993143, -0.01188372752263308, 0.3326819505219474, 0.07625221851817592, 0.00282470575863575, -0.07907692427681168, -0.003753053471914698, -0.0001390290270972033, 0.003892082499011902, 0.01578934892661065, 0.0005849044880900763, -0.01637425341470073, -0.3207982229993143, -0.01188372752263308, 0.3326819505219474, 0.01578934892661065, 0.0005849044880900763, -0.01637425341470073, -0.06642685519720924, -0.002460732606211241, 0.06888758780342048 },
            { -0.745927388203472, 0.745927388203472, 0.0, 0.03671375637977008, -0.03671375637977008, 0.0, -0.1544572477383406, 0.1544572477383406, 0.0, 0.03671375637977008, -0.03671375637977008, 0.0, -0.001807012222408748, 0.001807012222408748, 0.0, 0.00760222221926029, -0.00760222221926029, 0.0, -0.1544572477383406, 0.1544572477383406, 0.0, 0.00760222221926029, -0.00760222221926029, 0.0, -0.031983061295499, 0.031983061295499, 0.0 },
            { 0.05739062402624292, 1.549245400433187, -1.60663602445943, -0.002824705758635737, -0.0762522185181759, 0.07907692427681165, 0.01188372752263302, 0.3207982229993142, -0.3326819505219473, -0.002824705758635737, -0.0762522185181759, 0.07907692427681165, 0.0001390290270972026, 0.003753053471914698, -0.003892082499011901, -0.0005849044880900735, -0.01578934892661065, 0.01637425341470073, 0.01188372752263302, 0.3207982229993142, -0.3326819505219473, -0.0005849044880900735, -0.01578934892661065, 0.01637425341470073, 0.002460732606211229, 0.06642685519720923, -0.06888758780342046 },
            { 0.6059613432438322, 2.097816119650776, -2.703777462894609, -0.02982477582032929, -0.1032522885798695, 0.1330770644001987, 0.1254748421809384, 0.4343893376576197, -0.559864179838558, -0.02982477582032929, -0.1032522885798695, 0.1330770644001987, 0.001467943892214535, 0.00508196833703203, -0.006549912229246564, -0.006175738899621261, -0.02138018333814184, 0.0275559222377631, 0.1254748421809384, 0.4343893376576197, -0.559864179838558, -0.006175738899621261, -0.02138018333814184, 0.0275559222377631, 0.02598174981930524, 0.08994787241030325, -0.1159296222296085 },
            { -1.006094880058081, -0.2906139385811501, 1.296708818639232, 0.3018218569861813, 0.08718227311082938, -0.3890041300970107, -1.724680145656626, -0.4981797441341207, 2.222859889790747, 0.04951892490547711, 0.01430371040180041, -0.06382263530727753, -0.01485535228055981, -0.004291019187986254, 0.01914637146854606, 0.08488693095606197, 0.02451987961392188, -0.1094068105699839, -0.2083294548436904, -0.0601766737855714, 0.2685061286292618, 0.06249746835230043, 0.01805260695508588, -0.08055007530738631, -0.357125040238391, -0.1031567862701369, 0.4602818265085279 },
            { -0.7430049996893134, -0.02752405821238214, 0.7705290579016957, 0.2228966205884076, 0.008257036713055683, -0.2311536573014633, -1.27368302581342, -0.04718262429091406, 1.320865650104334, 0.03656991951085679, 0.001354705007180087, -0.03792462451803688, -0.01097073569837149, -0.0004064026057979417, 0.01137713830416944, 0.06268933016038657, 0.002322278818246478, -0.06501160897863306, -0.1538521163356632, -0.005699335277544149, 0.1595514516132074, 0.04615462455290811, 0.001709763155693549, -0.04786438770860166, -0.2637382374871577, -0.00976998351890364, 0.2735082210060614 },
            { -0.3577404707384657, 0.3577404707384657, 0.0, 0.107319791937676, -0.107319791937676, 0.0, -0.6132502007612528, 0.6132502007612528, 0.0, 0.01760760725183835, -0.01760760725183835, 0.0, -0.005282166546286776, 0.005282166546286776, 0.0, 0.03018352567107005, -0.03018352567107005, 0.0, -0.07407639052905952, 0.07407639052905952, 0.0, 0.02222243069860728, -0.02222243069860728, 0.0, -0.1269841269841271, 0.1269841269841271, 0.0 },
            { 0.02752405821238201, 0.7430049996893133, -0.7705290579016953, -0.008257036713055643, -0.2228966205884076, 0.2311536573014632, 0.04718262429091383, 1.273683025813419, -1.320865650104333, -0.00135470500718008, -0.03656991951085679, 0.03792462451803687, 0.0004064026057979397, 0.01097073569837149, -0.01137713830416943, -0.002322278818246467, -0.06268933016038655, 0.06501160897863303, 0.005699335277544121, 0.1538521163356631, -0.1595514516132073, -0.001709763155693541, -0.04615462455290809, 0.04786438770860164, 0.009769983518903591, 0.2637382374871577, -0.2735082210060613 },
            { 0.29061393858115, 1.006094880058081, -1.296708818639231, -0.08718227311082934, -0.3018218569861813, 0.3890041300970106, 0.4981797441341205, 1.724680145656626, -2.222859889790747, -0.0143037104018004, -0.04951892490547711, 0.0638226353072775, 0.004291019187986253, 0.01485535228055981, -0.01914637146854605, -0.02451987961392187, -0.08488693095606197, 0.1094068105699838, 0.06017667378557137, 0.2083294548436904, -0.2685061286292618, -0.01805260695508587, -0.06249746835230043, 0.0805500753073863, 0.1031567862701369, 0.357125040238391, -0.4602818265085278 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.428953168728527, -0.7016114096044416, 3.130564578332968, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1195505035809793, 0.03453257082773603, -0.1540830744087153, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.502957026729781, -0.1452808531006224, 0.6482378798304035 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.793791404914326, -0.06644964579024051, 1.860241050704566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08828851397287188, 0.003270581219628623, -0.09155909519250051, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.3714357292699129, -0.01375955564075424, 0.3851952849106671 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8636708795620426, 0.8636708795620426, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04250896637662162, -0.04250896637662162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1788380868145793, 0.1788380868145793, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06644964579024019, 1.793791404914325, -1.860241050704565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.003270581219628607, -0.08828851397287185, 0.09155909519250047, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01375955564075417, 0.3714357292699128, -0.385195284910667 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7016114096044412, 2.428953168728527, -3.130564578332967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03453257082773602, -0.1195505035809793, 0.1540830744087153, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1452808531006224, 0.502957026729781, -0.6482378798304034 },
            { 0.3018218569861813, 0.08718227311082938, -0.3890041300970107, -1.006094880058081, -0.29061393858115, 1.296708818639231, -1.724680145656627, -0.4981797441341209, 2.222859889790748, -0.01485535228055981, -0.004291019187986254, 0.01914637146854606, 0.04951892490547709, 0.0143037104018004, -0.0638226353072775, 0.08488693095606199, 0.02451987961392189, -0.1094068105699839, 0.06249746835230043, 0.01805260695508588, -0.08055007530738631, -0.2083294548436903, -0.06017667378557136, 0.2685061286292617, -0.3571250402383911, -0.103156786270137, 0.4602818265085282 },
            { 0.2228966205884076, 0.008257036713055683, -0.2311536573014633, -0.7430049996893131, -0.02752405821238213, 0.7705290579016953, -1.27368302581342, -0.04718262429091407, 1.320865650104334, -0.01097073569837149, -0.0004064026057979417, 0.01137713830416944, 0.03656991951085678, 0.001354705007180086, -0.03792462451803687, 0.06268933016038659, 0.002322278818246479, -0.06501160897863308, 0.04615462455290811, 0.001709763155693549, -0.04786438770860166, -0.1538521163356631, -0.005699335277544145, 0.1595514516132073, -0.2637382374871579, -0.009769983518903643, 0.2735082210060615 },
            { 0.107319791937676, -0.107319791937676, 0.0, -0.3577404707384655, 0.3577404707384655, 0.0, -0.613250200761253, 0.613250200761253, 0.0, -0.005282166546286776, 0.005282166546286776, 0.0, 0.01760760725183835, -0.01760760725183835, 0.0, 0.03018352567107006, -0.03018352567107006, 0.0, 0.02222243069860728, -0.02222243069860728, 0.0, -0.07407639052905948, 0.07407639052905948, 0.0, -0.1269841269841271, 0.1269841269841271, 0.0 },
            { -0.008257036713055643, -0.2228966205884076, 0.2311536573014632, 0.027524058212382, 0.743004999689313, -0.770529057901695, 0.04718262429091384, 1.27368302581342, -1.320865650104334, 0.0004064026057979397, 0.01097073569837149, -0.01137713830416943, -0.00135470500718008, -0.03656991951085677, 0.03792462451803685, -0.002322278818246468, -0.06268933016038658, 0.06501160897863306, -0.001709763155693541, -0.04615462455290809, 0.04786438770860164, 0.005699335277544118, 0.1538521163356631, -0.1595514516132072, 0.009769983518903597, 0.2637382374871578, -0.2735082210060614 },
            { -0.08718227311082934, -0.3018218569861813, 0.3890041300970106, 0.2906139385811499, 1.006094880058081, -1.296708818639231, 0.4981797441341207, 1.724680145656627, -2.222859889790747, 0.004291019187986253, 0.01485535228055981, -0.01914637146854605, -0.0143037104018004, -0.04951892490547709, 0.06382263530727748, -0.02451987961392188, -0.08488693095606199, 0.1094068105699839, -0.01805260695508587, -0.06249746835230043, 0.0805500753073863, 0.06017667378557134, 0.2083294548436903, -0.2685061286292617, 0.1031567862701369, 0.3571250402383911, -0.4602818265085281 },
            { 0.1032522885798697, 0.02982477582032936, -0.1330770644001991, -2.097816119650776, -0.6059613432438322, 2.703777462894608, -0.4343893376576203, -0.1254748421809386, 0.559864179838559, -0.00508196833703204, -0.001467943892214538, 0.006549912229246579, 0.1032522885798694, 0.0298247758203293, -0.1330770644001988, 0.02138018333814187, 0.006175738899621273, -0.02755592223776315, 0.02138018333814188, 0.006175738899621276, -0.02755592223776316, -0.4343893376576195, -0.1254748421809384, 0.559864179838558, -0.08994787241030339, -0.0259817498193053, 0.1159296222296087 },
            { 0.07625221851817607, 0.002824705758635756, -0.07907692427681184, -1.549245400433187, -0.05739062402624318, 1.60663602445943, -0.3207982229993147, -0.01188372752263309, 0.3326819505219479, -0.003753053471914705, -0.0001390290270972035, 0.00389208249901191, 0.0762522185181759, 0.00282470575863575, -0.07907692427681166, 0.01578934892661068, 0.0005849044880900772, -0.01637425341470076, 0.01578934892661069, 0.0005849044880900775, -0.01637425341470077, -0.3207982229993142, -0.01188372752263307, 0.3326819505219473, -0.06642685519720934, -0.002460732606211245, 0.06888758780342059 },
            { 0.03671375637977016, -0.03671375637977016, 0.0, -0.7459273882034718, 0.7459273882034718, 0.0, -0.1544572477383408, 0.1544572477383408, 0.0, -0.001807012222408751, 0.001807012222408751, 0.0, 0.03671375637977008, -0.03671375637977008, 0.0, 0.007602222219260301, -0.007602222219260301, 0.0, 0.007602222219260305, -0.007602222219260305, 0.0, -0.1544572477383405, 0.1544572477383405, 0.0, -0.03198306129549905, 0.03198306129549905, 0.0 },
            { -0.002824705758635743, -0.07625221851817605, 0.0790769242768118, 0.0573906240262429, 1.549245400433187, -1.60663602445943, 0.01188372752263304, 0.3207982229993147, -0.3326819505219477, 0.0001390290270972029, 0.003753053471914704, -0.003892082499011908, -0.002824705758635736, -0.07625221851817589, 0.07907692427681162, -0.0005849044880900743, -0.01578934892661068, 0.01637425341470075, -0.0005849044880900746, -0.01578934892661068, 0.01637425341470076, 0.01188372752263301, 0.3207982229993141, -0.3326819505219472, 0.002460732606211232, 0.06642685519720933, -0.06888758780342057 },
            { -0.02982477582032935, -0.1032522885798697, 0.133077064400199, 0.605961343243832, 2.097816119650776, -2.703777462894608, 0.1254748421809386, 0.4343893376576203, -0.5598641798385589, 0.001467943892214538, 0.00508196833703204, -0.006549912229246577, -0.02982477582032928, -0.1032522885798694, 0.1330770644001987, -0.006175738899621271, -0.02138018333814187, 0.02755592223776314, -0.006175738899621273, -0.02138018333814188, 0.02755592223776316, 0.1254748421809384, 0.4343893376576195, -0.5598641798385577, 0.02598174981930529, 0.08994787241030339, -0.1159296222296087 },
            { -1.006094880058081, -0.2906139385811501, 1.296708818639232, 0.04951892490547711, 0.01430371040180041, -0.06382263530727753, -0.2083294548436904, -0.0601766737855714, 0.2685061286292618, 0.3018218569861813, 0.08718227311082938, -0.3890041300970107, -0.01485535228055981, -0.004291019187986254, 0.01914637146854606, 0.06249746835230043, 0.01805260695508588, -0.08055007530738631, -1.724680145656626, -0.4981797441341207, 2.222859889790747, 0.08488693095606197, 0.02451987961392188, -0.1094068105699839, -0.357125040238391, -0.1031567862701369, 0.4602818265085279 },
            { -0.7430049996893134, -0.02752405821238214, 0.7705290579016957, 0.03656991951085679, 0.001354705007180087, -0.03792462451803688, -0.1538521163356632, -0.005699335277544149, 0.1595514516132074, 0.2228966205884076, 0.008257036713055683, -0.2311536573014633, -0.01097073569837149, -0.0004064026057979417, 0.01137713830416944, 0.04615462455290811, 0.001709763155693549, -0.04786438770860166, -1.27368302581342, -0.04718262429091406, 1.320865650104334, 0.06268933016038657, 0.002322278818246478, -0.06501160897863306, -0.2637382374871577, -0.00976998351890364, 0.2735082210060614 },
            { -0.3577404707384657, 0.3577404707384657, 0.0, 0.01760760725183835, -0.01760760725183835, 0.0, -0.07407639052905952, 0.07407639052905952, 0.0, 0.107319791937676, -0.107319791937676, 0.0, -0.005282166546286776, 0.005282166546286776, 0.0, 0.02222243069860728, -0.02222243069860728, 0.0, -0.6132502007612528, 0.6132502007612528, 0.0, 0.03018352567107005, -0.03018352567107005, 0.0, -0.1269841269841271, 0.1269841269841271, 0.0 },
            { 0.02752405821238201, 0.7430049996893133, -0.7705290579016953, -0.00135470500718008, -0.03656991951085679, 0.03792462451803687, 0.005699335277544121, 0.1538521163356631, -0.1595514516132073, -0.008257036713055643, -0.2228966205884076, 0.2311536573014632, 0.0004064026057979397, 0.01097073569837149, -0.01137713830416943, -0.001709763155693541, -0.04615462455290809, 0.04786438770860164, 0.04718262429091383, 1.273683025813419, -1.320865650104333, -0.002322278818246467, -0.06268933016038655, 0.06501160897863303, 0.009769983518903591, 0.2637382374871577, -0.2735082210060613 },
            { 0.29061393858115, 1.006094880058081, -1.296708818639231, -0.0143037104018004, -0.04951892490547711, 0.0638226353072775, 0.06017667378557137, 0.2083294548436904, -0.2685061286292618, -0.08718227311082934, -0.3018218569861813, 0.3890041300970106, 0.004291019187986253, 0.01485535228055981, -0.01914637146854605, -0.01805260695508587, -0.06249746835230043, 0.0805500753073863, 0.4981797441341205, 1.724680145656626, -2.222859889790747, -0.02451987961392187, -0.08488693095606197, 0.1094068105699838, 0.1031567862701369, 0.357125040238391, -0.4602818265085278 },
            { -0.482514600873403, -0.1393759886489395, 0.6218905895223426, 0.1447512115856799, 0.04181188131171024, -0.1865630928973901, -0.8271420207085717, -0.2389227946276919, 1.066064815336264, 0.1447512115856799, 0.04181188131171024, -0.1865630928973901, -0.04342441289361038, -0.01254328981463225, 0.05596770270824265, 0.2481371743658524, 0.07167526938085102, -0.3198124437467035, -0.8271420207085717, -0.2389227946276919, 1.066064815336264, 0.2481371743658524, 0.07167526938085102, -0.3198124437467035, -1.417913408596236, -0.4095691255434949, 1.827482534139731 },
            { -0.3563389179073601, -0.01320030568289661, 0.3695392235902568, 0.1068993352923503, 0.003960005018380668, -0.110859340310731, -0.6108476138991101, -0.02262838781823026, 0.6334760017173404, 0.1068993352923503, 0.003960005018380668, -0.110859340310731, -0.03206909857911511, -0.001187975500136976, 0.03325707407925209, 0.183250272729709, 0.006788367744707599, -0.1900386404744167, -0.6108476138991101, -0.02262838781823026, 0.6334760017173404, 0.183250272729709, 0.006788367744707599, -0.1900386404744167, -1.04713459197079, -0.03879030891804856, 1.085924900888839 },
            { -0.1715693061122318, 0.1715693061122318, 0.0, 0.05146966513698484, -0.05146966513698484, 0.0, -0.2941096130404399, 0.2941096130404399, 0.0, 0.05146966513698484, -0.05146966513698484, 0.0, -0.01544056153948907, 0.01544056153948907, 0.0, 0.08823095249250071, -0.08823095249250071, 0.0, -0.2941096130404399, 0.2941096130404399, 0.0, 0.08823095249250071, -0.08823095249250071, 0.0, -0.5041721415263707, 0.5041721415263707, 0.0 },
            { 0.01320030568289655, 0.3563389179073601, -0.3695392235902566, -0.003960005018380648, -0.1068993352923503, 0.110859340310731, 0.02262838781823015, 0.6108476138991099, -0.6334760017173402, -0.003960005018380648, -0.1068993352923503, 0.110859340310731, 0.00118797550013697, 0.0320690985791151, -0.03325707407925207, -0.006788367744707566, -0.183250272729709, 0.1900386404744166, 0.02262838781823015, 0.6108476138991099, -0.6334760017173402, -0.006788367744707566, -0.183250272729709, 0.1900386404744166, 0.03879030891804837, 1.04713459197079, -1.085924900888838 },
            { 0.1393759886489395, 0.482514600873403, -0.6218905895223424, -0.04181188131171022, -0.1447512115856799, 0.1865630928973901, 0.2389227946276918, 0.8271420207085717, -1.066064815336263, -0.04181188131171022, -0.1447512115856799, 0.1865630928973901, 0.01254328981463225, 0.04342441289361038, -0.05596770270824263, -0.07167526938085099, -0.2481371743658524, 0.3198124437467034, 0.2389227946276918, 0.8271420207085717, -1.066064815336263, -0.07167526938085099, -0.2481371743658524, 0.3198124437467034, 0.4095691255434948, 1.417913408596236, -1.827482534139731 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.164905409996295, -0.3364869019649211, 1.501392311961216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3494639730579219, 0.100943860877929, -0.4504078339358509, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.996918254938955, -0.5768166507903358, 2.573734905729291 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8602871965141199, -0.0318686884827462, 0.8921558849968662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2580805094429443, 0.009560397262951289, -0.2676409067058956, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.474731933140191, -0.05463032899157122, 1.529362262131762 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4142092540156869, 0.4142092540156869, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1242600560899965, -0.1242600560899965, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.7100508020743098, 0.7100508020743098, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03186868848274605, 0.8602871965141197, -0.8921558849968658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.009560397262951244, -0.2580805094429442, 0.2676409067058955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05463032899157095, 1.47473193314019, -1.529362262131762 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.336486901964921, 1.164905409996295, -1.501392311961216, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.100943860877929, -0.3494639730579219, 0.4504078339358508, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5768166507903355, 1.996918254938955, -2.573734905729291 },
            { 0.1447512115856799, 0.04181188131171024, -0.1865630928973901, -0.4825146008734027, -0.1393759886489394, 0.6218905895223422, -0.827142020708572, -0.238922794627692, 1.066064815336264, -0.04342441289361038, -0.01254328981463225, 0.05596770270824265, 0.1447512115856798, 0.04181188131171022, -0.18656309289739, 0.2481371743658525, 0.07167526938085104, -0.3198124437467036, 0.2481371743658524, 0.07167526938085102, -0.3198124437467035, -0.8271420207085712, -0.2389227946276918, 1.066064815336263, -1.417913408596237, -0.4095691255434951, 1.827482534139732 },
            { 0.1068993352923503, 0.003960005018380668, -0.110859340310731, -0.3563389179073599, -0.01320030568289661, 0.3695392235902565, -0.6108476138991104, -0.02262838781823027, 0.6334760017173406, -0.03206909857911511, -0.001187975500136976, 0.03325707407925209, 0.1068993352923503, 0.003960005018380665, -0.110859340310731, 0.1832502727297091, 0.006788367744707601, -0.1900386404744167, 0.183250272729709, 0.006788367744707599, -0.1900386404744167, -0.6108476138991097, -0.02262838781823025, 0.6334760017173401, -1.04713459197079, -0.03879030891804857, 1.085924900888839 },
            { 0.05146966513698484, -0.05146966513698484, 0.0, -0.1715693061122316, 0.1715693061122316, 0.0, -0.29410961304044, 0.29410961304044, 0.0, -0.01544056153948907, 0.01544056153948907, 0.0, 0.05146966513698481, -0.05146966513698481, 0.0, 0.08823095249250074, -0.08823095249250074, 0.0, 0.08823095249250071, -0.08823095249250071, 0.0, -0.2941096130404398, 0.2941096130404398, 0.0, -0.5041721415263708, 0.5041721415263708, 0.0 },
            { -0.003960005018380648, -0.1068993352923503, 0.110859340310731, 0.01320030568289654, 0.3563389179073598, -0.3695392235902564, 0.02262838781823016, 0.6108476138991101, -0.6334760017173404, 0.00118797550013697, 0.0320690985791151, -0.03325707407925207, -0.003960005018380646, -0.1068993352923503, 0.1108593403107309, -0.006788367744707568, -0.183250272729709, 0.1900386404744166, -0.006788367744707566, -0.183250272729709, 0.1900386404744166, 0.02262838781823014, 0.6108476138991096, -0.6334760017173398, 0.03879030891804838, 1.04713459197079, -1.085924900888838 },
            { -0.04181188131171022, -0.1447512115856799, 0.1865630928973901, 0.1393759886489394, 0.4825146008734027, -0.621890589522342, 0.2389227946276919, 0.827142020708572, -1.066064815336264, 0.01254328981463225, 0.04342441289361038, -0.05596770270824263, -0.0418118813117102, -0.1447512115856798, 0.18656309289739, -0.07167526938085102, -0.2481371743658525, 0.3198124437467035, -0.07167526938085099, -0.2481371743658524, 0.3198124437467034, 0.2389227946276916, 0.8271420207085712, -1.066064815336263, 0.4095691255434949, 1.417913408596237, -1.827482534139731 },
            { 0.04951892490547721, 0.01430371040180043, -0.06382263530727765, -1.006094880058081, -0.2906139385811501, 1.296708818639231, -0.2083294548436908, -0.06017667378557149, 0.2685061286292623, -0.01485535228055983, -0.004291019187986262, 0.0191463714685461, 0.3018218569861812, 0.08718227311082935, -0.3890041300970106, 0.06249746835230053, 0.01805260695508591, -0.08055007530738643, 0.08488693095606213, 0.02451987961392193, -0.1094068105699841, -1.724680145656626, -0.4981797441341206, 2.222859889790747, -0.3571250402383915, -0.1031567862701371, 0.4602818265085287 },
            { 0.03656991951085686, 0.00135470500718009, -0.03792462451803696, -0.7430049996893132, -0.02752405821238214, 0.7705290579016955, -0.1538521163356634, -0.005699335277544158, 0.1595514516132076, -0.01097073569837152, -0.0004064026057979425, 0.01137713830416946, 0.2228966205884076, 0.008257036713055681, -0.2311536573014633, 0.04615462455290818, 0.001709763155693552, -0.04786438770860173, 0.06268933016038669, 0.002322278818246483, -0.06501160897863319, -1.273683025813419, -0.04718262429091405, 1.320865650104334, -0.2637382374871581, -0.009769983518903654, 0.2735082210060618 },
            { 0.01760760725183839, -0.01760760725183839, 0.0, -0.3577404707384655, 0.3577404707384655, 0.0, -0.07407639052905964, 0.07407639052905964, 0.0, -0.005282166546286786, 0.005282166546286786, 0.0, 0.1073197919376759, -0.1073197919376759, 0.0, 0.02222243069860731, -0.02222243069860731, 0.0, 0.03018352567107011, -0.03018352567107011, 0.0, -0.6132502007612527, 0.6132502007612527, 0.0, -0.1269841269841273, 0.1269841269841273, 0.0 },
            { -0.001354705007180083, -0.03656991951085686, 0.03792462451803694, 0.027524058212382, 0.7430049996893131, -0.7705290579016951, 0.00569933527754413, 0.1538521163356634, -0.1595514516132075, 0.0004064026057979405, 0.01097073569837151, -0.01137713830416945, -0.008257036713055641, -0.2228966205884075, 0.2311536573014632, -0.001709763155693543, -0.04615462455290817, 0.04786438770860171, -0.002322278818246471, -0.06268933016038668, 0.06501160897863316, 0.04718262429091381, 1.273683025813419, -1.320865650104333, 0.009769983518903607, 0.2637382374871581, -0.2735082210060617 },
            { -0.01430371040180043, -0.04951892490547721, 0.06382263530727764, 0.29061393858115, 1.006094880058081, -1.296708818639231, 0.06017667378557146, 0.2083294548436908, -0.2685061286292622, 0.00429101918798626, 0.01485535228055983, -0.01914637146854609, -0.08718227311082932, -0.3018218569861812, 0.3890041300970105, -0.0180526069550859, -0.06249746835230053, 0.08055007530738642, -0.02451987961392191, -0.08488693095606213, 0.109406810569984, 0.4981797441341204, 1.724680145656626, -2.222859889790746, 0.103156786270137, 0.3571250402383915, -0.4602818265085286 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.428953168728527, -0.7016114096044416, 3.130564578332968, 0.1195505035809793, 0.03453257082773603, -0.1540830744087153, -0.502957026729781, -0.1452808531006224, 0.6482378798304035 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.793791404914326, -0.06644964579024051, 1.860241050704566, 0.08828851397287188, 0.003270581219628623, -0.09155909519250051, -0.3714357292699129, -0.01375955564075424, 0.3851952849106671 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8636708795620426, 0.8636708795620426, 0.0, 0.04250896637662162, -0.04250896637662162, 0.0, -0.1788380868145793, 0.1788380868145793, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06644964579024019, 1.793791404914325, -1.860241050704565, -0.003270581219628607, -0.08828851397287185, 0.09155909519250047, 0.01375955564075417, 0.3714357292699128, -0.385195284910667 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7016114096044412, 2.428953168728527, -3.130564578332967, -0.03453257082773602, -0.1195505035809793, 0.1540830744087153, 0.1452808531006224, 0.502957026729781, -0.6482378798304034 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.164905409996295, -0.3364869019649211, 1.501392311961216, 0.3494639730579219, 0.100943860877929, -0.4504078339358509, -1.996918254938955, -0.5768166507903358, 2.573734905729291 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8602871965141199, -0.0318686884827462, 0.8921558849968662, 0.2580805094429443, 0.009560397262951289, -0.2676409067058956, -1.474731933140191, -0.05463032899157122, 1.529362262131762 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4142092540156869, 0.4142092540156869, 0.0, 0.1242600560899965, -0.1242600560899965, 0.0, -0.7100508020743098, 0.7100508020743098, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03186868848274605, 0.8602871965141197, -0.8921558849968658, -0.009560397262951244, -0.2580805094429442, 0.2676409067058955, 0.05463032899157095, 1.47473193314019, -1.529362262131762 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.336486901964921, 1.164905409996295, -1.501392311961216, -0.100943860877929, -0.3494639730579219, 0.4504078339358508, 0.5768166507903355, 1.996918254938955, -2.573734905729291 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.812359691877328, -0.8123596918773279, 3.624719383754656 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.076938620211366, -0.07693862021136613, 2.153877240422733 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07693862021136576, 2.076938620211366, -2.153877240422732 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8123596918773276, 2.812359691877328, -3.624719383754655 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3494639730579219, 0.100943860877929, -0.4504078339358509, -1.164905409996294, -0.336486901964921, 1.501392311961215, -1.996918254938956, -0.5768166507903359, 2.573734905729292 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2580805094429443, 0.009560397262951289, -0.2676409067058956, -0.8602871965141193, -0.03186868848274619, 0.8921558849968657, -1.474731933140191, -0.05463032899157123, 1.529362262131763 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1242600560899965, -0.1242600560899965, 0.0, -0.4142092540156866, 0.4142092540156866, 0.0, -0.71005080207431, 0.71005080207431, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.009560397262951244, -0.2580805094429442, 0.2676409067058955, 0.03186868848274603, 0.8602871965141192, -0.8921558849968654, 0.05463032899157097, 1.474731933140191, -1.529362262131762 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.100943860877929, -0.3494639730579219, 0.4504078339358508, 0.3364869019649208, 1.164905409996294, -1.501392311961215, 0.5768166507903357, 1.996918254938956, -2.573734905729292 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1195505035809795, 0.0345325708277361, -0.1540830744087156, -2.428953168728526, -0.7016114096044413, 3.130564578332967, -0.5029570267297818, -0.1452808531006227, 0.6482378798304045 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08828851397287205, 0.00327058121962863, -0.09155909519250069, -1.793791404914325, -0.0664496457902405, 1.860241050704566, -0.3714357292699134, -0.01375955564075426, 0.3851952849106677 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04250896637662171, -0.04250896637662171, 0.0, -0.8636708795620424, 0.8636708795620424, 0.0, -0.1788380868145796, 0.1788380868145796, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.003270581219628614, -0.08828851397287203, 0.09155909519250065, 0.06644964579024018, 1.793791404914325, -1.860241050704565, 0.01375955564075419, 0.3714357292699134, -0.3851952849106676 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03453257082773609, -0.1195505035809795, 0.1540830744087156, 0.701611409604441, 2.428953168728526, -3.130564578332967, 0.1452808531006226, 0.5029570267297818, -0.6482378798304044 },
            { 0.3018218569861813, 0.08718227311082938, -0.3890041300970107, -0.01485535228055981, -0.004291019187986254, 0.01914637146854606, 0.06249746835230043, 0.01805260695508588, -0.08055007530738631, -1.006094880058081, -0.29061393858115, 1.296708818639231, 0.04951892490547709, 0.0143037104018004, -0.0638226353072775, -0.2083294548436903, -0.06017667378557136, 0.2685061286292617, -1.724680145656627, -0.4981797441341209, 2.222859889790748, 0.08488693095606199, 0.02451987961392189, -0.1094068105699839, -0.3571250402383911, -0.103156786270137, 0.4602818265085282 },
            { 0.2228966205884076, 0.008257036713055683, -0.2311536573014633, -0.01097073569837149, -0.0004064026057979417, 0.01137713830416944, 0.04615462455290811, 0.001709763155693549, -0.04786438770860166, -0.7430049996893131, -0.02752405821238213, 0.7705290579016953, 0.03656991951085678, 0.001354705007180086, -0.03792462451803687, -0.1538521163356631, -0.005699335277544145, 0.1595514516132073, -1.27368302581342, -0.04718262429091407, 1.320865650104334, 0.06268933016038659, 0.002322278818246479, -0.06501160897863308, -0.2637382374871579, -0.009769983518903643, 0.2735082210060615 },
            { 0.107319791937676, -0.107319791937676, 0.0, -0.005282166546286776, 0.005282166546286776, 0.0, 0.02222243069860728, -0.02222243069860728, 0.0, -0.3577404707384655, 0.3577404707384655, 0.0, 0.01760760725183835, -0.01760760725183835, 0.0, -0.07407639052905948, 0.07407639052905948, 0.0, -0.613250200761253, 0.613250200761253, 0.0, 0.03018352567107006, -0.03018352567107006, 0.0, -0.1269841269841271, 0.1269841269841271, 0.0 },
            { -0.008257036713055643, -0.2228966205884076, 0.2311536573014632, 0.0004064026057979397, 0.01097073569837149, -0.01137713830416943, -0.001709763155693541, -0.04615462455290809, 0.04786438770860164, 0.027524058212382, 0.743004999689313, -0.770529057901695, -0.00135470500718008, -0.03656991951085677, 0.03792462451803685, 0.005699335277544118, 0.1538521163356631, -0.1595514516132072, 0.04718262429091384, 1.27368302581342, -1.320865650104334, -0.002322278818246468, -0.06268933016038658, 0.06501160897863306, 0.009769983518903597, 0.2637382374871578, -0.2735082210060614 },
            { -0.08718227311082934, -0.3018218569861813, 0.3890041300970106, 0.004291019187986253, 0.01485535228055981, -0.01914637146854605, -0.01805260695508587, -0.06249746835230043, 0.0805500753073863, 0.2906139385811499, 1.006094880058081, -1.296708818639231, -0.0143037104018004, -0.04951892490547709, 0.06382263530727748, 0.06017667378557134, 0.2083294548436903, -0.2685061286292617, 0.4981797441341207, 1.724680145656627, -2.222859889790747, -0.02451987961392188, -0.08488693095606199, 0.1094068105699839, 0.1031567862701369, 0.3571250402383911, -0.4602818265085281 },
            { 0.1447512115856799, 0.04181188131171024, -0.1865630928973901, -0.04342441289361038, -0.01254328981463225, 0.05596770270824265, 0.2481371743658524, 0.07167526938085102, -0.3198124437467035, -0.4825146008734027, -0.1393759886489394, 0.6218905895223422, 0.1447512115856798, 0.04181188131171022, -0.18656309289739, -0.8271420207085712, -0.2389227946276918, 1.066064815336263, -0.827142020708572, -0.238922794627692, 1.066064815336264, 0.2481371743658525, 0.07167526938085104, -0.3198124437467036, -1.417913408596237, -0.4095691255434951, 1.827482534139732 },
            { 0.1068993352923503, 0.003960005018380668, -0.110859340310731, -0.03206909857911511, -0.001187975500136976, 0.03325707407925209, 0.183250272729709, 0.006788367744707599, -0.1900386404744167, -0.3563389179073599, -0.01320030568289661, 0.3695392235902565, 0.1068993352923503, 0.003960005018380665, -0.110859340310731, -0.6108476138991097, -0.02262838781823025, 0.6334760017173401, -0.6108476138991104, -0.02262838781823027, 0.6334760017173406, 0.1832502727297091, 0.006788367744707601, -0.1900386404744167, -1.04713459197079, -0.03879030891804857, 1.085924900888839 },
            { 0.05146966513698484, -0.05146966513698484, 0.0, -0.01544056153948907, 0.01544056153948907, 0.0, 0.08823095249250071, -0.08823095249250071, 0.0, -0.1715693061122316, 0.1715693061122316, 0.0, 0.05146966513698481, -0.05146966513698481, 0.0, -0.2941096130404398, 0.2941096130404398, 0.0, -0.29410961304044, 0.29410961304044, 0.0, 0.08823095249250074, -0.08823095249250074, 0.0, -0.5041721415263708, 0.5041721415263708, 0.0 },
            { -0.003960005018380648, -0.1068993352923503, 0.110859340310731, 0.00118797550013697, 0.0320690985791151, -0.03325707407925207, -0.006788367744707566, -0.183250272729709, 0.1900386404744166, 0.01320030568289654, 0.3563389179073598, -0.3695392235902564, -0.003960005018380646, -0.1068993352923503, 0.1108593403107309, 0.02262838781823014, 0.6108476138991096, -0.6334760017173398, 0.02262838781823016, 0.6108476138991101, -0.6334760017173404, -0.006788367744707568, -0.183250272729709, 0.1900386404744166, 0.03879030891804838, 1.04713459197079, -1.085924900888838 },
            { -0.04181188131171022, -0.1447512115856799, 0.1865630928973901, 0.01254328981463225, 0.04342441289361038, -0.05596770270824263, -0.07167526938085099, -0.2481371743658524, 0.3198124437467034, 0.1393759886489394, 0.4825146008734027, -0.621890589522342, -0.0418118813117102, -0.1447512115856798, 0.18656309289739, 0.2389227946276916, 0.8271420207085712, -1.066064815336263, 0.2389227946276919, 0.827142020708572, -1.066064815336264, -0.07167526938085102, -0.2481371743658525, 0.3198124437467035, 0.4095691255434949, 1.417913408596237, -1.827482534139731 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3494639730579219, 0.100943860877929, -0.4504078339358509, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.164905409996294, -0.336486901964921, 1.501392311961215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.996918254938956, -0.5768166507903359, 2.573734905729292 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2580805094429443, 0.009560397262951289, -0.2676409067058956, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8602871965141193, -0.03186868848274619, 0.8921558849968657, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.474731933140191, -0.05463032899157123, 1.529362262131763 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1242600560899965, -0.1242600560899965, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4142092540156866, 0.4142092540156866, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.71005080207431, 0.71005080207431, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.009560397262951244, -0.2580805094429442, 0.2676409067058955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03186868848274603, 0.8602871965141192, -0.8921558849968654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05463032899157097, 1.474731933140191, -1.529362262131762 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.100943860877929, -0.3494639730579219, 0.4504078339358508, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3364869019649208, 1.164905409996294, -1.501392311961215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5768166507903357, 1.996918254938956, -2.573734905729292 },
            { -0.04342441289361038, -0.01254328981463225, 0.05596770270824265, 0.1447512115856798, 0.04181188131171022, -0.18656309289739, 0.2481371743658525, 0.07167526938085104, -0.3198124437467036, 0.1447512115856798, 0.04181188131171022, -0.18656309289739, -0.4825146008734025, -0.1393759886489394, 0.6218905895223419, -0.8271420207085716, -0.2389227946276918, 1.066064815336264, 0.2481371743658525, 0.07167526938085104, -0.3198124437467036, -0.8271420207085716, -0.2389227946276918, 1.066064815336264, -1.417913408596237, -0.4095691255434952, 1.827482534139732 },
            { -0.03206909857911511, -0.001187975500136976, 0.03325707407925209, 0.1068993352923503, 0.003960005018380665, -0.110859340310731, 0.1832502727297091, 0.006788367744707601, -0.1900386404744167, 0.1068993352923503, 0.003960005018380665, -0.110859340310731, -0.3563389179073597, -0.0132003056828966, 0.3695392235902564, -0.6108476138991099, -0.02262838781823025, 0.6334760017173403, 0.1832502727297091, 0.006788367744707601, -0.1900386404744167, -0.6108476138991099, -0.02262838781823025, 0.6334760017173403, -1.04713459197079, -0.03879030891804858, 1.085924900888839 },
            { -0.01544056153948907, 0.01544056153948907, 0.0, 0.05146966513698481, -0.05146966513698481, 0.0, 0.08823095249250074, -0.08823095249250074, 0.0, 0.05146966513698481, -0.05146966513698481, 0.0, -0.1715693061122316, 0.1715693061122316, 0.0, -0.2941096130404399, 0.2941096130404399, 0.0, 0.08823095249250074, -0.08823095249250074, 0.0, -0.2941096130404399, 0.2941096130404399, 0.0, -0.5041721415263709, 0.5041721415263709, 0.0 },
            { 0.00118797550013697, 0.0320690985791151, -0.03325707407925207, -0.003960005018380646, -0.1068993352923503, 0.1108593403107309, -0.006788367744707568, -0.183250272729709, 0.1900386404744166, -0.003960005018380646, -0.1068993352923503, 0.1108593403107309, 0.01320030568289654, 0.3563389179073597, -0.3695392235902562, 0.02262838781823014, 0.6108476138991098, -0.6334760017173401, -0.006788367744707568, -0.183250272729709, 0.1900386404744166, 0.02262838781823014, 0.6108476138991098, -0.6334760017173401, 0.03879030891804839, 1.04713459197079, -1.085924900888839 },
            { 0.01254328981463225, 0.04342441289361038, -0.05596770270824263, -0.0418118813117102, -0.1447512115856798, 0.18656309289739, -0.07167526938085102, -0.2481371743658525, 0.3198124437467035, -0.0418118813117102, -0.1447512115856798, 0.18656309289739, 0.1393759886489393, 0.4825146008734025, -0.6218905895223418, 0.2389227946276917, 0.8271420207085716, -1.066064815336263, -0.07167526938085102, -0.2481371743658525, 0.3198124437467035, 0.2389227946276917, 0.8271420207085716, -1.066064815336263, 0.409569125543495, 1.417913408596237, -1.827482534139732 },
            { -0.01485535228055983, -0.004291019187986262, 0.0191463714685461, 0.3018218569861812, 0.08718227311082935, -0.3890041300970106, 0.06249746835230053, 0.01805260695508591, -0.08055007530738643, 0.04951892490547719, 0.01430371040180043, -0.06382263530727762, -1.006094880058081, -0.2906139385811499, 1.296708818639231, -0.2083294548436906, -0.06017667378557146, 0.2685061286292621, 0.08488693095606216, 0.02451987961392194, -0.1094068105699841, -1.724680145656626, -0.4981797441341207, 2.222859889790747, -0.3571250402383917, -0.1031567862701371, 0.4602818265085289 },
            { -0.01097073569837152, -0.0004064026057979425, 0.01137713830416946, 0.2228966205884076, 0.008257036713055681, -0.2311536573014633, 0.04615462455290818, 0.001709763155693552, -0.04786438770860173, 0.03656991951085685, 0.001354705007180089, -0.03792462451803694, -0.7430049996893129, -0.02752405821238212, 0.7705290579016951, -0.1538521163356633, -0.005699335277544154, 0.1595514516132075, 0.06268933016038672, 0.002322278818246483, -0.06501160897863321, -1.27368302581342, -0.04718262429091406, 1.320865650104334, -0.2637382374871582, -0.009769983518903659, 0.273508221006062 },
            { -0.005282166546286786, 0.005282166546286786, 0.0, 0.1073197919376759, -0.1073197919376759, 0.0, 0.02222243069860731, -0.02222243069860731, 0.0, 0.01760760725183838, -0.01760760725183838, 0.0, -0.3577404707384654, 0.3577404707384654, 0.0, -0.07407639052905959, 0.07407639052905959, 0.0, 0.03018352567107012, -0.03018352567107012, 0.0, -0.6132502007612528, 0.6132502007612528, 0.0, -0.1269841269841273, 0.1269841269841273, 0.0 },
            { 0.0004064026057979405, 0.01097073569837151, -0.01137713830416945, -0.008257036713055641, -0.2228966205884075, 0.2311536573014632, -0.001709763155693543, -0.04615462455290817, 0.04786438770860171, -0.001354705007180082, -0.03656991951085684, 0.03792462451803693, 0.02752405821238199, 0.7430049996893127, -0.7705290579016948, 0.005699335277544126, 0.1538521163356633, -0.1595514516132074, -0.002322278818246472, -0.06268933016038671, 0.06501160897863319, 0.04718262429091383, 1.273683025813419, -1.320865650104333, 0.00976998351890361, 0.2637382374871582, -0.2735082210060619 },
            { 0.00429101918798626, 0.01485535228055983, -0.01914637146854609, -0.08718227311082932, -0.3018218569861812, 0.3890041300970105, -0.0180526069550859, -0.06249746835230053, 0.08055007530738642, -0.01430371040180042, -0.04951892490547719, 0.06382263530727761, 0.2906139385811498, 1.006094880058081, -1.29670881863923, 0.06017667378557143, 0.2083294548436906, -0.268506128629262, -0.02451987961392193, -0.08488693095606216, 0.1094068105699841, 0.4981797441341205, 1.724680145656626, -2.222859889790747, 0.1031567862701371, 0.3571250402383917, -0.4602818265085288 },
            { 0.1032522885798697, 0.02982477582032936, -0.1330770644001991, -0.00508196833703204, -0.001467943892214538, 0.006549912229246579, 0.02138018333814188, 0.006175738899621276, -0.02755592223776316, -2.097816119650776, -0.6059613432438322, 2.703777462894608, 0.1032522885798694, 0.0298247758203293, -0.1330770644001988, -0.4343893376576195, -0.1254748421809384, 0.559864179838558, -0.4343893376576203, -0.1254748421809386, 0.559864179838559, 0.02138018333814187, 0.006175738899621273, -0.02755592223776315, -0.08994787241030339, -0.0259817498193053, 0.1159296222296087 },
            { 0.07625221851817607, 0.002824705758635756, -0.07907692427681184, -0.003753053471914705, -0.0001390290270972035, 0.00389208249901191, 0.01578934892661069, 0.0005849044880900775, -0.01637425341470077, -1.549245400433187, -0.05739062402624318, 1.60663602445943, 0.0762522185181759, 0.00282470575863575, -0.07907692427681166, -0.3207982229993142, -0.01188372752263307, 0.3326819505219473, -0.3207982229993147, -0.01188372752263309, 0.3326819505219479, 0.01578934892661068, 0.0005849044880900772, -0.01637425341470076, -0.06642685519720934, -0.002460732606211245, 0.06888758780342059 },
            { 0.03671375637977016, -0.03671375637977016, 0.0, -0.001807012222408751, 0.001807012222408751, 0.0, 0.007602222219260305, -0.007602222219260305, 0.0, -0.7459273882034718, 0.7459273882034718, 0.0, 0.03671375637977008, -0.03671375637977008, 0.0, -0.1544572477383405, 0.1544572477383405, 0.0, -0.1544572477383408, 0.1544572477383408, 0.0, 0.007602222219260301, -0.007602222219260301, 0.0, -0.03198306129549905, 0.03198306129549905, 0.0 },
            { -0.002824705758635743, -0.07625221851817605, 0.0790769242768118, 0.0001390290270972029, 0.003753053471914704, -0.003892082499011908, -0.0005849044880900746, -0.01578934892661068, 0.01637425341470076, 0.0573906240262429, 1.549245400433187, -1.60663602445943, -0.002824705758635736, -0.07625221851817589, 0.07907692427681162, 0.01188372752263301, 0.3207982229993141, -0.3326819505219472, 0.01188372752263304, 0.3207982229993147, -0.3326819505219477, -0.0005849044880900743, -0.01578934892661068, 0.01637425341470075, 0.002460732606211232, 0.06642685519720933, -0.06888758780342057 },
            { -0.02982477582032935, -0.1032522885798697, 0.133077064400199, 0.001467943892214538, 0.00508196833703204, -0.006549912229246577, -0.006175738899621273, -0.02138018333814188, 0.02755592223776316, 0.605961343243832, 2.097816119650776, -2.703777462894608, -0.02982477582032928, -0.1032522885798694, 0.1330770644001987, 0.1254748421809384, 0.4343893376576195, -0.5598641798385577, 0.1254748421809386, 0.4343893376576203, -0.5598641798385589, -0.006175738899621271, -0.02138018333814187, 0.02755592223776314, 0.02598174981930529, 0.08994787241030339, -0.1159296222296087 },
            { 0.04951892490547721, 0.01430371040180043, -0.06382263530727765, -0.01485535228055983, -0.004291019187986262, 0.0191463714685461, 0.08488693095606213, 0.02451987961392193, -0.1094068105699841, -1.006094880058081, -0.2906139385811501, 1.296708818639231, 0.3018218569861812, 0.08718227311082935, -0.3890041300970106, -1.724680145656626, -0.4981797441341206, 2.222859889790747, -0.2083294548436908, -0.06017667378557149, 0.2685061286292623, 0.06249746835230053, 0.01805260695508591, -0.08055007530738643, -0.3571250402383915, -0.1031567862701371, 0.4602818265085287 },
            { 0.03656991951085686, 0.00135470500718009, -0.03792462451803696, -0.01097073569837152, -0.0004064026057979425, 0.01137713830416946, 0.06268933016038669, 0.002322278818246483, -0.06501160897863319, -0.7430049996893132, -0.02752405821238214, 0.7705290579016955, 0.2228966205884076, 0.008257036713055681, -0.2311536573014633, -1.273683025813419, -0.04718262429091405, 1.320865650104334, -0.1538521163356634, -0.005699335277544158, 0.1595514516132076, 0.04615462455290818, 0.001709763155693552, -0.04786438770860173, -0.2637382374871581, -0.009769983518903654, 0.2735082210060618 },
            { 0.01760760725183839, -0.01760760725183839, 0.0, -0.005282166546286786, 0.005282166546286786, 0.0, 0.03018352567107011, -0.03018352567107011, 0.0, -0.3577404707384655, 0.3577404707384655, 0.0, 0.1073197919376759, -0.1073197919376759, 0.0, -0.6132502007612527, 0.6132502007612527, 0.0, -0.07407639052905964, 0.07407639052905964, 0.0, 0.02222243069860731, -0.02222243069860731, 0.0, -0.1269841269841273, 0.1269841269841273, 0.0 },
            { -0.001354705007180083, -0.03656991951085686, 0.03792462451803694, 0.0004064026057979405, 0.01097073569837151, -0.01137713830416945, -0.002322278818246471, -0.06268933016038668, 0.06501160897863316, 0.027524058212382, 0.7430049996893131, -0.7705290579016951, -0.008257036713055641, -0.2228966205884075, 0.2311536573014632, 0.04718262429091381, 1.273683025813419, -1.320865650104333, 0.00569933527754413, 0.1538521163356634, -0.1595514516132075, -0.001709763155693543, -0.04615462455290817, 0.04786438770860171, 0.009769983518903607, 0.2637382374871581, -0.2735082210060617 },
            { -0.01430371040180043, -0.04951892490547721, 0.06382263530727764, 0.00429101918798626, 0.01485535228055983, -0.01914637146854609, -0.02451987961392191, -0.08488693095606213, 0.109406810569984, 0.29061393858115, 1.006094880058081, -1.296708818639231, -0.08718227311082932, -0.3018218569861812, 0.3890041300970105, 0.4981797441341204, 1.724680145656626, -2.222859889790746, 0.06017667378557146, 0.2083294548436908, -0.2685061286292622, -0.0180526069550859, -0.06249746835230053, 0.08055007530738642, 0.103156786270137, 0.3571250402383915, -0.4602818265085286 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1195505035809795, 0.0345325708277361, -0.1540830744087156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.428953168728526, -0.7016114096044413, 3.130564578332967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5029570267297818, -0.1452808531006227, 0.6482378798304045 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08828851397287205, 0.00327058121962863, -0.09155909519250069, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.793791404914325, -0.0664496457902405, 1.860241050704566, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.3714357292699134, -0.01375955564075426, 0.3851952849106677 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04250896637662171, -0.04250896637662171, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8636708795620424, 0.8636708795620424, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1788380868145796, 0.1788380868145796, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.003270581219628614, -0.08828851397287203, 0.09155909519250065, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06644964579024018, 1.793791404914325, -1.860241050704565, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01375955564075419, 0.3714357292699134, -0.3851952849106676 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03453257082773609, -0.1195505035809795, 0.1540830744087156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.701611409604441, 2.428953168728526, -3.130564578332967, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1452808531006226, 0.5029570267297818, -0.6482378798304044 },
            { -0.01485535228055983, -0.004291019187986262, 0.0191463714685461, 0.04951892490547719, 0.01430371040180043, -0.06382263530727762, 0.08488693095606216, 0.02451987961392194, -0.1094068105699841, 0.3018218569861812, 0.08718227311082935, -0.3890041300970106, -1.006094880058081, -0.2906139385811499, 1.296708818639231, -1.724680145656626, -0.4981797441341207, 2.222859889790747, 0.06249746835230053, 0.01805260695508591, -0.08055007530738643, -0.2083294548436906, -0.06017667378557146, 0.2685061286292621, -0.3571250402383917, -0.1031567862701371, 0.4602818265085289 },
            { -0.01097073569837152, -0.0004064026057979425, 0.01137713830416946, 0.03656991951085685, 0.001354705007180089, -0.03792462451803694, 0.06268933016038672, 0.002322278818246483, -0.06501160897863321, 0.2228966205884076, 0.008257036713055681, -0.2311536573014633, -0.7430049996893129, -0.02752405821238212, 0.7705290579016951, -1.27368302581342, -0.04718262429091406, 1.320865650104334, 0.04615462455290818, 0.001709763155693552, -0.04786438770860173, -0.1538521163356633, -0.005699335277544154, 0.1595514516132075, -0.2637382374871582, -0.009769983518903659, 0.273508221006062 },
            { -0.005282166546286786, 0.005282166546286786, 0.0, 0.01760760725183838, -0.01760760725183838, 0.0, 0.03018352567107012, -0.03018352567107012, 0.0, 0.1073197919376759, -0.1073197919376759, 0.0, -0.3577404707384654, 0.3577404707384654, 0.0, -0.6132502007612528, 0.6132502007612528, 0.0, 0.02222243069860731, -0.02222243069860731, 0.0, -0.07407639052905959, 0.07407639052905959, 0.0, -0.1269841269841273, 0.1269841269841273, 0.0 },
            { 0.0004064026057979405, 0.01097073569837151, -0.01137713830416945, -0.001354705007180082, -0.03656991951085684, 0.03792462451803693, -0.002322278818246472, -0.06268933016038671, 0.06501160897863319, -0.008257036713055641, -0.2228966205884075, 0.2311536573014632, 0.02752405821238199, 0.7430049996893127, -0.7705290579016948, 0.04718262429091383, 1.273683025813419, -1.320865650104333, -0.001709763155693543, -0.04615462455290817, 0.04786438770860171, 0.005699335277544126, 0.1538521163356633, -0.1595514516132074, 0.00976998351890361, 0.2637382374871582, -0.2735082210060619 },
            { 0.00429101918798626, 0.01485535228055983, -0.01914637146854609, -0.01430371040180042, -0.04951892490547719, 0.06382263530727761, -0.02451987961392193, -0.08488693095606216, 0.1094068105699841, -0.08718227311082932, -0.3018218569861812, 0.3890041300970105, 0.2906139385811498, 1.006094880058081, -1.29670881863923, 0.4981797441341205, 1.724680145656626, -2.222859889790747, -0.0180526069550859, -0.06249746835230053, 0.08055007530738642, 0.06017667378557143, 0.2083294548436906, -0.268506128629262, 0.1031567862701371, 0.3571250402383917, -0.4602818265085288 },
            { -0.005081968337032051, -0.001467943892214541, 0.006549912229246592, 0.1032522885798696, 0.02982477582032935, -0.133077064400199, 0.02138018333814192, 0.006175738899621286, -0.02755592223776321, 0.1032522885798696, 0.02982477582032935, -0.133077064400199, -2.097816119650775, -0.6059613432438321, 2.703777462894608, -0.4343893376576202, -0.1254748421809386, 0.5598641798385589, 0.02138018333814192, 0.006175738899621286, -0.02755592223776321, -0.4343893376576202, -0.1254748421809386, 0.5598641798385589, -0.08994787241030353, -0.02598174981930533, 0.1159296222296089 },
            { -0.003753053471914713, -0.0001390290270972038, 0.003892082499011918, 0.07625221851817604, 0.002824705758635755, -0.07907692427681182, 0.01578934892661071, 0.0005849044880900784, -0.01637425341470079, 0.07625221851817604, 0.002824705758635755, -0.07907692427681182, -1.549245400433186, -0.05739062402624316, 1.60663602445943, -0.3207982229993147, -0.01188372752263309, 0.3326819505219478, 0.01578934892661071, 0.0005849044880900784, -0.01637425341470079, -0.3207982229993147, -0.01188372752263309, 0.3326819505219478, -0.06642685519720944, -0.002460732606211248, 0.06888758780342069 },
            { -0.001807012222408755, 0.001807012222408755, 0.0, 0.03671375637977015, -0.03671375637977015, 0.0, 0.007602222219260317, -0.007602222219260317, 0.0, 0.03671375637977015, -0.03671375637977015, 0.0, -0.7459273882034716, 0.7459273882034716, 0.0, -0.1544572477383408, 0.1544572477383408, 0.0, 0.007602222219260317, -0.007602222219260317, 0.0, -0.1544572477383408, 0.1544572477383408, 0.0, -0.0319830612954991, 0.0319830612954991, 0.0 },
            { 0.0001390290270972032, 0.003753053471914712, -0.003892082499011916, -0.002824705758635741, -0.07625221851817603, 0.07907692427681177, -0.0005849044880900755, -0.01578934892661071, 0.01637425341470079, -0.002824705758635741, -0.07625221851817603, 0.07907692427681177, 0.05739062402624288, 1.549245400433186, -1.606636024459429, 0.01188372752263303, 0.3207982229993146, -0.3326819505219477, -0.0005849044880900755, -0.01578934892661071, 0.01637425341470079, 0.01188372752263303, 0.3207982229993146, -0.3326819505219477, 0.002460732606211236, 0.06642685519720942, -0.06888758780342066 },
            { 0.001467943892214541, 0.005081968337032051, -0.00654991222924659, -0.02982477582032934, -0.1032522885798696, 0.133077064400199, -0.006175738899621283, -0.02138018333814192, 0.0275559222377632, -0.02982477582032934, -0.1032522885798696, 0.133077064400199, 0.6059613432438318, 2.097816119650775, -2.703777462894607, 0.1254748421809386, 0.4343893376576202, -0.5598641798385587, -0.006175738899621283, -0.02138018333814192, 0.0275559222377632, 0.1254748421809386, 0.4343893376576202, -0.5598641798385587, 0.02598174981930532, 0.08994787241030353, -0.1159296222296088 } } };
    alignas(32) static const double FE12_C0_D010_Q125[1][125][27] =
        { { { -2.097816119650776, 0.1032522885798695, -0.4343893376576197, -0.6059613432438324, 0.02982477582032931, -0.1254748421809385, 2.703777462894609, -0.1330770644001988, 0.5598641798385582, 0.1032522885798695, -0.005081968337032031, 0.02138018333814184, 0.0298247758203293, -0.001467943892214536, 0.006175738899621264, -0.1330770644001988, 0.006549912229246567, -0.02755592223776311, -0.4343893376576197, 0.02138018333814184, -0.08994787241030325, -0.1254748421809385, 0.006175738899621264, -0.02598174981930525, 0.5598641798385581, -0.02755592223776311, 0.1159296222296085 },
            { -1.006094880058082, 0.3018218569861813, -1.724680145656627, -0.2906139385811502, 0.08718227311082938, -0.4981797441341208, 1.296708818639232, -0.3890041300970107, 2.222859889790747, 0.04951892490547712, -0.01485535228055981, 0.08488693095606198, 0.01430371040180041, -0.004291019187986254, 0.02451987961392188, -0.06382263530727753, 0.01914637146854606, -0.1094068105699839, -0.2083294548436904, 0.06249746835230043, -0.357125040238391, -0.06017667378557139, 0.01805260695508588, -0.1031567862701369, 0.2685061286292618, -0.08055007530738631, 0.460281826508528 },
            { 0.0, 0.0, -2.428953168728527, 0.0, 0.0, -0.7016114096044416, 0.0, 0.0, 3.130564578332968, 0.0, 0.0, 0.1195505035809793, 0.0, 0.0, 0.03453257082773603, 0.0, 0.0, -0.1540830744087153, 0.0, 0.0, -0.502957026729781, 0.0, 0.0, -0.1452808531006224, 0.0, 0.0, 0.6482378798304035 },
            { 0.3018218569861813, -1.006094880058081, -1.724680145656627, 0.08718227311082938, -0.29061393858115, -0.4981797441341209, -0.3890041300970107, 1.296708818639231, 2.222859889790748, -0.01485535228055981, 0.04951892490547709, 0.08488693095606199, -0.004291019187986254, 0.0143037104018004, 0.02451987961392189, 0.01914637146854606, -0.0638226353072775, -0.1094068105699839, 0.06249746835230043, -0.2083294548436903, -0.3571250402383911, 0.01805260695508588, -0.06017667378557136, -0.103156786270137, -0.08055007530738631, 0.2685061286292617, 0.4602818265085281 },
            { 0.1032522885798697, -2.097816119650776, -0.4343893376576203, 0.02982477582032936, -0.6059613432438322, -0.1254748421809387, -0.133077064400199, 2.703777462894609, 0.559864179838559, -0.00508196833703204, 0.1032522885798694, 0.02138018333814188, -0.001467943892214538, 0.0298247758203293, 0.006175738899621273, 0.00654991222924658, -0.1330770644001988, -0.02755592223776315, 0.02138018333814188, -0.4343893376576196, -0.08994787241030339, 0.006175738899621276, -0.1254748421809384, -0.0259817498193053, -0.02755592223776316, 0.559864179838558, 0.1159296222296087 },
            { -1.549245400433187, 0.07625221851817592, -0.3207982229993143, -0.05739062402624319, 0.00282470575863575, -0.01188372752263308, 1.606636024459431, -0.07907692427681168, 0.3326819505219474, 0.07625221851817593, -0.003753053471914698, 0.01578934892661066, 0.00282470575863575, -0.0001390290270972033, 0.0005849044880900763, -0.07907692427681168, 0.003892082499011902, -0.01637425341470073, -0.3207982229993143, 0.01578934892661065, -0.06642685519720924, -0.01188372752263308, 0.0005849044880900763, -0.002460732606211241, 0.3326819505219474, -0.01637425341470073, 0.06888758780342048 },
            { -0.7430049996893134, 0.2228966205884076, -1.27368302581342, -0.02752405821238214, 0.008257036713055683, -0.04718262429091406, 0.7705290579016958, -0.2311536573014633, 1.320865650104334, 0.0365699195108568, -0.01097073569837149, 0.06268933016038658, 0.001354705007180087, -0.0004064026057979417, 0.002322278818246478, -0.03792462451803689, 0.01137713830416944, -0.06501160897863306, -0.1538521163356632, 0.04615462455290811, -0.2637382374871578, -0.005699335277544148, 0.001709763155693549, -0.00976998351890364, 0.1595514516132074, -0.04786438770860166, 0.2735082210060614 },
            { 0.0, 0.0, -1.793791404914326, 0.0, 0.0, -0.06644964579024051, 0.0, 0.0, 1.860241050704566, 0.0, 0.0, 0.08828851397287188, 0.0, 0.0, 0.003270581219628623, 0.0, 0.0, -0.09155909519250051, 0.0, 0.0, -0.3714357292699129, 0.0, 0.0, -0.01375955564075424, 0.0, 0.0, 0.3851952849106671 },
            { 0.2228966205884076, -0.7430049996893131, -1.27368302581342, 0.008257036713055683, -0.02752405821238213, -0.04718262429091407, -0.2311536573014633, 0.7705290579016953, 1.320865650104334, -0.01097073569837149, 0.03656991951085678, 0.06268933016038659, -0.0004064026057979417, 0.001354705007180086, 0.002322278818246479, 0.01137713830416944, -0.03792462451803687, -0.06501160897863308, 0.04615462455290811, -0.1538521163356631, -0.2637382374871579, 0.001709763155693549, -0.005699335277544145, -0.009769983518903643, -0.04786438770860166, 0.1595514516132073, 0.2735082210060615 },
            { 0.07625221851817607, -1.549245400433187, -0.3207982229993148, 0.002824705758635756, -0.05739062402624318, -0.01188372752263309, -0.07907692427681183, 1.60663602445943, 0.3326819505219479, -0.003753053471914706, 0.0762522185181759, 0.01578934892661068, -0.0001390290270972035, 0.00282470575863575, 0.0005849044880900772, 0.00389208249901191, -0.07907692427681166, -0.01637425341470076, 0.01578934892661069, -0.3207982229993142, -0.06642685519720934, 0.0005849044880900774, -0.01188372752263307, -0.002460732606211245, -0.01637425341470077, 0.3326819505219473, 0.06888758780342059 },
            { -0.745927388203472, 0.03671375637977009, -0.1544572477383406, 0.745927388203472, -0.03671375637977009, 0.1544572477383406, 0.0, 0.0, 0.0, 0.03671375637977008, -0.001807012222408748, 0.007602222219260289, -0.03671375637977008, 0.001807012222408748, -0.007602222219260289, 0.0, 0.0, 0.0, -0.1544572477383406, 0.007602222219260289, -0.031983061295499, 0.1544572477383406, -0.007602222219260289, 0.031983061295499, 0.0, 0.0, 0.0 },
            { -0.3577404707384657, 0.107319791937676, -0.6132502007612529, 0.3577404707384657, -0.107319791937676, 0.6132502007612529, 0.0, 0.0, 0.0, 0.01760760725183835, -0.005282166546286776, 0.03018352567107005, -0.01760760725183835, 0.005282166546286776, -0.03018352567107005, 0.0, 0.0, 0.0, -0.07407639052905952, 0.02222243069860728, -0.1269841269841271, 0.07407639052905952, -0.02222243069860728, 0.1269841269841271, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, -0.8636708795620426, 0.0, 0.0, 0.8636708795620426, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04250896637662162, 0.0, 0.0, -0.04250896637662162, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1788380868145793, 0.0, 0.0, 0.1788380868145793, 0.0, 0.0, 0.0 },
            { 0.107319791937676, -0.3577404707384655, -0.613250200761253, -0.107319791937676, 0.3577404707384655, 0.613250200761253, 0.0, 0.0, 0.0, -0.005282166546286776, 0.01760760725183835, 0.03018352567107006, 0.005282166546286776, -0.01760760725183835, -0.03018352567107006, 0.0, 0.0, 0.0, 0.02222243069860728, -0.07407639052905948, -0.1269841269841271, -0.02222243069860728, 0.07407639052905948, 0.1269841269841271, 0.0, 0.0, 0.0 },
            { 0.03671375637977016, -0.7459273882034719, -0.1544572477383409, -0.03671375637977016, 0.7459273882034719, 0.1544572477383409, 0.0, 0.0, 0.0, -0.001807012222408751, 0.03671375637977008, 0.007602222219260301, 0.001807012222408751, -0.03671375637977008, -0.007602222219260301, 0.0, 0.0, 0.0, 0.007602222219260304, -0.1544572477383405, -0.03198306129549905, -0.007602222219260304, 0.1544572477383405, 0.03198306129549905, 0.0, 0.0, 0.0 },
            { 0.05739062402624291, -0.002824705758635737, 0.01188372752263302, 1.549245400433187, -0.0762522185181759, 0.3207982229993142, -1.60663602445943, 0.07907692427681165, -0.3326819505219473, -0.002824705758635737, 0.0001390290270972026, -0.0005849044880900734, -0.0762522185181759, 0.003753053471914698, -0.01578934892661065, 0.07907692427681164, -0.0038920824990119, 0.01637425341470073, 0.01188372752263302, -0.0005849044880900735, 0.002460732606211229, 0.3207982229993142, -0.01578934892661065, 0.06642685519720921, -0.3326819505219472, 0.01637425341470073, -0.06888758780342046 },
            { 0.02752405821238201, -0.008257036713055643, 0.04718262429091383, 0.7430049996893133, -0.2228966205884076, 1.273683025813419, -0.7705290579016953, 0.2311536573014632, -1.320865650104333, -0.00135470500718008, 0.0004064026057979397, -0.002322278818246467, -0.03656991951085679, 0.01097073569837149, -0.06268933016038655, 0.03792462451803687, -0.01137713830416943, 0.06501160897863303, 0.005699335277544121, -0.001709763155693541, 0.009769983518903593, 0.1538521163356631, -0.04615462455290809, 0.2637382374871577, -0.1595514516132073, 0.04786438770860164, -0.2735082210060613 },
            { 0.0, 0.0, 0.06644964579024019, 0.0, 0.0, 1.793791404914325, 0.0, 0.0, -1.860241050704565, 0.0, 0.0, -0.003270581219628607, 0.0, 0.0, -0.08828851397287185, 0.0, 0.0, 0.09155909519250047, 0.0, 0.0, 0.01375955564075417, 0.0, 0.0, 0.3714357292699128, 0.0, 0.0, -0.385195284910667 },
            { -0.008257036713055643, 0.02752405821238199, 0.04718262429091384, -0.2228966205884076, 0.7430049996893129, 1.27368302581342, 0.2311536573014632, -0.770529057901695, -1.320865650104334, 0.0004064026057979397, -0.00135470500718008, -0.002322278818246467, 0.01097073569837149, -0.03656991951085677, -0.06268933016038658, -0.01137713830416943, 0.03792462451803685, 0.06501160897863305, -0.001709763155693541, 0.005699335277544118, 0.009769983518903597, -0.04615462455290809, 0.1538521163356631, 0.2637382374871578, 0.04786438770860164, -0.1595514516132072, -0.2735082210060614 },
            { -0.002824705758635742, 0.0573906240262429, 0.01188372752263304, -0.07625221851817605, 1.549245400433186, 0.3207982229993147, 0.0790769242768118, -1.60663602445943, -0.3326819505219478, 0.0001390290270972029, -0.002824705758635736, -0.0005849044880900743, 0.003753053471914705, -0.07625221851817587, -0.01578934892661068, -0.003892082499011908, 0.07907692427681162, 0.01637425341470075, -0.0005849044880900747, 0.01188372752263302, 0.002460732606211232, -0.01578934892661068, 0.3207982229993141, 0.06642685519720933, 0.01637425341470076, -0.3326819505219472, -0.06888758780342057 },
            { 0.6059613432438321, -0.02982477582032929, 0.1254748421809384, 2.097816119650776, -0.1032522885798695, 0.4343893376576197, -2.703777462894608, 0.1330770644001988, -0.559864179838558, -0.02982477582032929, 0.001467943892214535, -0.006175738899621261, -0.1032522885798695, 0.005081968337032031, -0.02138018333814184, 0.1330770644001987, -0.006549912229246564, 0.0275559222377631, 0.1254748421809384, -0.006175738899621261, 0.02598174981930524, 0.4343893376576197, -0.02138018333814184, 0.08994787241030325, -0.559864179838558, 0.0275559222377631, -0.1159296222296085 },
            { 0.29061393858115, -0.08718227311082934, 0.4981797441341205, 1.006094880058082, -0.3018218569861813, 1.724680145656627, -1.296708818639231, 0.3890041300970106, -2.222859889790747, -0.0143037104018004, 0.004291019187986253, -0.02451987961392187, -0.04951892490547712, 0.01485535228055981, -0.08488693095606198, 0.06382263530727751, -0.01914637146854605, 0.1094068105699838, 0.06017667378557137, -0.01805260695508587, 0.1031567862701369, 0.2083294548436904, -0.06249746835230043, 0.357125040238391, -0.2685061286292618, 0.0805500753073863, -0.4602818265085279 },
            { 0.0, 0.0, 0.7016114096044412, 0.0, 0.0, 2.428953168728527, 0.0, 0.0, -3.130564578332967, 0.0, 0.0, -0.03453257082773602, 0.0, 0.0, -0.1195505035809793, 0.0, 0.0, 0.1540830744087153, 0.0, 0.0, 0.1452808531006224, 0.0, 0.0, 0.502957026729781, 0.0, 0.0, -0.6482378798304034 },
            { -0.08718227311082934, 0.2906139385811499, 0.4981797441341207, -0.3018218569861813, 1.006094880058081, 1.724680145656627, 0.3890041300970106, -1.296708818639231, -2.222859889790747, 0.004291019187986253, -0.01430371040180039, -0.02451987961392188, 0.01485535228055981, -0.04951892490547709, -0.08488693095606199, -0.01914637146854605, 0.06382263530727747, 0.1094068105699839, -0.01805260695508587, 0.06017667378557134, 0.1031567862701369, -0.06249746835230043, 0.2083294548436903, 0.3571250402383911, 0.0805500753073863, -0.2685061286292617, -0.4602818265085281 },
            { -0.02982477582032935, 0.605961343243832, 0.1254748421809386, -0.1032522885798697, 2.097816119650776, 0.4343893376576203, 0.133077064400199, -2.703777462894608, -0.5598641798385589, 0.001467943892214538, -0.02982477582032928, -0.006175738899621271, 0.00508196833703204, -0.1032522885798694, -0.02138018333814188, -0.006549912229246577, 0.1330770644001987, 0.02755592223776314, -0.006175738899621273, 0.1254748421809384, 0.02598174981930529, -0.02138018333814188, 0.4343893376576196, 0.08994787241030339, 0.02755592223776316, -0.5598641798385579, -0.1159296222296087 },
            { -1.006094880058082, 0.04951892490547712, -0.2083294548436904, -0.2906139385811501, 0.01430371040180041, -0.06017667378557139, 1.296708818639232, -0.06382263530727753, 0.2685061286292618, 0.3018218569861813, -0.01485535228055981, 0.06249746835230043, 0.08718227311082938, -0.004291019187986254, 0.01805260695508588, -0.3890041300970107, 0.01914637146854606, -0.08055007530738631, -1.724680145656626, 0.08488693095606197, -0.357125040238391, -0.4981797441341208, 0.02451987961392188, -0.1031567862701369, 2.222859889790747, -0.1094068105699838, 0.4602818265085279 },
            { -0.482514600873403, 0.1447512115856799, -0.8271420207085717, -0.1393759886489395, 0.04181188131171024, -0.2389227946276919, 0.6218905895223426, -0.1865630928973901, 1.066064815336264, 0.1447512115856799, -0.04342441289361039, 0.2481371743658524, 0.04181188131171024, -0.01254328981463226, 0.07167526938085102, -0.1865630928973901, 0.05596770270824264, -0.3198124437467034, -0.8271420207085717, 0.2481371743658524, -1.417913408596236, -0.2389227946276919, 0.07167526938085103, -0.4095691255434949, 1.066064815336264, -0.3198124437467034, 1.827482534139731 },
            { 0.0, 0.0, -1.164905409996295, 0.0, 0.0, -0.3364869019649211, 0.0, 0.0, 1.501392311961216, 0.0, 0.0, 0.3494639730579219, 0.0, 0.0, 0.100943860877929, 0.0, 0.0, -0.4504078339358509, 0.0, 0.0, -1.996918254938955, 0.0, 0.0, -0.5768166507903358, 0.0, 0.0, 2.573734905729291 },
            { 0.1447512115856799, -0.4825146008734028, -0.827142020708572, 0.04181188131171024, -0.1393759886489394, -0.2389227946276919, -0.1865630928973901, 0.6218905895223422, 1.066064815336264, -0.04342441289361039, 0.1447512115856798, 0.2481371743658525, -0.01254328981463226, 0.04181188131171022, 0.07167526938085104, 0.05596770270824264, -0.18656309289739, -0.3198124437467035, 0.2481371743658524, -0.8271420207085712, -1.417913408596236, 0.07167526938085103, -0.2389227946276918, -0.4095691255434951, -0.3198124437467034, 1.066064815336263, 1.827482534139732 },
            { 0.04951892490547721, -1.006094880058081, -0.2083294548436908, 0.01430371040180044, -0.2906139385811501, -0.06017667378557149, -0.06382263530727765, 1.296708818639231, 0.2685061286292623, -0.01485535228055983, 0.3018218569861812, 0.06249746835230053, -0.004291019187986263, 0.08718227311082936, 0.01805260695508591, 0.0191463714685461, -0.3890041300970106, -0.08055007530738643, 0.08488693095606213, -1.724680145656626, -0.3571250402383916, 0.02451987961392193, -0.4981797441341206, -0.1031567862701371, -0.1094068105699841, 2.222859889790747, 0.4602818265085287 },
            { -0.7430049996893135, 0.03656991951085679, -0.1538521163356632, -0.02752405821238214, 0.001354705007180087, -0.005699335277544148, 0.7705290579016957, -0.03792462451803689, 0.1595514516132074, 0.2228966205884076, -0.01097073569837149, 0.04615462455290811, 0.008257036713055683, -0.0004064026057979417, 0.001709763155693549, -0.2311536573014634, 0.01137713830416944, -0.04786438770860166, -1.27368302581342, 0.06268933016038658, -0.2637382374871578, -0.04718262429091406, 0.002322278818246478, -0.00976998351890364, 1.320865650104334, -0.06501160897863306, 0.2735082210060614 },
            { -0.3563389179073601, 0.1068993352923503, -0.6108476138991101, -0.01320030568289661, 0.003960005018380667, -0.02262838781823026, 0.3695392235902568, -0.110859340310731, 0.6334760017173404, 0.1068993352923503, -0.03206909857911511, 0.183250272729709, 0.003960005018380667, -0.001187975500136976, 0.006788367744707598, -0.110859340310731, 0.03325707407925209, -0.1900386404744167, -0.6108476138991101, 0.183250272729709, -1.04713459197079, -0.02262838781823026, 0.006788367744707599, -0.03879030891804856, 0.6334760017173404, -0.1900386404744166, 1.085924900888839 },
            { 0.0, 0.0, -0.8602871965141199, 0.0, 0.0, -0.0318686884827462, 0.0, 0.0, 0.8921558849968662, 0.0, 0.0, 0.2580805094429443, 0.0, 0.0, 0.009560397262951289, 0.0, 0.0, -0.2676409067058956, 0.0, 0.0, -1.474731933140191, 0.0, 0.0, -0.05463032899157122, 0.0, 0.0, 1.529362262131762 },
            { 0.1068993352923503, -0.3563389179073599, -0.6108476138991104, 0.003960005018380667, -0.01320030568289661, -0.02262838781823026, -0.110859340310731, 0.3695392235902565, 0.6334760017173406, -0.03206909857911511, 0.1068993352923503, 0.1832502727297091, -0.001187975500136976, 0.003960005018380665, 0.0067883677447076, 0.03325707407925209, -0.110859340310731, -0.1900386404744167, 0.183250272729709, -0.6108476138991098, -1.04713459197079, 0.006788367744707599, -0.02262838781823025, -0.03879030891804857, -0.1900386404744166, 0.6334760017173401, 1.085924900888839 },
            { 0.03656991951085687, -0.7430049996893133, -0.1538521163356634, 0.00135470500718009, -0.02752405821238214, -0.005699335277544157, -0.03792462451803696, 0.7705290579016955, 0.1595514516132076, -0.01097073569837152, 0.2228966205884076, 0.04615462455290818, -0.0004064026057979425, 0.008257036713055681, 0.001709763155693551, 0.01137713830416946, -0.2311536573014633, -0.04786438770860174, 0.06268933016038669, -1.273683025813419, -0.2637382374871582, 0.002322278818246483, -0.04718262429091405, -0.009769983518903656, -0.06501160897863319, 1.320865650104333, 0.2735082210060619 },
            { -0.3577404707384657, 0.01760760725183836, -0.07407639052905952, 0.3577404707384657, -0.01760760725183836, 0.07407639052905952, 0.0, 0.0, 0.0, 0.107319791937676, -0.005282166546286777, 0.02222243069860728, -0.107319791937676, 0.005282166546286777, -0.02222243069860728, 0.0, 0.0, 0.0, -0.6132502007612528, 0.03018352567107005, -0.1269841269841271, 0.6132502007612528, -0.03018352567107005, 0.1269841269841271, 0.0, 0.0, 0.0 },
            { -0.1715693061122318, 0.05146966513698484, -0.2941096130404399, 0.1715693061122318, -0.05146966513698484, 0.2941096130404399, 0.0, 0.0, 0.0, 0.05146966513698484, -0.01544056153948907, 0.08823095249250071, -0.05146966513698484, 0.01544056153948907, -0.08823095249250071, 0.0, 0.0, 0.0, -0.2941096130404399, 0.08823095249250071, -0.5041721415263706, 0.2941096130404399, -0.08823095249250071, 0.5041721415263706, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, -0.4142092540156869, 0.0, 0.0, 0.4142092540156869, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1242600560899965, 0.0, 0.0, -0.1242600560899965, 0.0, 0.0, 0.0, 0.0, 0.0, -0.7100508020743098, 0.0, 0.0, 0.7100508020743098, 0.0, 0.0, 0.0 },
            { 0.05146966513698484, -0.1715693061122317, -0.29410961304044, -0.05146966513698484, 0.1715693061122317, 0.29410961304044, 0.0, 0.0, 0.0, -0.01544056153948907, 0.05146966513698481, 0.08823095249250074, 0.01544056153948907, -0.05146966513698481, -0.08823095249250074, 0.0, 0.0, 0.0, 0.08823095249250071, -0.2941096130404398, -0.5041721415263708, -0.08823095249250071, 0.2941096130404398, 0.5041721415263708, 0.0, 0.0, 0.0 },
            { 0.01760760725183839, -0.3577404707384656, -0.07407639052905964, -0.01760760725183839, 0.3577404707384656, 0.07407639052905964, 0.0, 0.0, 0.0, -0.005282166546286787, 0.1073197919376759, 0.02222243069860732, 0.005282166546286787, -0.1073197919376759, -0.02222243069860732, 0.0, 0.0, 0.0, 0.0301835256710701, -0.6132502007612527, -0.1269841269841273, -0.0301835256710701, 0.6132502007612527, 0.1269841269841273, 0.0, 0.0, 0.0 },
            { 0.02752405821238201, -0.00135470500718008, 0.005699335277544121, 0.7430049996893133, -0.03656991951085679, 0.1538521163356631, -0.7705290579016955, 0.03792462451803687, -0.1595514516132073, -0.008257036713055643, 0.0004064026057979398, -0.001709763155693541, -0.2228966205884076, 0.01097073569837149, -0.0461546245529081, 0.2311536573014633, -0.01137713830416943, 0.04786438770860164, 0.04718262429091383, -0.002322278818246467, 0.009769983518903593, 1.273683025813419, -0.06268933016038655, 0.2637382374871577, -1.320865650104333, 0.06501160897863303, -0.2735082210060614 },
            { 0.01320030568289655, -0.003960005018380648, 0.02262838781823015, 0.35633891790736, -0.1068993352923503, 0.6108476138991099, -0.3695392235902566, 0.110859340310731, -0.6334760017173402, -0.003960005018380649, 0.00118797550013697, -0.006788367744707566, -0.1068993352923503, 0.0320690985791151, -0.183250272729709, 0.110859340310731, -0.03325707407925207, 0.1900386404744166, 0.02262838781823015, -0.006788367744707566, 0.03879030891804837, 0.6108476138991099, -0.183250272729709, 1.04713459197079, -0.6334760017173402, 0.1900386404744166, -1.085924900888838 },
            { 0.0, 0.0, 0.03186868848274605, 0.0, 0.0, 0.8602871965141197, 0.0, 0.0, -0.8921558849968658, 0.0, 0.0, -0.009560397262951244, 0.0, 0.0, -0.2580805094429442, 0.0, 0.0, 0.2676409067058955, 0.0, 0.0, 0.05463032899157095, 0.0, 0.0, 1.47473193314019, 0.0, 0.0, -1.529362262131762 },
            { -0.003960005018380648, 0.01320030568289654, 0.02262838781823016, -0.1068993352923503, 0.3563389179073598, 0.6108476138991101, 0.110859340310731, -0.3695392235902564, -0.6334760017173404, 0.00118797550013697, -0.003960005018380646, -0.006788367744707568, 0.0320690985791151, -0.1068993352923503, -0.183250272729709, -0.03325707407925207, 0.1108593403107309, 0.1900386404744166, -0.006788367744707566, 0.02262838781823014, 0.03879030891804838, -0.183250272729709, 0.6108476138991096, 1.04713459197079, 0.1900386404744166, -0.6334760017173399, -1.085924900888839 },
            { -0.001354705007180083, 0.027524058212382, 0.00569933527754413, -0.03656991951085686, 0.7430049996893131, 0.1538521163356634, 0.03792462451803694, -0.7705290579016952, -0.1595514516132076, 0.0004064026057979406, -0.008257036713055641, -0.001709763155693543, 0.01097073569837151, -0.2228966205884075, -0.04615462455290817, -0.01137713830416946, 0.2311536573014632, 0.04786438770860172, -0.002322278818246471, 0.04718262429091381, 0.009769983518903607, -0.06268933016038668, 1.273683025813419, 0.2637382374871581, 0.06501160897863316, -1.320865650104333, -0.2735082210060618 },
            { 0.2906139385811501, -0.0143037104018004, 0.06017667378557137, 1.006094880058082, -0.04951892490547712, 0.2083294548436904, -1.296708818639231, 0.06382263530727751, -0.2685061286292618, -0.08718227311082935, 0.004291019187986253, -0.01805260695508587, -0.3018218569861813, 0.01485535228055981, -0.06249746835230043, 0.3890041300970106, -0.01914637146854605, 0.0805500753073863, 0.4981797441341205, -0.02451987961392187, 0.1031567862701369, 1.724680145656626, -0.08488693095606197, 0.357125040238391, -2.222859889790747, 0.1094068105699838, -0.4602818265085279 },
            { 0.1393759886489395, -0.04181188131171022, 0.2389227946276918, 0.482514600873403, -0.1447512115856799, 0.8271420207085717, -0.6218905895223423, 0.1865630928973901, -1.066064815336263, -0.04181188131171022, 0.01254328981463225, -0.07167526938085099, -0.1447512115856799, 0.04342441289361039, -0.2481371743658524, 0.1865630928973901, -0.05596770270824263, 0.3198124437467034, 0.2389227946276918, -0.07167526938085099, 0.4095691255434947, 0.8271420207085717, -0.2481371743658524, 1.417913408596236, -1.066064815336263, 0.3198124437467034, -1.827482534139731 },
            { 0.0, 0.0, 0.336486901964921, 0.0, 0.0, 1.164905409996295, 0.0, 0.0, -1.501392311961216, 0.0, 0.0, -0.100943860877929, 0.0, 0.0, -0.3494639730579219, 0.0, 0.0, 0.4504078339358508, 0.0, 0.0, 0.5768166507903355, 0.0, 0.0, 1.996918254938955, 0.0, 0.0, -2.573734905729291 },
            { -0.04181188131171022, 0.1393759886489394, 0.2389227946276919, -0.1447512115856799, 0.4825146008734028, 0.827142020708572, 0.1865630928973901, -0.621890589522342, -1.066064815336264, 0.01254328981463225, -0.0418118813117102, -0.07167526938085102, 0.04342441289361039, -0.1447512115856798, -0.2481371743658525, -0.05596770270824263, 0.18656309289739, 0.3198124437467035, -0.07167526938085099, 0.2389227946276916, 0.4095691255434948, -0.2481371743658524, 0.8271420207085712, 1.417913408596236, 0.3198124437467034, -1.066064815336263, -1.827482534139731 },
            { -0.01430371040180043, 0.29061393858115, 0.06017667378557147, -0.04951892490547721, 1.006094880058081, 0.2083294548436908, 0.06382263530727764, -1.296708818639231, -0.2685061286292622, 0.004291019187986261, -0.08718227311082932, -0.0180526069550859, 0.01485535228055983, -0.3018218569861812, -0.06249746835230053, -0.01914637146854609, 0.3890041300970105, 0.08055007530738642, -0.02451987961392191, 0.4981797441341204, 0.103156786270137, -0.08488693095606213, 1.724680145656626, 0.3571250402383916, 0.109406810569984, -2.222859889790746, -0.4602818265085286 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.428953168728527, 0.1195505035809793, -0.502957026729781, -0.7016114096044416, 0.03453257082773603, -0.1452808531006224, 3.130564578332968, -0.1540830744087153, 0.6482378798304035 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.164905409996295, 0.3494639730579219, -1.996918254938955, -0.3364869019649211, 0.100943860877929, -0.5768166507903358, 1.501392311961216, -0.4504078339358509, 2.573734905729291 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.812359691877328, 0.0, 0.0, -0.8123596918773279, 0.0, 0.0, 3.624719383754656 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3494639730579219, -1.164905409996294, -1.996918254938956, 0.100943860877929, -0.336486901964921, -0.5768166507903359, -0.4504078339358509, 1.501392311961215, 2.573734905729292 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1195505035809795, -2.428953168728526, -0.5029570267297818, 0.0345325708277361, -0.7016114096044413, -0.1452808531006227, -0.1540830744087156, 3.130564578332967, 0.6482378798304045 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.793791404914326, 0.08828851397287188, -0.3714357292699129, -0.06644964579024051, 0.003270581219628623, -0.01375955564075424, 1.860241050704566, -0.09155909519250051, 0.3851952849106671 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8602871965141199, 0.2580805094429443, -1.474731933140191, -0.0318686884827462, 0.009560397262951289, -0.05463032899157122, 0.8921558849968662, -0.2676409067058956, 1.529362262131762 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.076938620211366, 0.0, 0.0, -0.07693862021136613, 0.0, 0.0, 2.153877240422733 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2580805094429443, -0.8602871965141193, -1.474731933140191, 0.009560397262951289, -0.03186868848274619, -0.05463032899157123, -0.2676409067058956, 0.8921558849968657, 1.529362262131763 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08828851397287205, -1.793791404914325, -0.3714357292699134, 0.00327058121962863, -0.0664496457902405, -0.01375955564075426, -0.09155909519250069, 1.860241050704566, 0.3851952849106677 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8636708795620426, 0.04250896637662162, -0.1788380868145793, 0.8636708795620426, -0.04250896637662162, 0.1788380868145793, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4142092540156869, 0.1242600560899965, -0.7100508020743098, 0.4142092540156869, -0.1242600560899965, 0.7100508020743098, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1242600560899965, -0.4142092540156866, -0.71005080207431, -0.1242600560899965, 0.4142092540156866, 0.71005080207431, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04250896637662171, -0.8636708795620424, -0.1788380868145796, -0.04250896637662171, 0.8636708795620424, 0.1788380868145796, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06644964579024019, -0.003270581219628607, 0.01375955564075417, 1.793791404914325, -0.08828851397287185, 0.3714357292699128, -1.860241050704565, 0.09155909519250047, -0.385195284910667 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03186868848274605, -0.009560397262951244, 0.05463032899157095, 0.8602871965141197, -0.2580805094429442, 1.47473193314019, -0.8921558849968658, 0.2676409067058955, -1.529362262131762 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07693862021136576, 0.0, 0.0, 2.076938620211366, 0.0, 0.0, -2.153877240422732 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.009560397262951244, 0.03186868848274603, 0.05463032899157097, -0.2580805094429442, 0.8602871965141192, 1.474731933140191, 0.2676409067058955, -0.8921558849968654, -1.529362262131762 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.003270581219628614, 0.06644964579024018, 0.01375955564075419, -0.08828851397287203, 1.793791404914325, 0.3714357292699134, 0.09155909519250065, -1.860241050704565, -0.3851952849106676 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7016114096044412, -0.03453257082773602, 0.1452808531006224, 2.428953168728527, -0.1195505035809793, 0.502957026729781, -3.130564578332967, 0.1540830744087153, -0.6482378798304034 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.336486901964921, -0.100943860877929, 0.5768166507903355, 1.164905409996295, -0.3494639730579219, 1.996918254938955, -1.501392311961216, 0.4504078339358508, -2.573734905729291 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8123596918773276, 0.0, 0.0, 2.812359691877328, 0.0, 0.0, -3.624719383754655 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.100943860877929, 0.3364869019649208, 0.5768166507903357, -0.3494639730579219, 1.164905409996294, 1.996918254938956, 0.4504078339358508, -1.501392311961215, -2.573734905729292 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03453257082773609, 0.701611409604441, 0.1452808531006226, -0.1195505035809795, 2.428953168728526, 0.5029570267297818, 0.1540830744087156, -3.130564578332967, -0.6482378798304044 },
            { 0.3018218569861813, -0.01485535228055981, 0.06249746835230043, 0.08718227311082938, -0.004291019187986254, 0.01805260695508588, -0.3890041300970107, 0.01914637146854606, -0.08055007530738631, -1.006094880058081, 0.04951892490547709, -0.2083294548436903, -0.29061393858115, 0.0143037104018004, -0.06017667378557136, 1.296708818639231, -0.06382263530727748, 0.2685061286292617, -1.724680145656627, 0.08488693095606199, -0.3571250402383911, -0.4981797441341209, 0.02451987961392188, -0.103156786270137, 2.222859889790748, -0.1094068105699839, 0.4602818265085281 },
            { 0.1447512115856799, -0.04342441289361039, 0.2481371743658524, 0.04181188131171024, -0.01254328981463226, 0.07167526938085102, -0.1865630928973901, 0.05596770270824264, -0.3198124437467034, -0.4825146008734027, 0.1447512115856798, -0.8271420207085712, -0.1393759886489394, 0.04181188131171022, -0.2389227946276918, 0.6218905895223422, -0.18656309289739, 1.066064815336263, -0.8271420207085719, 0.2481371743658525, -1.417913408596237, -0.2389227946276919, 0.07167526938085104, -0.4095691255434951, 1.066064815336264, -0.3198124437467035, 1.827482534139732 },
            { 0.0, 0.0, 0.3494639730579219, 0.0, 0.0, 0.100943860877929, 0.0, 0.0, -0.4504078339358509, 0.0, 0.0, -1.164905409996294, 0.0, 0.0, -0.336486901964921, 0.0, 0.0, 1.501392311961215, 0.0, 0.0, -1.996918254938956, 0.0, 0.0, -0.5768166507903359, 0.0, 0.0, 2.573734905729292 },
            { -0.04342441289361039, 0.1447512115856798, 0.2481371743658525, -0.01254328981463226, 0.04181188131171022, 0.07167526938085104, 0.05596770270824264, -0.18656309289739, -0.3198124437467035, 0.1447512115856798, -0.4825146008734025, -0.8271420207085715, 0.04181188131171022, -0.1393759886489394, -0.2389227946276918, -0.18656309289739, 0.6218905895223419, 1.066064815336263, 0.2481371743658525, -0.8271420207085715, -1.417913408596237, 0.07167526938085104, -0.2389227946276918, -0.4095691255434952, -0.3198124437467035, 1.066064815336263, 1.827482534139732 },
            { -0.01485535228055983, 0.3018218569861812, 0.06249746835230053, -0.004291019187986263, 0.08718227311082936, 0.01805260695508591, 0.0191463714685461, -0.3890041300970106, -0.08055007530738643, 0.04951892490547719, -1.006094880058081, -0.2083294548436906, 0.01430371040180043, -0.2906139385811499, -0.06017667378557146, -0.06382263530727761, 1.296708818639231, 0.2685061286292621, 0.08488693095606216, -1.724680145656626, -0.3571250402383917, 0.02451987961392193, -0.4981797441341207, -0.1031567862701371, -0.1094068105699841, 2.222859889790747, 0.4602818265085288 },
            { 0.2228966205884076, -0.01097073569837149, 0.04615462455290811, 0.008257036713055683, -0.0004064026057979417, 0.001709763155693549, -0.2311536573014634, 0.01137713830416944, -0.04786438770860166, -0.743004999689313, 0.03656991951085677, -0.1538521163356631, -0.02752405821238213, 0.001354705007180086, -0.005699335277544145, 0.7705290579016953, -0.03792462451803687, 0.1595514516132073, -1.27368302581342, 0.06268933016038659, -0.2637382374871579, -0.04718262429091407, 0.002322278818246479, -0.009769983518903643, 1.320865650104334, -0.06501160897863309, 0.2735082210060615 },
            { 0.1068993352923503, -0.03206909857911511, 0.183250272729709, 0.003960005018380667, -0.001187975500136976, 0.006788367744707598, -0.110859340310731, 0.03325707407925209, -0.1900386404744167, -0.3563389179073599, 0.1068993352923503, -0.6108476138991097, -0.01320030568289661, 0.003960005018380665, -0.02262838781823025, 0.3695392235902566, -0.110859340310731, 0.6334760017173401, -0.6108476138991104, 0.1832502727297091, -1.04713459197079, -0.02262838781823026, 0.0067883677447076, -0.03879030891804857, 0.6334760017173406, -0.1900386404744167, 1.085924900888839 },
            { 0.0, 0.0, 0.2580805094429443, 0.0, 0.0, 0.009560397262951289, 0.0, 0.0, -0.2676409067058956, 0.0, 0.0, -0.8602871965141193, 0.0, 0.0, -0.03186868848274619, 0.0, 0.0, 0.8921558849968657, 0.0, 0.0, -1.474731933140191, 0.0, 0.0, -0.05463032899157123, 0.0, 0.0, 1.529362262131763 },
            { -0.03206909857911511, 0.1068993352923503, 0.1832502727297091, -0.001187975500136976, 0.003960005018380665, 0.0067883677447076, 0.03325707407925209, -0.110859340310731, -0.1900386404744167, 0.1068993352923503, -0.3563389179073597, -0.6108476138991099, 0.003960005018380665, -0.0132003056828966, -0.02262838781823025, -0.110859340310731, 0.3695392235902564, 0.6334760017173403, 0.1832502727297091, -0.61084761389911, -1.04713459197079, 0.0067883677447076, -0.02262838781823025, -0.03879030891804858, -0.1900386404744167, 0.6334760017173403, 1.085924900888839 },
            { -0.01097073569837152, 0.2228966205884076, 0.04615462455290818, -0.0004064026057979425, 0.008257036713055681, 0.001709763155693551, 0.01137713830416946, -0.2311536573014633, -0.04786438770860174, 0.03656991951085684, -0.7430049996893129, -0.1538521163356633, 0.001354705007180089, -0.02752405821238212, -0.005699335277544154, -0.03792462451803694, 0.7705290579016951, 0.1595514516132075, 0.06268933016038672, -1.27368302581342, -0.2637382374871582, 0.002322278818246483, -0.04718262429091406, -0.009769983518903659, -0.06501160897863321, 1.320865650104334, 0.273508221006062 },
            { 0.107319791937676, -0.005282166546286777, 0.02222243069860728, -0.107319791937676, 0.005282166546286777, -0.02222243069860728, 0.0, 0.0, 0.0, -0.3577404707384655, 0.01760760725183835, -0.07407639052905948, 0.3577404707384655, -0.01760760725183835, 0.07407639052905948, 0.0, 0.0, 0.0, -0.613250200761253, 0.03018352567107006, -0.1269841269841271, 0.613250200761253, -0.03018352567107006, 0.1269841269841271, 0.0, 0.0, 0.0 },
            { 0.05146966513698484, -0.01544056153948907, 0.08823095249250071, -0.05146966513698484, 0.01544056153948907, -0.08823095249250071, 0.0, 0.0, 0.0, -0.1715693061122317, 0.05146966513698481, -0.2941096130404398, 0.1715693061122317, -0.05146966513698481, 0.2941096130404398, 0.0, 0.0, 0.0, -0.29410961304044, 0.08823095249250074, -0.5041721415263708, 0.29410961304044, -0.08823095249250074, 0.5041721415263708, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.1242600560899965, 0.0, 0.0, -0.1242600560899965, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4142092540156866, 0.0, 0.0, 0.4142092540156866, 0.0, 0.0, 0.0, 0.0, 0.0, -0.71005080207431, 0.0, 0.0, 0.71005080207431, 0.0, 0.0, 0.0 },
            { -0.01544056153948907, 0.05146966513698481, 0.08823095249250074, 0.01544056153948907, -0.05146966513698481, -0.08823095249250074, 0.0, 0.0, 0.0, 0.05146966513698481, -0.1715693061122316, -0.2941096130404399, -0.05146966513698481, 0.1715693061122316, 0.2941096130404399, 0.0, 0.0, 0.0, 0.08823095249250074, -0.2941096130404399, -0.5041721415263709, -0.08823095249250074, 0.2941096130404399, 0.5041721415263709, 0.0, 0.0, 0.0 },
            { -0.005282166546286787, 0.1073197919376759, 0.02222243069860732, 0.005282166546286787, -0.1073197919376759, -0.02222243069860732, 0.0, 0.0, 0.0, 0.01760760725183838, -0.3577404707384654, -0.07407639052905961, -0.01760760725183838, 0.3577404707384654, 0.07407639052905961, 0.0, 0.0, 0.0, 0.03018352567107012, -0.6132502007612528, -0.1269841269841273, -0.03018352567107012, 0.6132502007612528, 0.1269841269841273, 0.0, 0.0, 0.0 },
            { -0.008257036713055643, 0.0004064026057979398, -0.001709763155693541, -0.2228966205884076, 0.01097073569837149, -0.0461546245529081, 0.2311536573014633, -0.01137713830416943, 0.04786438770860164, 0.02752405821238199, -0.00135470500718008, 0.005699335277544117, 0.7430049996893129, -0.03656991951085677, 0.1538521163356631, -0.770529057901695, 0.03792462451803685, -0.1595514516132072, 0.04718262429091384, -0.002322278818246468, 0.009769983518903597, 1.27368302581342, -0.06268933016038658, 0.2637382374871578, -1.320865650104334, 0.06501160897863306, -0.2735082210060614 },
            { -0.003960005018380649, 0.00118797550013697, -0.006788367744707566, -0.1068993352923503, 0.0320690985791151, -0.183250272729709, 0.110859340310731, -0.03325707407925207, 0.1900386404744166, 0.01320030568289654, -0.003960005018380646, 0.02262838781823014, 0.3563389179073598, -0.1068993352923503, 0.6108476138991097, -0.3695392235902564, 0.1108593403107309, -0.6334760017173399, 0.02262838781823016, -0.006788367744707568, 0.03879030891804838, 0.6108476138991101, -0.183250272729709, 1.04713459197079, -0.6334760017173404, 0.1900386404744166, -1.085924900888839 },
            { 0.0, 0.0, -0.009560397262951244, 0.0, 0.0, -0.2580805094429442, 0.0, 0.0, 0.2676409067058955, 0.0, 0.0, 0.03186868848274603, 0.0, 0.0, 0.8602871965141192, 0.0, 0.0, -0.8921558849968654, 0.0, 0.0, 0.05463032899157097, 0.0, 0.0, 1.474731933140191, 0.0, 0.0, -1.529362262131762 },
            { 0.00118797550013697, -0.003960005018380646, -0.006788367744707568, 0.0320690985791151, -0.1068993352923503, -0.183250272729709, -0.03325707407925207, 0.1108593403107309, 0.1900386404744166, -0.003960005018380646, 0.01320030568289653, 0.02262838781823014, -0.1068993352923503, 0.3563389179073597, 0.6108476138991098, 0.1108593403107309, -0.3695392235902563, -0.6334760017173401, -0.006788367744707568, 0.02262838781823014, 0.0387903089180484, -0.183250272729709, 0.6108476138991098, 1.04713459197079, 0.1900386404744166, -0.6334760017173401, -1.085924900888839 },
            { 0.0004064026057979406, -0.008257036713055641, -0.001709763155693543, 0.01097073569837151, -0.2228966205884075, -0.04615462455290817, -0.01137713830416946, 0.2311536573014632, 0.04786438770860172, -0.001354705007180082, 0.02752405821238198, 0.005699335277544126, -0.03656991951085684, 0.7430049996893128, 0.1538521163356633, 0.03792462451803693, -0.7705290579016948, -0.1595514516132075, -0.002322278818246472, 0.04718262429091383, 0.00976998351890361, -0.06268933016038669, 1.273683025813419, 0.2637382374871582, 0.06501160897863319, -1.320865650104333, -0.2735082210060619 },
            { -0.08718227311082935, 0.004291019187986253, -0.01805260695508587, -0.3018218569861813, 0.01485535228055981, -0.06249746835230043, 0.3890041300970106, -0.01914637146854605, 0.0805500753073863, 0.2906139385811499, -0.01430371040180039, 0.06017667378557133, 1.006094880058081, -0.04951892490547709, 0.2083294548436903, -1.296708818639231, 0.06382263530727748, -0.2685061286292617, 0.4981797441341207, -0.02451987961392188, 0.1031567862701369, 1.724680145656627, -0.08488693095606199, 0.3571250402383911, -2.222859889790747, 0.1094068105699839, -0.4602818265085281 },
            { -0.04181188131171022, 0.01254328981463225, -0.07167526938085099, -0.1447512115856799, 0.04342441289361039, -0.2481371743658524, 0.1865630928973901, -0.05596770270824263, 0.3198124437467034, 0.1393759886489394, -0.04181188131171019, 0.2389227946276916, 0.4825146008734027, -0.1447512115856798, 0.8271420207085712, -0.6218905895223421, 0.18656309289739, -1.066064815336263, 0.2389227946276919, -0.07167526938085102, 0.4095691255434949, 0.8271420207085719, -0.2481371743658525, 1.417913408596237, -1.066064815336264, 0.3198124437467035, -1.827482534139731 },
            { 0.0, 0.0, -0.100943860877929, 0.0, 0.0, -0.3494639730579219, 0.0, 0.0, 0.4504078339358508, 0.0, 0.0, 0.3364869019649208, 0.0, 0.0, 1.164905409996294, 0.0, 0.0, -1.501392311961215, 0.0, 0.0, 0.5768166507903357, 0.0, 0.0, 1.996918254938956, 0.0, 0.0, -2.573734905729292 },
            { 0.01254328981463225, -0.0418118813117102, -0.07167526938085102, 0.04342441289361039, -0.1447512115856798, -0.2481371743658525, -0.05596770270824263, 0.18656309289739, 0.3198124437467035, -0.04181188131171019, 0.1393759886489393, 0.2389227946276917, -0.1447512115856798, 0.4825146008734025, 0.8271420207085715, 0.18656309289739, -0.6218905895223418, -1.066064815336263, -0.07167526938085102, 0.2389227946276917, 0.409569125543495, -0.2481371743658525, 0.8271420207085715, 1.417913408596237, 0.3198124437467035, -1.066064815336263, -1.827482534139732 },
            { 0.004291019187986261, -0.08718227311082932, -0.0180526069550859, 0.01485535228055983, -0.3018218569861812, -0.06249746835230053, -0.01914637146854609, 0.3890041300970105, 0.08055007530738642, -0.01430371040180042, 0.2906139385811498, 0.06017667378557143, -0.04951892490547719, 1.006094880058081, 0.2083294548436906, 0.06382263530727761, -1.29670881863923, -0.268506128629262, -0.02451987961392192, 0.4981797441341206, 0.1031567862701371, -0.08488693095606216, 1.724680145656626, 0.3571250402383917, 0.1094068105699841, -2.222859889790747, -0.4602818265085288 },
            { 0.1032522885798697, -0.00508196833703204, 0.02138018333814189, 0.02982477582032936, -0.001467943892214538, 0.006175738899621276, -0.133077064400199, 0.00654991222924658, -0.02755592223776316, -2.097816119650776, 0.1032522885798694, -0.4343893376576195, -0.6059613432438322, 0.0298247758203293, -0.1254748421809384, 2.703777462894608, -0.1330770644001988, 0.559864179838558, -0.4343893376576203, 0.02138018333814188, -0.08994787241030339, -0.1254748421809387, 0.006175738899621273, -0.0259817498193053, 0.559864179838559, -0.02755592223776315, 0.1159296222296087 },
            { 0.04951892490547721, -0.01485535228055984, 0.08488693095606215, 0.01430371040180044, -0.004291019187986263, 0.02451987961392193, -0.06382263530727765, 0.0191463714685461, -0.1094068105699841, -1.006094880058081, 0.3018218569861812, -1.724680145656626, -0.2906139385811501, 0.08718227311082935, -0.4981797441341206, 1.296708818639231, -0.3890041300970106, 2.222859889790747, -0.2083294548436908, 0.06249746835230053, -0.3571250402383916, -0.06017667378557148, 0.01805260695508591, -0.1031567862701371, 0.2685061286292623, -0.08055007530738643, 0.4602818265085287 },
            { 0.0, 0.0, 0.1195505035809795, 0.0, 0.0, 0.0345325708277361, 0.0, 0.0, -0.1540830744087156, 0.0, 0.0, -2.428953168728526, 0.0, 0.0, -0.7016114096044413, 0.0, 0.0, 3.130564578332967, 0.0, 0.0, -0.5029570267297818, 0.0, 0.0, -0.1452808531006227, 0.0, 0.0, 0.6482378798304045 },
            { -0.01485535228055984, 0.04951892490547719, 0.08488693095606217, -0.004291019187986263, 0.01430371040180043, 0.02451987961392194, 0.0191463714685461, -0.06382263530727762, -0.1094068105699841, 0.3018218569861812, -1.006094880058081, -1.724680145656626, 0.08718227311082935, -0.2906139385811499, -0.4981797441341207, -0.3890041300970106, 1.296708818639231, 2.222859889790747, 0.06249746835230053, -0.2083294548436906, -0.3571250402383917, 0.01805260695508591, -0.06017667378557146, -0.1031567862701371, -0.08055007530738643, 0.2685061286292621, 0.4602818265085288 },
            { -0.005081968337032051, 0.1032522885798696, 0.02138018333814192, -0.001467943892214541, 0.02982477582032935, 0.006175738899621286, 0.006549912229246593, -0.133077064400199, -0.02755592223776321, 0.1032522885798696, -2.097816119650775, -0.4343893376576202, 0.02982477582032935, -0.6059613432438321, -0.1254748421809386, -0.133077064400199, 2.703777462894608, 0.5598641798385589, 0.02138018333814192, -0.4343893376576202, -0.08994787241030353, 0.006175738899621286, -0.1254748421809386, -0.02598174981930533, -0.0275559222377632, 0.5598641798385589, 0.1159296222296089 },
            { 0.07625221851817607, -0.003753053471914706, 0.01578934892661069, 0.002824705758635756, -0.0001390290270972035, 0.0005849044880900775, -0.07907692427681183, 0.00389208249901191, -0.01637425341470077, -1.549245400433187, 0.0762522185181759, -0.3207982229993142, -0.05739062402624318, 0.00282470575863575, -0.01188372752263307, 1.60663602445943, -0.07907692427681166, 0.3326819505219473, -0.3207982229993148, 0.01578934892661068, -0.06642685519720934, -0.01188372752263309, 0.0005849044880900773, -0.002460732606211245, 0.3326819505219479, -0.01637425341470076, 0.06888758780342059 },
            { 0.03656991951085687, -0.01097073569837152, 0.06268933016038669, 0.00135470500718009, -0.0004064026057979425, 0.002322278818246483, -0.03792462451803696, 0.01137713830416946, -0.06501160897863319, -0.7430049996893133, 0.2228966205884076, -1.273683025813419, -0.02752405821238214, 0.008257036713055681, -0.04718262429091404, 0.7705290579016956, -0.2311536573014633, 1.320865650104334, -0.1538521163356634, 0.04615462455290818, -0.2637382374871582, -0.005699335277544158, 0.001709763155693552, -0.009769983518903656, 0.1595514516132076, -0.04786438770860173, 0.2735082210060619 },
            { 0.0, 0.0, 0.08828851397287205, 0.0, 0.0, 0.00327058121962863, 0.0, 0.0, -0.09155909519250069, 0.0, 0.0, -1.793791404914325, 0.0, 0.0, -0.0664496457902405, 0.0, 0.0, 1.860241050704566, 0.0, 0.0, -0.3714357292699134, 0.0, 0.0, -0.01375955564075426, 0.0, 0.0, 0.3851952849106677 },
            { -0.01097073569837152, 0.03656991951085685, 0.06268933016038672, -0.0004064026057979425, 0.001354705007180089, 0.002322278818246483, 0.01137713830416946, -0.03792462451803694, -0.06501160897863321, 0.2228966205884076, -0.7430049996893129, -1.27368302581342, 0.008257036713055681, -0.02752405821238212, -0.04718262429091406, -0.2311536573014633, 0.7705290579016951, 1.320865650104334, 0.04615462455290818, -0.1538521163356633, -0.2637382374871582, 0.001709763155693552, -0.005699335277544154, -0.009769983518903659, -0.04786438770860173, 0.1595514516132075, 0.273508221006062 },
            { -0.003753053471914713, 0.07625221851817604, 0.01578934892661071, -0.0001390290270972038, 0.002824705758635755, 0.0005849044880900784, 0.003892082499011918, -0.07907692427681182, -0.01637425341470079, 0.07625221851817605, -1.549245400433186, -0.3207982229993147, 0.002824705758635755, -0.05739062402624316, -0.01188372752263309, -0.07907692427681182, 1.60663602445943, 0.3326819505219478, 0.01578934892661071, -0.3207982229993147, -0.06642685519720944, 0.0005849044880900784, -0.01188372752263309, -0.002460732606211248, -0.01637425341470079, 0.3326819505219478, 0.06888758780342071 },
            { 0.03671375637977015, -0.001807012222408751, 0.007602222219260304, -0.03671375637977015, 0.001807012222408751, -0.007602222219260304, 0.0, 0.0, 0.0, -0.7459273882034719, 0.03671375637977008, -0.1544572477383406, 0.7459273882034719, -0.03671375637977008, 0.1544572477383406, 0.0, 0.0, 0.0, -0.1544572477383408, 0.007602222219260301, -0.03198306129549905, 0.1544572477383408, -0.007602222219260301, 0.03198306129549905, 0.0, 0.0, 0.0 },
            { 0.01760760725183839, -0.005282166546286786, 0.03018352567107011, -0.01760760725183839, 0.005282166546286786, -0.03018352567107011, 0.0, 0.0, 0.0, -0.3577404707384656, 0.1073197919376759, -0.6132502007612527, 0.3577404707384656, -0.1073197919376759, 0.6132502007612527, 0.0, 0.0, 0.0, -0.07407639052905964, 0.02222243069860731, -0.1269841269841273, 0.07407639052905964, -0.02222243069860731, 0.1269841269841273, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.04250896637662171, 0.0, 0.0, -0.04250896637662171, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8636708795620424, 0.0, 0.0, 0.8636708795620424, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1788380868145796, 0.0, 0.0, 0.1788380868145796, 0.0, 0.0, 0.0 },
            { -0.005282166546286786, 0.01760760725183838, 0.03018352567107012, 0.005282166546286786, -0.01760760725183838, -0.03018352567107012, 0.0, 0.0, 0.0, 0.1073197919376759, -0.3577404707384654, -0.6132502007612529, -0.1073197919376759, 0.3577404707384654, 0.6132502007612529, 0.0, 0.0, 0.0, 0.02222243069860731, -0.07407639052905959, -0.1269841269841273, -0.02222243069860731, 0.07407639052905959, 0.1269841269841273, 0.0, 0.0, 0.0 },
            { -0.001807012222408755, 0.03671375637977015, 0.007602222219260316, 0.001807012222408755, -0.03671375637977015, -0.007602222219260316, 0.0, 0.0, 0.0, 0.03671375637977015, -0.7459273882034717, -0.1544572477383408, -0.03671375637977015, 0.7459273882034717, 0.1544572477383408, 0.0, 0.0, 0.0, 0.007602222219260316, -0.1544572477383408, -0.0319830612954991, -0.007602222219260316, 0.1544572477383408, 0.0319830612954991, 0.0, 0.0, 0.0 },
            { -0.002824705758635742, 0.0001390290270972029, -0.0005849044880900746, -0.07625221851817605, 0.003753053471914705, -0.01578934892661068, 0.0790769242768118, -0.003892082499011908, 0.01637425341470076, 0.0573906240262429, -0.002824705758635736, 0.01188372752263302, 1.549245400433186, -0.07625221851817589, 0.3207982229993141, -1.60663602445943, 0.07907692427681162, -0.3326819505219472, 0.01188372752263304, -0.0005849044880900743, 0.002460732606211232, 0.3207982229993147, -0.01578934892661068, 0.06642685519720933, -0.3326819505219478, 0.01637425341470075, -0.06888758780342057 },
            { -0.001354705007180083, 0.0004064026057979406, -0.002322278818246471, -0.03656991951085686, 0.01097073569837151, -0.06268933016038669, 0.03792462451803694, -0.01137713830416946, 0.06501160897863316, 0.027524058212382, -0.008257036713055641, 0.04718262429091382, 0.7430049996893131, -0.2228966205884075, 1.273683025813419, -0.7705290579016952, 0.2311536573014632, -1.320865650104333, 0.00569933527754413, -0.001709763155693543, 0.009769983518903609, 0.1538521163356634, -0.04615462455290817, 0.2637382374871581, -0.1595514516132075, 0.04786438770860171, -0.2735082210060618 },
            { 0.0, 0.0, -0.003270581219628614, 0.0, 0.0, -0.08828851397287203, 0.0, 0.0, 0.09155909519250065, 0.0, 0.0, 0.06644964579024018, 0.0, 0.0, 1.793791404914325, 0.0, 0.0, -1.860241050704565, 0.0, 0.0, 0.01375955564075419, 0.0, 0.0, 0.3714357292699134, 0.0, 0.0, -0.3851952849106676 },
            { 0.0004064026057979406, -0.001354705007180082, -0.002322278818246472, 0.01097073569837151, -0.03656991951085684, -0.06268933016038671, -0.01137713830416946, 0.03792462451803692, 0.06501160897863317, -0.008257036713055641, 0.02752405821238199, 0.04718262429091383, -0.2228966205884075, 0.7430049996893128, 1.27368302581342, 0.2311536573014632, -0.7705290579016948, -1.320865650104333, -0.001709763155693543, 0.005699335277544126, 0.00976998351890361, -0.04615462455290817, 0.1538521163356633, 0.2637382374871582, 0.04786438770860171, -0.1595514516132074, -0.2735082210060618 },
            { 0.0001390290270972031, -0.002824705758635741, -0.0005849044880900755, 0.003753053471914712, -0.07625221851817604, -0.01578934892661071, -0.003892082499011916, 0.07907692427681177, 0.01637425341470078, -0.002824705758635742, 0.05739062402624288, 0.01188372752263303, -0.07625221851817603, 1.549245400433186, 0.3207982229993146, 0.07907692427681177, -1.606636024459429, -0.3326819505219477, -0.0005849044880900755, 0.01188372752263303, 0.002460732606211236, -0.01578934892661071, 0.3207982229993147, 0.06642685519720944, 0.01637425341470079, -0.3326819505219477, -0.06888758780342068 },
            { -0.02982477582032935, 0.001467943892214538, -0.006175738899621274, -0.1032522885798697, 0.00508196833703204, -0.02138018333814189, 0.133077064400199, -0.006549912229246577, 0.02755592223776315, 0.605961343243832, -0.02982477582032928, 0.1254748421809384, 2.097816119650776, -0.1032522885798694, 0.4343893376576195, -2.703777462894608, 0.1330770644001987, -0.5598641798385579, 0.1254748421809386, -0.006175738899621271, 0.02598174981930529, 0.4343893376576203, -0.02138018333814188, 0.08994787241030339, -0.5598641798385589, 0.02755592223776315, -0.1159296222296087 },
            { -0.01430371040180043, 0.004291019187986261, -0.02451987961392192, -0.04951892490547721, 0.01485535228055984, -0.08488693095606215, 0.06382263530727764, -0.01914637146854609, 0.109406810569984, 0.29061393858115, -0.08718227311082931, 0.4981797441341204, 1.006094880058081, -0.3018218569861812, 1.724680145656626, -1.296708818639231, 0.3890041300970105, -2.222859889790746, 0.06017667378557146, -0.0180526069550859, 0.1031567862701371, 0.2083294548436908, -0.06249746835230053, 0.3571250402383916, -0.2685061286292622, 0.08055007530738642, -0.4602818265085286 },
            { 0.0, 0.0, -0.03453257082773609, 0.0, 0.0, -0.1195505035809795, 0.0, 0.0, 0.1540830744087156, 0.0, 0.0, 0.701611409604441, 0.0, 0.0, 2.428953168728526, 0.0, 0.0, -3.130564578332967, 0.0, 0.0, 0.1452808531006226, 0.0, 0.0, 0.5029570267297818, 0.0, 0.0, -0.6482378798304044 },
            { 0.004291019187986261, -0.01430371040180042, -0.02451987961392193, 0.01485535228055984, -0.04951892490547719, -0.08488693095606217, -0.01914637146854609, 0.06382263530727759, 0.1094068105699841, -0.08718227311082931, 0.2906139385811498, 0.4981797441341205, -0.3018218569861812, 1.006094880058081, 1.724680145656626, 0.3890041300970105, -1.29670881863923, -2.222859889790747, -0.0180526069550859, 0.06017667378557143, 0.1031567862701371, -0.06249746835230053, 0.2083294548436906, 0.3571250402383917, 0.08055007530738642, -0.268506128629262, -0.4602818265085288 },
            { 0.001467943892214541, -0.02982477582032934, -0.006175738899621284, 0.005081968337032051, -0.1032522885798696, -0.02138018333814192, -0.00654991222924659, 0.133077064400199, 0.0275559222377632, -0.02982477582032934, 0.6059613432438318, 0.1254748421809385, -0.1032522885798696, 2.097816119650775, 0.4343893376576202, 0.133077064400199, -2.703777462894607, -0.5598641798385587, -0.006175738899621283, 0.1254748421809386, 0.02598174981930532, -0.02138018333814192, 0.4343893376576202, 0.08994787241030353, 0.0275559222377632, -0.5598641798385587, -0.1159296222296088 } } };
    alignas(32) static const double FE12_C0_D100_Q125[1][125][27] =
        { { { -2.097816119650776, 0.1032522885798695, -0.4343893376576197, 0.1032522885798695, -0.005081968337032031, 0.02138018333814184, -0.4343893376576197, 0.02138018333814184, -0.08994787241030325, -0.6059613432438324, 0.02982477582032931, -0.1254748421809385, 0.0298247758203293, -0.001467943892214536, 0.006175738899621264, -0.1254748421809385, 0.006175738899621264, -0.02598174981930525, 2.703777462894609, -0.1330770644001988, 0.5598641798385582, -0.1330770644001988, 0.006549912229246567, -0.02755592223776311, 0.5598641798385581, -0.02755592223776311, 0.1159296222296085 },
            { -1.006094880058082, 0.3018218569861813, -1.724680145656627, 0.04951892490547712, -0.01485535228055981, 0.08488693095606198, -0.2083294548436904, 0.06249746835230043, -0.357125040238391, -0.2906139385811502, 0.08718227311082938, -0.4981797441341208, 0.01430371040180041, -0.004291019187986254, 0.02451987961392188, -0.06017667378557139, 0.01805260695508588, -0.1031567862701369, 1.296708818639232, -0.3890041300970107, 2.222859889790747, -0.06382263530727753, 0.01914637146854606, -0.1094068105699839, 0.2685061286292618, -0.08055007530738631, 0.460281826508528 },
            { 0.0, 0.0, -2.428953168728527, 0.0, 0.0, 0.1195505035809793, 0.0, 0.0, -0.502957026729781, 0.0, 0.0, -0.7016114096044416, 0.0, 0.0, 0.03453257082773603, 0.0, 0.0, -0.1452808531006224, 0.0, 0.0, 3.130564578332968, 0.0, 0.0, -0.1540830744087153, 0.0, 0.0, 0.6482378798304035 },
            { 0.3018218569861813, -1.006094880058081, -1.724680145656627, -0.01485535228055981, 0.04951892490547709, 0.08488693095606199, 0.06249746835230043, -0.2083294548436903, -0.3571250402383911, 0.08718227311082938, -0.29061393858115, -0.4981797441341209, -0.004291019187986254, 0.0143037104018004, 0.02451987961392189, 0.01805260695508588, -0.06017667378557136, -0.103156786270137, -0.3890041300970107, 1.296708818639231, 2.222859889790748, 0.01914637146854606, -0.0638226353072775, -0.1094068105699839, -0.08055007530738631, 0.2685061286292617, 0.4602818265085281 },
            { 0.1032522885798697, -2.097816119650776, -0.4343893376576203, -0.00508196833703204, 0.1032522885798694, 0.02138018333814188, 0.02138018333814188, -0.4343893376576196, -0.08994787241030339, 0.02982477582032936, -0.6059613432438322, -0.1254748421809387, -0.001467943892214538, 0.0298247758203293, 0.006175738899621273, 0.006175738899621276, -0.1254748421809384, -0.0259817498193053, -0.133077064400199, 2.703777462894609, 0.559864179838559, 0.00654991222924658, -0.1330770644001988, -0.02755592223776315, -0.02755592223776316, 0.559864179838558, 0.1159296222296087 },
            { -1.006094880058082, 0.04951892490547712, -0.2083294548436904, 0.3018218569861813, -0.01485535228055981, 0.06249746835230043, -1.724680145656626, 0.08488693095606197, -0.357125040238391, -0.2906139385811501, 0.01430371040180041, -0.06017667378557139, 0.08718227311082938, -0.004291019187986254, 0.01805260695508588, -0.4981797441341208, 0.02451987961392188, -0.1031567862701369, 1.296708818639232, -0.06382263530727753, 0.2685061286292618, -0.3890041300970107, 0.01914637146854606, -0.08055007530738631, 2.222859889790747, -0.1094068105699838, 0.4602818265085279 },
            { -0.482514600873403, 0.1447512115856799, -0.8271420207085717, 0.1447512115856799, -0.04342441289361039, 0.2481371743658524, -0.8271420207085717, 0.2481371743658524, -1.417913408596236, -0.1393759886489395, 0.04181188131171024, -0.2389227946276919, 0.04181188131171024, -0.01254328981463226, 0.07167526938085102, -0.2389227946276919, 0.07167526938085103, -0.4095691255434949, 0.6218905895223426, -0.1865630928973901, 1.066064815336264, -0.1865630928973901, 0.05596770270824264, -0.3198124437467034, 1.066064815336264, -0.3198124437467034, 1.827482534139731 },
            { 0.0, 0.0, -1.164905409996295, 0.0, 0.0, 0.3494639730579219, 0.0, 0.0, -1.996918254938955, 0.0, 0.0, -0.3364869019649211, 0.0, 0.0, 0.100943860877929, 0.0, 0.0, -0.5768166507903358, 0.0, 0.0, 1.501392311961216, 0.0, 0.0, -0.4504078339358509, 0.0, 0.0, 2.573734905729291 },
            { 0.1447512115856799, -0.4825146008734028, -0.827142020708572, -0.04342441289361039, 0.1447512115856798, 0.2481371743658525, 0.2481371743658524, -0.8271420207085712, -1.417913408596236, 0.04181188131171024, -0.1393759886489394, -0.2389227946276919, -0.01254328981463226, 0.04181188131171022, 0.07167526938085104, 0.07167526938085103, -0.2389227946276918, -0.4095691255434951, -0.1865630928973901, 0.6218905895223422, 1.066064815336264, 0.05596770270824264, -0.18656309289739, -0.3198124437467035, -0.3198124437467034, 1.066064815336263, 1.827482534139732 },
            { 0.04951892490547721, -1.006094880058081, -0.2083294548436908, -0.01485535228055983, 0.3018218569861812, 0.06249746835230053, 0.08488693095606213, -1.724680145656626, -0.3571250402383916, 0.01430371040180044, -0.2906139385811501, -0.06017667378557149, -0.004291019187986263, 0.08718227311082936, 0.01805260695508591, 0.02451987961392193, -0.4981797441341206, -0.1031567862701371, -0.06382263530727765, 1.296708818639231, 0.2685061286292623, 0.0191463714685461, -0.3890041300970106, -0.08055007530738643, -0.1094068105699841, 2.222859889790747, 0.4602818265085287 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.428953168728527, 0.1195505035809793, -0.502957026729781, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.7016114096044416, 0.03453257082773603, -0.1452808531006224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.130564578332968, -0.1540830744087153, 0.6482378798304035 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.164905409996295, 0.3494639730579219, -1.996918254938955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.3364869019649211, 0.100943860877929, -0.5768166507903358, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.501392311961216, -0.4504078339358509, 2.573734905729291 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.812359691877328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8123596918773279, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.624719383754656 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3494639730579219, -1.164905409996294, -1.996918254938956, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.100943860877929, -0.336486901964921, -0.5768166507903359, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4504078339358509, 1.501392311961215, 2.573734905729292 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1195505035809795, -2.428953168728526, -0.5029570267297818, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0345325708277361, -0.7016114096044413, -0.1452808531006227, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1540830744087156, 3.130564578332967, 0.6482378798304045 },
            { 0.3018218569861813, -0.01485535228055981, 0.06249746835230043, -1.006094880058081, 0.04951892490547709, -0.2083294548436903, -1.724680145656627, 0.08488693095606199, -0.3571250402383911, 0.08718227311082938, -0.004291019187986254, 0.01805260695508588, -0.29061393858115, 0.0143037104018004, -0.06017667378557136, -0.4981797441341209, 0.02451987961392188, -0.103156786270137, -0.3890041300970107, 0.01914637146854606, -0.08055007530738631, 1.296708818639231, -0.06382263530727748, 0.2685061286292617, 2.222859889790748, -0.1094068105699839, 0.4602818265085281 },
            { 0.1447512115856799, -0.04342441289361039, 0.2481371743658524, -0.4825146008734027, 0.1447512115856798, -0.8271420207085712, -0.8271420207085719, 0.2481371743658525, -1.417913408596237, 0.04181188131171024, -0.01254328981463226, 0.07167526938085102, -0.1393759886489394, 0.04181188131171022, -0.2389227946276918, -0.2389227946276919, 0.07167526938085104, -0.4095691255434951, -0.1865630928973901, 0.05596770270824264, -0.3198124437467034, 0.6218905895223422, -0.18656309289739, 1.066064815336263, 1.066064815336264, -0.3198124437467035, 1.827482534139732 },
            { 0.0, 0.0, 0.3494639730579219, 0.0, 0.0, -1.164905409996294, 0.0, 0.0, -1.996918254938956, 0.0, 0.0, 0.100943860877929, 0.0, 0.0, -0.336486901964921, 0.0, 0.0, -0.5768166507903359, 0.0, 0.0, -0.4504078339358509, 0.0, 0.0, 1.501392311961215, 0.0, 0.0, 2.573734905729292 },
            { -0.04342441289361039, 0.1447512115856798, 0.2481371743658525, 0.1447512115856798, -0.4825146008734025, -0.8271420207085715, 0.2481371743658525, -0.8271420207085715, -1.417913408596237, -0.01254328981463226, 0.04181188131171022, 0.07167526938085104, 0.04181188131171022, -0.1393759886489394, -0.2389227946276918, 0.07167526938085104, -0.2389227946276918, -0.4095691255434952, 0.05596770270824264, -0.18656309289739, -0.3198124437467035, -0.18656309289739, 0.6218905895223419, 1.066064815336263, -0.3198124437467035, 1.066064815336263, 1.827482534139732 },
            { -0.01485535228055983, 0.3018218569861812, 0.06249746835230053, 0.04951892490547719, -1.006094880058081, -0.2083294548436906, 0.08488693095606216, -1.724680145656626, -0.3571250402383917, -0.004291019187986263, 0.08718227311082936, 0.01805260695508591, 0.01430371040180043, -0.2906139385811499, -0.06017667378557146, 0.02451987961392193, -0.4981797441341207, -0.1031567862701371, 0.0191463714685461, -0.3890041300970106, -0.08055007530738643, -0.06382263530727761, 1.296708818639231, 0.2685061286292621, -0.1094068105699841, 2.222859889790747, 0.4602818265085288 },
            { 0.1032522885798697, -0.00508196833703204, 0.02138018333814189, -2.097816119650776, 0.1032522885798694, -0.4343893376576195, -0.4343893376576203, 0.02138018333814188, -0.08994787241030339, 0.02982477582032936, -0.001467943892214538, 0.006175738899621276, -0.6059613432438322, 0.0298247758203293, -0.1254748421809384, -0.1254748421809387, 0.006175738899621273, -0.0259817498193053, -0.133077064400199, 0.00654991222924658, -0.02755592223776316, 2.703777462894608, -0.1330770644001988, 0.559864179838558, 0.559864179838559, -0.02755592223776315, 0.1159296222296087 },
            { 0.04951892490547721, -0.01485535228055984, 0.08488693095606215, -1.006094880058081, 0.3018218569861812, -1.724680145656626, -0.2083294548436908, 0.06249746835230053, -0.3571250402383916, 0.01430371040180044, -0.004291019187986263, 0.02451987961392193, -0.2906139385811501, 0.08718227311082935, -0.4981797441341206, -0.06017667378557148, 0.01805260695508591, -0.1031567862701371, -0.06382263530727765, 0.0191463714685461, -0.1094068105699841, 1.296708818639231, -0.3890041300970106, 2.222859889790747, 0.2685061286292623, -0.08055007530738643, 0.4602818265085287 },
            { 0.0, 0.0, 0.1195505035809795, 0.0, 0.0, -2.428953168728526, 0.0, 0.0, -0.5029570267297818, 0.0, 0.0, 0.0345325708277361, 0.0, 0.0, -0.7016114096044413, 0.0, 0.0, -0.1452808531006227, 0.0, 0.0, -0.1540830744087156, 0.0, 0.0, 3.130564578332967, 0.0, 0.0, 0.6482378798304045 },
            { -0.01485535228055984, 0.04951892490547719, 0.08488693095606217, 0.3018218569861812, -1.006094880058081, -1.724680145656626, 0.06249746835230053, -0.2083294548436906, -0.3571250402383917, -0.004291019187986263, 0.01430371040180043, 0.02451987961392194, 0.08718227311082935, -0.2906139385811499, -0.4981797441341207, 0.01805260695508591, -0.06017667378557146, -0.1031567862701371, 0.0191463714685461, -0.06382263530727762, -0.1094068105699841, -0.3890041300970106, 1.296708818639231, 2.222859889790747, -0.08055007530738643, 0.2685061286292621, 0.4602818265085288 },
            { -0.005081968337032051, 0.1032522885798696, 0.02138018333814192, 0.1032522885798696, -2.097816119650775, -0.4343893376576202, 0.02138018333814192, -0.4343893376576202, -0.08994787241030353, -0.001467943892214541, 0.02982477582032935, 0.006175738899621286, 0.02982477582032935, -0.6059613432438321, -0.1254748421809386, 0.006175738899621286, -0.1254748421809386, -0.02598174981930533, 0.006549912229246593, -0.133077064400199, -0.02755592223776321, -0.133077064400199, 2.703777462894608, 0.5598641798385589, -0.0275559222377632, 0.5598641798385589, 0.1159296222296089 },
            { -1.549245400433187, 0.07625221851817592, -0.3207982229993143, 0.07625221851817593, -0.003753053471914698, 0.01578934892661066, -0.3207982229993143, 0.01578934892661065, -0.06642685519720924, -0.05739062402624319, 0.00282470575863575, -0.01188372752263308, 0.00282470575863575, -0.0001390290270972033, 0.0005849044880900763, -0.01188372752263308, 0.0005849044880900763, -0.002460732606211241, 1.606636024459431, -0.07907692427681168, 0.3326819505219474, -0.07907692427681168, 0.003892082499011902, -0.01637425341470073, 0.3326819505219474, -0.01637425341470073, 0.06888758780342048 },
            { -0.7430049996893134, 0.2228966205884076, -1.27368302581342, 0.0365699195108568, -0.01097073569837149, 0.06268933016038658, -0.1538521163356632, 0.04615462455290811, -0.2637382374871578, -0.02752405821238214, 0.008257036713055683, -0.04718262429091406, 0.001354705007180087, -0.0004064026057979417, 0.002322278818246478, -0.005699335277544148, 0.001709763155693549, -0.00976998351890364, 0.7705290579016958, -0.2311536573014633, 1.320865650104334, -0.03792462451803689, 0.01137713830416944, -0.06501160897863306, 0.1595514516132074, -0.04786438770860166, 0.2735082210060614 },
            { 0.0, 0.0, -1.793791404914326, 0.0, 0.0, 0.08828851397287188, 0.0, 0.0, -0.3714357292699129, 0.0, 0.0, -0.06644964579024051, 0.0, 0.0, 0.003270581219628623, 0.0, 0.0, -0.01375955564075424, 0.0, 0.0, 1.860241050704566, 0.0, 0.0, -0.09155909519250051, 0.0, 0.0, 0.3851952849106671 },
            { 0.2228966205884076, -0.7430049996893131, -1.27368302581342, -0.01097073569837149, 0.03656991951085678, 0.06268933016038659, 0.04615462455290811, -0.1538521163356631, -0.2637382374871579, 0.008257036713055683, -0.02752405821238213, -0.04718262429091407, -0.0004064026057979417, 0.001354705007180086, 0.002322278818246479, 0.001709763155693549, -0.005699335277544145, -0.009769983518903643, -0.2311536573014633, 0.7705290579016953, 1.320865650104334, 0.01137713830416944, -0.03792462451803687, -0.06501160897863308, -0.04786438770860166, 0.1595514516132073, 0.2735082210060615 },
            { 0.07625221851817607, -1.549245400433187, -0.3207982229993148, -0.003753053471914706, 0.0762522185181759, 0.01578934892661068, 0.01578934892661069, -0.3207982229993142, -0.06642685519720934, 0.002824705758635756, -0.05739062402624318, -0.01188372752263309, -0.0001390290270972035, 0.00282470575863575, 0.0005849044880900772, 0.0005849044880900774, -0.01188372752263307, -0.002460732606211245, -0.07907692427681183, 1.60663602445943, 0.3326819505219479, 0.00389208249901191, -0.07907692427681166, -0.01637425341470076, -0.01637425341470077, 0.3326819505219473, 0.06888758780342059 },
            { -0.7430049996893135, 0.03656991951085679, -0.1538521163356632, 0.2228966205884076, -0.01097073569837149, 0.04615462455290811, -1.27368302581342, 0.06268933016038658, -0.2637382374871578, -0.02752405821238214, 0.001354705007180087, -0.005699335277544148, 0.008257036713055683, -0.0004064026057979417, 0.001709763155693549, -0.04718262429091406, 0.002322278818246478, -0.00976998351890364, 0.7705290579016957, -0.03792462451803689, 0.1595514516132074, -0.2311536573014634, 0.01137713830416944, -0.04786438770860166, 1.320865650104334, -0.06501160897863306, 0.2735082210060614 },
            { -0.3563389179073601, 0.1068993352923503, -0.6108476138991101, 0.1068993352923503, -0.03206909857911511, 0.183250272729709, -0.6108476138991101, 0.183250272729709, -1.04713459197079, -0.01320030568289661, 0.003960005018380667, -0.02262838781823026, 0.003960005018380667, -0.001187975500136976, 0.006788367744707598, -0.02262838781823026, 0.006788367744707599, -0.03879030891804856, 0.3695392235902568, -0.110859340310731, 0.6334760017173404, -0.110859340310731, 0.03325707407925209, -0.1900386404744167, 0.6334760017173404, -0.1900386404744166, 1.085924900888839 },
            { 0.0, 0.0, -0.8602871965141199, 0.0, 0.0, 0.2580805094429443, 0.0, 0.0, -1.474731933140191, 0.0, 0.0, -0.0318686884827462, 0.0, 0.0, 0.009560397262951289, 0.0, 0.0, -0.05463032899157122, 0.0, 0.0, 0.8921558849968662, 0.0, 0.0, -0.2676409067058956, 0.0, 0.0, 1.529362262131762 },
            { 0.1068993352923503, -0.3563389179073599, -0.6108476138991104, -0.03206909857911511, 0.1068993352923503, 0.1832502727297091, 0.183250272729709, -0.6108476138991098, -1.04713459197079, 0.003960005018380667, -0.01320030568289661, -0.02262838781823026, -0.001187975500136976, 0.003960005018380665, 0.0067883677447076, 0.006788367744707599, -0.02262838781823025, -0.03879030891804857, -0.110859340310731, 0.3695392235902565, 0.6334760017173406, 0.03325707407925209, -0.110859340310731, -0.1900386404744167, -0.1900386404744166, 0.6334760017173401, 1.085924900888839 },
            { 0.03656991951085687, -0.7430049996893133, -0.1538521163356634, -0.01097073569837152, 0.2228966205884076, 0.04615462455290818, 0.06268933016038669, -1.273683025813419, -0.2637382374871582, 0.00135470500718009, -0.02752405821238214, -0.005699335277544157, -0.0004064026057979425, 0.008257036713055681, 0.001709763155693551, 0.002322278818246483, -0.04718262429091405, -0.009769983518903656, -0.03792462451803696, 0.7705290579016955, 0.1595514516132076, 0.01137713830416946, -0.2311536573014633, -0.04786438770860174, -0.06501160897863319, 1.320865650104333, 0.2735082210060619 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.793791404914326, 0.08828851397287188, -0.3714357292699129, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.06644964579024051, 0.003270581219628623, -0.01375955564075424, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.860241050704566, -0.09155909519250051, 0.3851952849106671 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8602871965141199, 0.2580805094429443, -1.474731933140191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0318686884827462, 0.009560397262951289, -0.05463032899157122, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8921558849968662, -0.2676409067058956, 1.529362262131762 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.076938620211366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.07693862021136613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.153877240422733 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2580805094429443, -0.8602871965141193, -1.474731933140191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.009560397262951289, -0.03186868848274619, -0.05463032899157123, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2676409067058956, 0.8921558849968657, 1.529362262131763 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.08828851397287205, -1.793791404914325, -0.3714357292699134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00327058121962863, -0.0664496457902405, -0.01375955564075426, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.09155909519250069, 1.860241050704566, 0.3851952849106677 },
            { 0.2228966205884076, -0.01097073569837149, 0.04615462455290811, -0.743004999689313, 0.03656991951085677, -0.1538521163356631, -1.27368302581342, 0.06268933016038659, -0.2637382374871579, 0.008257036713055683, -0.0004064026057979417, 0.001709763155693549, -0.02752405821238213, 0.001354705007180086, -0.005699335277544145, -0.04718262429091407, 0.002322278818246479, -0.009769983518903643, -0.2311536573014634, 0.01137713830416944, -0.04786438770860166, 0.7705290579016953, -0.03792462451803687, 0.1595514516132073, 1.320865650104334, -0.06501160897863309, 0.2735082210060615 },
            { 0.1068993352923503, -0.03206909857911511, 0.183250272729709, -0.3563389179073599, 0.1068993352923503, -0.6108476138991097, -0.6108476138991104, 0.1832502727297091, -1.04713459197079, 0.003960005018380667, -0.001187975500136976, 0.006788367744707598, -0.01320030568289661, 0.003960005018380665, -0.02262838781823025, -0.02262838781823026, 0.0067883677447076, -0.03879030891804857, -0.110859340310731, 0.03325707407925209, -0.1900386404744167, 0.3695392235902566, -0.110859340310731, 0.6334760017173401, 0.6334760017173406, -0.1900386404744167, 1.085924900888839 },
            { 0.0, 0.0, 0.2580805094429443, 0.0, 0.0, -0.8602871965141193, 0.0, 0.0, -1.474731933140191, 0.0, 0.0, 0.009560397262951289, 0.0, 0.0, -0.03186868848274619, 0.0, 0.0, -0.05463032899157123, 0.0, 0.0, -0.2676409067058956, 0.0, 0.0, 0.8921558849968657, 0.0, 0.0, 1.529362262131763 },
            { -0.03206909857911511, 0.1068993352923503, 0.1832502727297091, 0.1068993352923503, -0.3563389179073597, -0.6108476138991099, 0.1832502727297091, -0.61084761389911, -1.04713459197079, -0.001187975500136976, 0.003960005018380665, 0.0067883677447076, 0.003960005018380665, -0.0132003056828966, -0.02262838781823025, 0.0067883677447076, -0.02262838781823025, -0.03879030891804858, 0.03325707407925209, -0.110859340310731, -0.1900386404744167, -0.110859340310731, 0.3695392235902564, 0.6334760017173403, -0.1900386404744167, 0.6334760017173403, 1.085924900888839 },
            { -0.01097073569837152, 0.2228966205884076, 0.04615462455290818, 0.03656991951085684, -0.7430049996893129, -0.1538521163356633, 0.06268933016038672, -1.27368302581342, -0.2637382374871582, -0.0004064026057979425, 0.008257036713055681, 0.001709763155693551, 0.001354705007180089, -0.02752405821238212, -0.005699335277544154, 0.002322278818246483, -0.04718262429091406, -0.009769983518903659, 0.01137713830416946, -0.2311536573014633, -0.04786438770860174, -0.03792462451803694, 0.7705290579016951, 0.1595514516132075, -0.06501160897863321, 1.320865650104334, 0.273508221006062 },
            { 0.07625221851817607, -0.003753053471914706, 0.01578934892661069, -1.549245400433187, 0.0762522185181759, -0.3207982229993142, -0.3207982229993148, 0.01578934892661068, -0.06642685519720934, 0.002824705758635756, -0.0001390290270972035, 0.0005849044880900775, -0.05739062402624318, 0.00282470575863575, -0.01188372752263307, -0.01188372752263309, 0.0005849044880900773, -0.002460732606211245, -0.07907692427681183, 0.00389208249901191, -0.01637425341470077, 1.60663602445943, -0.07907692427681166, 0.3326819505219473, 0.3326819505219479, -0.01637425341470076, 0.06888758780342059 },
            { 0.03656991951085687, -0.01097073569837152, 0.06268933016038669, -0.7430049996893133, 0.2228966205884076, -1.273683025813419, -0.1538521163356634, 0.04615462455290818, -0.2637382374871582, 0.00135470500718009, -0.0004064026057979425, 0.002322278818246483, -0.02752405821238214, 0.008257036713055681, -0.04718262429091404, -0.005699335277544158, 0.001709763155693552, -0.009769983518903656, -0.03792462451803696, 0.01137713830416946, -0.06501160897863319, 0.7705290579016956, -0.2311536573014633, 1.320865650104334, 0.1595514516132076, -0.04786438770860173, 0.2735082210060619 },
            { 0.0, 0.0, 0.08828851397287205, 0.0, 0.0, -1.793791404914325, 0.0, 0.0, -0.3714357292699134, 0.0, 0.0, 0.00327058121962863, 0.0, 0.0, -0.0664496457902405, 0.0, 0.0, -0.01375955564075426, 0.0, 0.0, -0.09155909519250069, 0.0, 0.0, 1.860241050704566, 0.0, 0.0, 0.3851952849106677 },
            { -0.01097073569837152, 0.03656991951085685, 0.06268933016038672, 0.2228966205884076, -0.7430049996893129, -1.27368302581342, 0.04615462455290818, -0.1538521163356633, -0.2637382374871582, -0.0004064026057979425, 0.001354705007180089, 0.002322278818246483, 0.008257036713055681, -0.02752405821238212, -0.04718262429091406, 0.001709763155693552, -0.005699335277544154, -0.009769983518903659, 0.01137713830416946, -0.03792462451803694, -0.06501160897863321, -0.2311536573014633, 0.7705290579016951, 1.320865650104334, -0.04786438770860173, 0.1595514516132075, 0.273508221006062 },
            { -0.003753053471914713, 0.07625221851817604, 0.01578934892661071, 0.07625221851817605, -1.549245400433186, -0.3207982229993147, 0.01578934892661071, -0.3207982229993147, -0.06642685519720944, -0.0001390290270972038, 0.002824705758635755, 0.0005849044880900784, 0.002824705758635755, -0.05739062402624316, -0.01188372752263309, 0.0005849044880900784, -0.01188372752263309, -0.002460732606211248, 0.003892082499011918, -0.07907692427681182, -0.01637425341470079, -0.07907692427681182, 1.60663602445943, 0.3326819505219478, -0.01637425341470079, 0.3326819505219478, 0.06888758780342071 },
            { -0.745927388203472, 0.03671375637977009, -0.1544572477383406, 0.03671375637977008, -0.001807012222408748, 0.007602222219260289, -0.1544572477383406, 0.007602222219260289, -0.031983061295499, 0.745927388203472, -0.03671375637977009, 0.1544572477383406, -0.03671375637977008, 0.001807012222408748, -0.007602222219260289, 0.1544572477383406, -0.007602222219260289, 0.031983061295499, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.3577404707384657, 0.107319791937676, -0.6132502007612529, 0.01760760725183835, -0.005282166546286776, 0.03018352567107005, -0.07407639052905952, 0.02222243069860728, -0.1269841269841271, 0.3577404707384657, -0.107319791937676, 0.6132502007612529, -0.01760760725183835, 0.005282166546286776, -0.03018352567107005, 0.07407639052905952, -0.02222243069860728, 0.1269841269841271, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, -0.8636708795620426, 0.0, 0.0, 0.04250896637662162, 0.0, 0.0, -0.1788380868145793, 0.0, 0.0, 0.8636708795620426, 0.0, 0.0, -0.04250896637662162, 0.0, 0.0, 0.1788380868145793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.107319791937676, -0.3577404707384655, -0.613250200761253, -0.005282166546286776, 0.01760760725183835, 0.03018352567107006, 0.02222243069860728, -0.07407639052905948, -0.1269841269841271, -0.107319791937676, 0.3577404707384655, 0.613250200761253, 0.005282166546286776, -0.01760760725183835, -0.03018352567107006, -0.02222243069860728, 0.07407639052905948, 0.1269841269841271, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.03671375637977016, -0.7459273882034719, -0.1544572477383409, -0.001807012222408751, 0.03671375637977008, 0.007602222219260301, 0.007602222219260304, -0.1544572477383405, -0.03198306129549905, -0.03671375637977016, 0.7459273882034719, 0.1544572477383409, 0.001807012222408751, -0.03671375637977008, -0.007602222219260301, -0.007602222219260304, 0.1544572477383405, 0.03198306129549905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.3577404707384657, 0.01760760725183836, -0.07407639052905952, 0.107319791937676, -0.005282166546286777, 0.02222243069860728, -0.6132502007612528, 0.03018352567107005, -0.1269841269841271, 0.3577404707384657, -0.01760760725183836, 0.07407639052905952, -0.107319791937676, 0.005282166546286777, -0.02222243069860728, 0.6132502007612528, -0.03018352567107005, 0.1269841269841271, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.1715693061122318, 0.05146966513698484, -0.2941096130404399, 0.05146966513698484, -0.01544056153948907, 0.08823095249250071, -0.2941096130404399, 0.08823095249250071, -0.5041721415263706, 0.1715693061122318, -0.05146966513698484, 0.2941096130404399, -0.05146966513698484, 0.01544056153948907, -0.08823095249250071, 0.2941096130404399, -0.08823095249250071, 0.5041721415263706, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, -0.4142092540156869, 0.0, 0.0, 0.1242600560899965, 0.0, 0.0, -0.7100508020743098, 0.0, 0.0, 0.4142092540156869, 0.0, 0.0, -0.1242600560899965, 0.0, 0.0, 0.7100508020743098, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.05146966513698484, -0.1715693061122317, -0.29410961304044, -0.01544056153948907, 0.05146966513698481, 0.08823095249250074, 0.08823095249250071, -0.2941096130404398, -0.5041721415263708, -0.05146966513698484, 0.1715693061122317, 0.29410961304044, 0.01544056153948907, -0.05146966513698481, -0.08823095249250074, -0.08823095249250071, 0.2941096130404398, 0.5041721415263708, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.01760760725183839, -0.3577404707384656, -0.07407639052905964, -0.005282166546286787, 0.1073197919376759, 0.02222243069860732, 0.0301835256710701, -0.6132502007612527, -0.1269841269841273, -0.01760760725183839, 0.3577404707384656, 0.07407639052905964, 0.005282166546286787, -0.1073197919376759, -0.02222243069860732, -0.0301835256710701, 0.6132502007612527, 0.1269841269841273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8636708795620426, 0.04250896637662162, -0.1788380868145793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8636708795620426, -0.04250896637662162, 0.1788380868145793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.4142092540156869, 0.1242600560899965, -0.7100508020743098, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4142092540156869, -0.1242600560899965, 0.7100508020743098, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1242600560899965, -0.4142092540156866, -0.71005080207431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1242600560899965, 0.4142092540156866, 0.71005080207431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.04250896637662171, -0.8636708795620424, -0.1788380868145796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.04250896637662171, 0.8636708795620424, 0.1788380868145796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.107319791937676, -0.005282166546286777, 0.02222243069860728, -0.3577404707384655, 0.01760760725183835, -0.07407639052905948, -0.613250200761253, 0.03018352567107006, -0.1269841269841271, -0.107319791937676, 0.005282166546286777, -0.02222243069860728, 0.3577404707384655, -0.01760760725183835, 0.07407639052905948, 0.613250200761253, -0.03018352567107006, 0.1269841269841271, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.05146966513698484, -0.01544056153948907, 0.08823095249250071, -0.1715693061122317, 0.05146966513698481, -0.2941096130404398, -0.29410961304044, 0.08823095249250074, -0.5041721415263708, -0.05146966513698484, 0.01544056153948907, -0.08823095249250071, 0.1715693061122317, -0.05146966513698481, 0.2941096130404398, 0.29410961304044, -0.08823095249250074, 0.5041721415263708, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.1242600560899965, 0.0, 0.0, -0.4142092540156866, 0.0, 0.0, -0.71005080207431, 0.0, 0.0, -0.1242600560899965, 0.0, 0.0, 0.4142092540156866, 0.0, 0.0, 0.71005080207431, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.01544056153948907, 0.05146966513698481, 0.08823095249250074, 0.05146966513698481, -0.1715693061122316, -0.2941096130404399, 0.08823095249250074, -0.2941096130404399, -0.5041721415263709, 0.01544056153948907, -0.05146966513698481, -0.08823095249250074, -0.05146966513698481, 0.1715693061122316, 0.2941096130404399, -0.08823095249250074, 0.2941096130404399, 0.5041721415263709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.005282166546286787, 0.1073197919376759, 0.02222243069860732, 0.01760760725183838, -0.3577404707384654, -0.07407639052905961, 0.03018352567107012, -0.6132502007612528, -0.1269841269841273, 0.005282166546286787, -0.1073197919376759, -0.02222243069860732, -0.01760760725183838, 0.3577404707384654, 0.07407639052905961, -0.03018352567107012, 0.6132502007612528, 0.1269841269841273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.03671375637977015, -0.001807012222408751, 0.007602222219260304, -0.7459273882034719, 0.03671375637977008, -0.1544572477383406, -0.1544572477383408, 0.007602222219260301, -0.03198306129549905, -0.03671375637977015, 0.001807012222408751, -0.007602222219260304, 0.7459273882034719, -0.03671375637977008, 0.1544572477383406, 0.1544572477383408, -0.007602222219260301, 0.03198306129549905, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.01760760725183839, -0.005282166546286786, 0.03018352567107011, -0.3577404707384656, 0.1073197919376759, -0.6132502007612527, -0.07407639052905964, 0.02222243069860731, -0.1269841269841273, -0.01760760725183839, 0.005282166546286786, -0.03018352567107011, 0.3577404707384656, -0.1073197919376759, 0.6132502007612527, 0.07407639052905964, -0.02222243069860731, 0.1269841269841273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.04250896637662171, 0.0, 0.0, -0.8636708795620424, 0.0, 0.0, -0.1788380868145796, 0.0, 0.0, -0.04250896637662171, 0.0, 0.0, 0.8636708795620424, 0.0, 0.0, 0.1788380868145796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.005282166546286786, 0.01760760725183838, 0.03018352567107012, 0.1073197919376759, -0.3577404707384654, -0.6132502007612529, 0.02222243069860731, -0.07407639052905959, -0.1269841269841273, 0.005282166546286786, -0.01760760725183838, -0.03018352567107012, -0.1073197919376759, 0.3577404707384654, 0.6132502007612529, -0.02222243069860731, 0.07407639052905959, 0.1269841269841273, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -0.001807012222408755, 0.03671375637977015, 0.007602222219260316, 0.03671375637977015, -0.7459273882034717, -0.1544572477383408, 0.007602222219260316, -0.1544572477383408, -0.0319830612954991, 0.001807012222408755, -0.03671375637977015, -0.007602222219260316, -0.03671375637977015, 0.7459273882034717, 0.1544572477383408, -0.007602222219260316, 0.1544572477383408, 0.0319830612954991, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.05739062402624291, -0.002824705758635737, 0.01188372752263302, -0.002824705758635737, 0.0001390290270972026, -0.0005849044880900734, 0.01188372752263302, -0.0005849044880900735, 0.002460732606211229, 1.549245400433187, -0.0762522185181759, 0.3207982229993142, -0.0762522185181759, 0.003753053471914698, -0.01578934892661065, 0.3207982229993142, -0.01578934892661065, 0.06642685519720921, -1.60663602445943, 0.07907692427681165, -0.3326819505219473, 0.07907692427681164, -0.0038920824990119, 0.01637425341470073, -0.3326819505219472, 0.01637425341470073, -0.06888758780342046 },
            { 0.02752405821238201, -0.008257036713055643, 0.04718262429091383, -0.00135470500718008, 0.0004064026057979397, -0.002322278818246467, 0.005699335277544121, -0.001709763155693541, 0.009769983518903593, 0.7430049996893133, -0.2228966205884076, 1.273683025813419, -0.03656991951085679, 0.01097073569837149, -0.06268933016038655, 0.1538521163356631, -0.04615462455290809, 0.2637382374871577, -0.7705290579016953, 0.2311536573014632, -1.320865650104333, 0.03792462451803687, -0.01137713830416943, 0.06501160897863303, -0.1595514516132073, 0.04786438770860164, -0.2735082210060613 },
            { 0.0, 0.0, 0.06644964579024019, 0.0, 0.0, -0.003270581219628607, 0.0, 0.0, 0.01375955564075417, 0.0, 0.0, 1.793791404914325, 0.0, 0.0, -0.08828851397287185, 0.0, 0.0, 0.3714357292699128, 0.0, 0.0, -1.860241050704565, 0.0, 0.0, 0.09155909519250047, 0.0, 0.0, -0.385195284910667 },
            { -0.008257036713055643, 0.02752405821238199, 0.04718262429091384, 0.0004064026057979397, -0.00135470500718008, -0.002322278818246467, -0.001709763155693541, 0.005699335277544118, 0.009769983518903597, -0.2228966205884076, 0.7430049996893129, 1.27368302581342, 0.01097073569837149, -0.03656991951085677, -0.06268933016038658, -0.04615462455290809, 0.1538521163356631, 0.2637382374871578, 0.2311536573014632, -0.770529057901695, -1.320865650104334, -0.01137713830416943, 0.03792462451803685, 0.06501160897863305, 0.04786438770860164, -0.1595514516132072, -0.2735082210060614 },
            { -0.002824705758635742, 0.0573906240262429, 0.01188372752263304, 0.0001390290270972029, -0.002824705758635736, -0.0005849044880900743, -0.0005849044880900747, 0.01188372752263302, 0.002460732606211232, -0.07625221851817605, 1.549245400433186, 0.3207982229993147, 0.003753053471914705, -0.07625221851817587, -0.01578934892661068, -0.01578934892661068, 0.3207982229993141, 0.06642685519720933, 0.0790769242768118, -1.60663602445943, -0.3326819505219478, -0.003892082499011908, 0.07907692427681162, 0.01637425341470075, 0.01637425341470076, -0.3326819505219472, -0.06888758780342057 },
            { 0.02752405821238201, -0.00135470500718008, 0.005699335277544121, -0.008257036713055643, 0.0004064026057979398, -0.001709763155693541, 0.04718262429091383, -0.002322278818246467, 0.009769983518903593, 0.7430049996893133, -0.03656991951085679, 0.1538521163356631, -0.2228966205884076, 0.01097073569837149, -0.0461546245529081, 1.273683025813419, -0.06268933016038655, 0.2637382374871577, -0.7705290579016955, 0.03792462451803687, -0.1595514516132073, 0.2311536573014633, -0.01137713830416943, 0.04786438770860164, -1.320865650104333, 0.06501160897863303, -0.2735082210060614 },
            { 0.01320030568289655, -0.003960005018380648, 0.02262838781823015, -0.003960005018380649, 0.00118797550013697, -0.006788367744707566, 0.02262838781823015, -0.006788367744707566, 0.03879030891804837, 0.35633891790736, -0.1068993352923503, 0.6108476138991099, -0.1068993352923503, 0.0320690985791151, -0.183250272729709, 0.6108476138991099, -0.183250272729709, 1.04713459197079, -0.3695392235902566, 0.110859340310731, -0.6334760017173402, 0.110859340310731, -0.03325707407925207, 0.1900386404744166, -0.6334760017173402, 0.1900386404744166, -1.085924900888838 },
            { 0.0, 0.0, 0.03186868848274605, 0.0, 0.0, -0.009560397262951244, 0.0, 0.0, 0.05463032899157095, 0.0, 0.0, 0.8602871965141197, 0.0, 0.0, -0.2580805094429442, 0.0, 0.0, 1.47473193314019, 0.0, 0.0, -0.8921558849968658, 0.0, 0.0, 0.2676409067058955, 0.0, 0.0, -1.529362262131762 },
            { -0.003960005018380648, 0.01320030568289654, 0.02262838781823016, 0.00118797550013697, -0.003960005018380646, -0.006788367744707568, -0.006788367744707566, 0.02262838781823014, 0.03879030891804838, -0.1068993352923503, 0.3563389179073598, 0.6108476138991101, 0.0320690985791151, -0.1068993352923503, -0.183250272729709, -0.183250272729709, 0.6108476138991096, 1.04713459197079, 0.110859340310731, -0.3695392235902564, -0.6334760017173404, -0.03325707407925207, 0.1108593403107309, 0.1900386404744166, 0.1900386404744166, -0.6334760017173399, -1.085924900888839 },
            { -0.001354705007180083, 0.027524058212382, 0.00569933527754413, 0.0004064026057979406, -0.008257036713055641, -0.001709763155693543, -0.002322278818246471, 0.04718262429091381, 0.009769983518903607, -0.03656991951085686, 0.7430049996893131, 0.1538521163356634, 0.01097073569837151, -0.2228966205884075, -0.04615462455290817, -0.06268933016038668, 1.273683025813419, 0.2637382374871581, 0.03792462451803694, -0.7705290579016952, -0.1595514516132076, -0.01137713830416946, 0.2311536573014632, 0.04786438770860172, 0.06501160897863316, -1.320865650104333, -0.2735082210060618 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06644964579024019, -0.003270581219628607, 0.01375955564075417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.793791404914325, -0.08828851397287185, 0.3714357292699128, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.860241050704565, 0.09155909519250047, -0.385195284910667 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03186868848274605, -0.009560397262951244, 0.05463032899157095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8602871965141197, -0.2580805094429442, 1.47473193314019, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.8921558849968658, 0.2676409067058955, -1.529362262131762 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07693862021136576, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.076938620211366, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.153877240422732 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.009560397262951244, 0.03186868848274603, 0.05463032899157097, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.2580805094429442, 0.8602871965141192, 1.474731933140191, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2676409067058955, -0.8921558849968654, -1.529362262131762 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.003270581219628614, 0.06644964579024018, 0.01375955564075419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08828851397287203, 1.793791404914325, 0.3714357292699134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09155909519250065, -1.860241050704565, -0.3851952849106676 },
            { -0.008257036713055643, 0.0004064026057979398, -0.001709763155693541, 0.02752405821238199, -0.00135470500718008, 0.005699335277544117, 0.04718262429091384, -0.002322278818246468, 0.009769983518903597, -0.2228966205884076, 0.01097073569837149, -0.0461546245529081, 0.7430049996893129, -0.03656991951085677, 0.1538521163356631, 1.27368302581342, -0.06268933016038658, 0.2637382374871578, 0.2311536573014633, -0.01137713830416943, 0.04786438770860164, -0.770529057901695, 0.03792462451803685, -0.1595514516132072, -1.320865650104334, 0.06501160897863306, -0.2735082210060614 },
            { -0.003960005018380649, 0.00118797550013697, -0.006788367744707566, 0.01320030568289654, -0.003960005018380646, 0.02262838781823014, 0.02262838781823016, -0.006788367744707568, 0.03879030891804838, -0.1068993352923503, 0.0320690985791151, -0.183250272729709, 0.3563389179073598, -0.1068993352923503, 0.6108476138991097, 0.6108476138991101, -0.183250272729709, 1.04713459197079, 0.110859340310731, -0.03325707407925207, 0.1900386404744166, -0.3695392235902564, 0.1108593403107309, -0.6334760017173399, -0.6334760017173404, 0.1900386404744166, -1.085924900888839 },
            { 0.0, 0.0, -0.009560397262951244, 0.0, 0.0, 0.03186868848274603, 0.0, 0.0, 0.05463032899157097, 0.0, 0.0, -0.2580805094429442, 0.0, 0.0, 0.8602871965141192, 0.0, 0.0, 1.474731933140191, 0.0, 0.0, 0.2676409067058955, 0.0, 0.0, -0.8921558849968654, 0.0, 0.0, -1.529362262131762 },
            { 0.00118797550013697, -0.003960005018380646, -0.006788367744707568, -0.003960005018380646, 0.01320030568289653, 0.02262838781823014, -0.006788367744707568, 0.02262838781823014, 0.0387903089180484, 0.0320690985791151, -0.1068993352923503, -0.183250272729709, -0.1068993352923503, 0.3563389179073597, 0.6108476138991098, -0.183250272729709, 0.6108476138991098, 1.04713459197079, -0.03325707407925207, 0.1108593403107309, 0.1900386404744166, 0.1108593403107309, -0.3695392235902563, -0.6334760017173401, 0.1900386404744166, -0.6334760017173401, -1.085924900888839 },
            { 0.0004064026057979406, -0.008257036713055641, -0.001709763155693543, -0.001354705007180082, 0.02752405821238198, 0.005699335277544126, -0.002322278818246472, 0.04718262429091383, 0.00976998351890361, 0.01097073569837151, -0.2228966205884075, -0.04615462455290817, -0.03656991951085684, 0.7430049996893128, 0.1538521163356633, -0.06268933016038669, 1.273683025813419, 0.2637382374871582, -0.01137713830416946, 0.2311536573014632, 0.04786438770860172, 0.03792462451803693, -0.7705290579016948, -0.1595514516132075, 0.06501160897863319, -1.320865650104333, -0.2735082210060619 },
            { -0.002824705758635742, 0.0001390290270972029, -0.0005849044880900746, 0.0573906240262429, -0.002824705758635736, 0.01188372752263302, 0.01188372752263304, -0.0005849044880900743, 0.002460732606211232, -0.07625221851817605, 0.003753053471914705, -0.01578934892661068, 1.549245400433186, -0.07625221851817589, 0.3207982229993141, 0.3207982229993147, -0.01578934892661068, 0.06642685519720933, 0.0790769242768118, -0.003892082499011908, 0.01637425341470076, -1.60663602445943, 0.07907692427681162, -0.3326819505219472, -0.3326819505219478, 0.01637425341470075, -0.06888758780342057 },
            { -0.001354705007180083, 0.0004064026057979406, -0.002322278818246471, 0.027524058212382, -0.008257036713055641, 0.04718262429091382, 0.00569933527754413, -0.001709763155693543, 0.009769983518903609, -0.03656991951085686, 0.01097073569837151, -0.06268933016038669, 0.7430049996893131, -0.2228966205884075, 1.273683025813419, 0.1538521163356634, -0.04615462455290817, 0.2637382374871581, 0.03792462451803694, -0.01137713830416946, 0.06501160897863316, -0.7705290579016952, 0.2311536573014632, -1.320865650104333, -0.1595514516132075, 0.04786438770860171, -0.2735082210060618 },
            { 0.0, 0.0, -0.003270581219628614, 0.0, 0.0, 0.06644964579024018, 0.0, 0.0, 0.01375955564075419, 0.0, 0.0, -0.08828851397287203, 0.0, 0.0, 1.793791404914325, 0.0, 0.0, 0.3714357292699134, 0.0, 0.0, 0.09155909519250065, 0.0, 0.0, -1.860241050704565, 0.0, 0.0, -0.3851952849106676 },
            { 0.0004064026057979406, -0.001354705007180082, -0.002322278818246472, -0.008257036713055641, 0.02752405821238199, 0.04718262429091383, -0.001709763155693543, 0.005699335277544126, 0.00976998351890361, 0.01097073569837151, -0.03656991951085684, -0.06268933016038671, -0.2228966205884075, 0.7430049996893128, 1.27368302581342, -0.04615462455290817, 0.1538521163356633, 0.2637382374871582, -0.01137713830416946, 0.03792462451803692, 0.06501160897863317, 0.2311536573014632, -0.7705290579016948, -1.320865650104333, 0.04786438770860171, -0.1595514516132074, -0.2735082210060618 },
            { 0.0001390290270972031, -0.002824705758635741, -0.0005849044880900755, -0.002824705758635742, 0.05739062402624288, 0.01188372752263303, -0.0005849044880900755, 0.01188372752263303, 0.002460732606211236, 0.003753053471914712, -0.07625221851817604, -0.01578934892661071, -0.07625221851817603, 1.549245400433186, 0.3207982229993146, -0.01578934892661071, 0.3207982229993147, 0.06642685519720944, -0.003892082499011916, 0.07907692427681177, 0.01637425341470078, 0.07907692427681177, -1.606636024459429, -0.3326819505219477, 0.01637425341470079, -0.3326819505219477, -0.06888758780342068 },
            { 0.6059613432438321, -0.02982477582032929, 0.1254748421809384, -0.02982477582032929, 0.001467943892214535, -0.006175738899621261, 0.1254748421809384, -0.006175738899621261, 0.02598174981930524, 2.097816119650776, -0.1032522885798695, 0.4343893376576197, -0.1032522885798695, 0.005081968337032031, -0.02138018333814184, 0.4343893376576197, -0.02138018333814184, 0.08994787241030325, -2.703777462894608, 0.1330770644001988, -0.559864179838558, 0.1330770644001987, -0.006549912229246564, 0.0275559222377631, -0.559864179838558, 0.0275559222377631, -0.1159296222296085 },
            { 0.29061393858115, -0.08718227311082934, 0.4981797441341205, -0.0143037104018004, 0.004291019187986253, -0.02451987961392187, 0.06017667378557137, -0.01805260695508587, 0.1031567862701369, 1.006094880058082, -0.3018218569861813, 1.724680145656627, -0.04951892490547712, 0.01485535228055981, -0.08488693095606198, 0.2083294548436904, -0.06249746835230043, 0.357125040238391, -1.296708818639231, 0.3890041300970106, -2.222859889790747, 0.06382263530727751, -0.01914637146854605, 0.1094068105699838, -0.2685061286292618, 0.0805500753073863, -0.4602818265085279 },
            { 0.0, 0.0, 0.7016114096044412, 0.0, 0.0, -0.03453257082773602, 0.0, 0.0, 0.1452808531006224, 0.0, 0.0, 2.428953168728527, 0.0, 0.0, -0.1195505035809793, 0.0, 0.0, 0.502957026729781, 0.0, 0.0, -3.130564578332967, 0.0, 0.0, 0.1540830744087153, 0.0, 0.0, -0.6482378798304034 },
            { -0.08718227311082934, 0.2906139385811499, 0.4981797441341207, 0.004291019187986253, -0.01430371040180039, -0.02451987961392188, -0.01805260695508587, 0.06017667378557134, 0.1031567862701369, -0.3018218569861813, 1.006094880058081, 1.724680145656627, 0.01485535228055981, -0.04951892490547709, -0.08488693095606199, -0.06249746835230043, 0.2083294548436903, 0.3571250402383911, 0.3890041300970106, -1.296708818639231, -2.222859889790747, -0.01914637146854605, 0.06382263530727747, 0.1094068105699839, 0.0805500753073863, -0.2685061286292617, -0.4602818265085281 },
            { -0.02982477582032935, 0.605961343243832, 0.1254748421809386, 0.001467943892214538, -0.02982477582032928, -0.006175738899621271, -0.006175738899621273, 0.1254748421809384, 0.02598174981930529, -0.1032522885798697, 2.097816119650776, 0.4343893376576203, 0.00508196833703204, -0.1032522885798694, -0.02138018333814188, -0.02138018333814188, 0.4343893376576196, 0.08994787241030339, 0.133077064400199, -2.703777462894608, -0.5598641798385589, -0.006549912229246577, 0.1330770644001987, 0.02755592223776314, 0.02755592223776316, -0.5598641798385579, -0.1159296222296087 },
            { 0.2906139385811501, -0.0143037104018004, 0.06017667378557137, -0.08718227311082935, 0.004291019187986253, -0.01805260695508587, 0.4981797441341205, -0.02451987961392187, 0.1031567862701369, 1.006094880058082, -0.04951892490547712, 0.2083294548436904, -0.3018218569861813, 0.01485535228055981, -0.06249746835230043, 1.724680145656626, -0.08488693095606197, 0.357125040238391, -1.296708818639231, 0.06382263530727751, -0.2685061286292618, 0.3890041300970106, -0.01914637146854605, 0.0805500753073863, -2.222859889790747, 0.1094068105699838, -0.4602818265085279 },
            { 0.1393759886489395, -0.04181188131171022, 0.2389227946276918, -0.04181188131171022, 0.01254328981463225, -0.07167526938085099, 0.2389227946276918, -0.07167526938085099, 0.4095691255434947, 0.482514600873403, -0.1447512115856799, 0.8271420207085717, -0.1447512115856799, 0.04342441289361039, -0.2481371743658524, 0.8271420207085717, -0.2481371743658524, 1.417913408596236, -0.6218905895223423, 0.1865630928973901, -1.066064815336263, 0.1865630928973901, -0.05596770270824263, 0.3198124437467034, -1.066064815336263, 0.3198124437467034, -1.827482534139731 },
            { 0.0, 0.0, 0.336486901964921, 0.0, 0.0, -0.100943860877929, 0.0, 0.0, 0.5768166507903355, 0.0, 0.0, 1.164905409996295, 0.0, 0.0, -0.3494639730579219, 0.0, 0.0, 1.996918254938955, 0.0, 0.0, -1.501392311961216, 0.0, 0.0, 0.4504078339358508, 0.0, 0.0, -2.573734905729291 },
            { -0.04181188131171022, 0.1393759886489394, 0.2389227946276919, 0.01254328981463225, -0.0418118813117102, -0.07167526938085102, -0.07167526938085099, 0.2389227946276916, 0.4095691255434948, -0.1447512115856799, 0.4825146008734028, 0.827142020708572, 0.04342441289361039, -0.1447512115856798, -0.2481371743658525, -0.2481371743658524, 0.8271420207085712, 1.417913408596236, 0.1865630928973901, -0.621890589522342, -1.066064815336264, -0.05596770270824263, 0.18656309289739, 0.3198124437467035, 0.3198124437467034, -1.066064815336263, -1.827482534139731 },
            { -0.01430371040180043, 0.29061393858115, 0.06017667378557147, 0.004291019187986261, -0.08718227311082932, -0.0180526069550859, -0.02451987961392191, 0.4981797441341204, 0.103156786270137, -0.04951892490547721, 1.006094880058081, 0.2083294548436908, 0.01485535228055983, -0.3018218569861812, -0.06249746835230053, -0.08488693095606213, 1.724680145656626, 0.3571250402383916, 0.06382263530727764, -1.296708818639231, -0.2685061286292622, -0.01914637146854609, 0.3890041300970105, 0.08055007530738642, 0.109406810569984, -2.222859889790746, -0.4602818265085286 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7016114096044412, -0.03453257082773602, 0.1452808531006224, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.428953168728527, -0.1195505035809793, 0.502957026729781, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.130564578332967, 0.1540830744087153, -0.6482378798304034 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.336486901964921, -0.100943860877929, 0.5768166507903355, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.164905409996295, -0.3494639730579219, 1.996918254938955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.501392311961216, 0.4504078339358508, -2.573734905729291 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8123596918773276, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.812359691877328, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.624719383754655 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.100943860877929, 0.3364869019649208, 0.5768166507903357, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.3494639730579219, 1.164905409996294, 1.996918254938956, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4504078339358508, -1.501392311961215, -2.573734905729292 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03453257082773609, 0.701611409604441, 0.1452808531006226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1195505035809795, 2.428953168728526, 0.5029570267297818, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1540830744087156, -3.130564578332967, -0.6482378798304044 },
            { -0.08718227311082935, 0.004291019187986253, -0.01805260695508587, 0.2906139385811499, -0.01430371040180039, 0.06017667378557133, 0.4981797441341207, -0.02451987961392188, 0.1031567862701369, -0.3018218569861813, 0.01485535228055981, -0.06249746835230043, 1.006094880058081, -0.04951892490547709, 0.2083294548436903, 1.724680145656627, -0.08488693095606199, 0.3571250402383911, 0.3890041300970106, -0.01914637146854605, 0.0805500753073863, -1.296708818639231, 0.06382263530727748, -0.2685061286292617, -2.222859889790747, 0.1094068105699839, -0.4602818265085281 },
            { -0.04181188131171022, 0.01254328981463225, -0.07167526938085099, 0.1393759886489394, -0.04181188131171019, 0.2389227946276916, 0.2389227946276919, -0.07167526938085102, 0.4095691255434949, -0.1447512115856799, 0.04342441289361039, -0.2481371743658524, 0.4825146008734027, -0.1447512115856798, 0.8271420207085712, 0.8271420207085719, -0.2481371743658525, 1.417913408596237, 0.1865630928973901, -0.05596770270824263, 0.3198124437467034, -0.6218905895223421, 0.18656309289739, -1.066064815336263, -1.066064815336264, 0.3198124437467035, -1.827482534139731 },
            { 0.0, 0.0, -0.100943860877929, 0.0, 0.0, 0.3364869019649208, 0.0, 0.0, 0.5768166507903357, 0.0, 0.0, -0.3494639730579219, 0.0, 0.0, 1.164905409996294, 0.0, 0.0, 1.996918254938956, 0.0, 0.0, 0.4504078339358508, 0.0, 0.0, -1.501392311961215, 0.0, 0.0, -2.573734905729292 },
            { 0.01254328981463225, -0.0418118813117102, -0.07167526938085102, -0.04181188131171019, 0.1393759886489393, 0.2389227946276917, -0.07167526938085102, 0.2389227946276917, 0.409569125543495, 0.04342441289361039, -0.1447512115856798, -0.2481371743658525, -0.1447512115856798, 0.4825146008734025, 0.8271420207085715, -0.2481371743658525, 0.8271420207085715, 1.417913408596237, -0.05596770270824263, 0.18656309289739, 0.3198124437467035, 0.18656309289739, -0.6218905895223418, -1.066064815336263, 0.3198124437467035, -1.066064815336263, -1.827482534139732 },
            { 0.004291019187986261, -0.08718227311082932, -0.0180526069550859, -0.01430371040180042, 0.2906139385811498, 0.06017667378557143, -0.02451987961392192, 0.4981797441341206, 0.1031567862701371, 0.01485535228055983, -0.3018218569861812, -0.06249746835230053, -0.04951892490547719, 1.006094880058081, 0.2083294548436906, -0.08488693095606216, 1.724680145656626, 0.3571250402383917, -0.01914637146854609, 0.3890041300970105, 0.08055007530738642, 0.06382263530727761, -1.29670881863923, -0.268506128629262, 0.1094068105699841, -2.222859889790747, -0.4602818265085288 },
            { -0.02982477582032935, 0.001467943892214538, -0.006175738899621274, 0.605961343243832, -0.02982477582032928, 0.1254748421809384, 0.1254748421809386, -0.006175738899621271, 0.02598174981930529, -0.1032522885798697, 0.00508196833703204, -0.02138018333814189, 2.097816119650776, -0.1032522885798694, 0.4343893376576195, 0.4343893376576203, -0.02138018333814188, 0.08994787241030339, 0.133077064400199, -0.006549912229246577, 0.02755592223776315, -2.703777462894608, 0.1330770644001987, -0.5598641798385579, -0.5598641798385589, 0.02755592223776315, -0.1159296222296087 },
            { -0.01430371040180043, 0.004291019187986261, -0.02451987961392192, 0.29061393858115, -0.08718227311082931, 0.4981797441341204, 0.06017667378557146, -0.0180526069550859, 0.1031567862701371, -0.04951892490547721, 0.01485535228055984, -0.08488693095606215, 1.006094880058081, -0.3018218569861812, 1.724680145656626, 0.2083294548436908, -0.06249746835230053, 0.3571250402383916, 0.06382263530727764, -0.01914637146854609, 0.109406810569984, -1.296708818639231, 0.3890041300970105, -2.222859889790746, -0.2685061286292622, 0.08055007530738642, -0.4602818265085286 },
            { 0.0, 0.0, -0.03453257082773609, 0.0, 0.0, 0.701611409604441, 0.0, 0.0, 0.1452808531006226, 0.0, 0.0, -0.1195505035809795, 0.0, 0.0, 2.428953168728526, 0.0, 0.0, 0.5029570267297818, 0.0, 0.0, 0.1540830744087156, 0.0, 0.0, -3.130564578332967, 0.0, 0.0, -0.6482378798304044 },
            { 0.004291019187986261, -0.01430371040180042, -0.02451987961392193, -0.08718227311082931, 0.2906139385811498, 0.4981797441341205, -0.0180526069550859, 0.06017667378557143, 0.1031567862701371, 0.01485535228055984, -0.04951892490547719, -0.08488693095606217, -0.3018218569861812, 1.006094880058081, 1.724680145656626, -0.06249746835230053, 0.2083294548436906, 0.3571250402383917, -0.01914637146854609, 0.06382263530727759, 0.1094068105699841, 0.3890041300970105, -1.29670881863923, -2.222859889790747, 0.08055007530738642, -0.268506128629262, -0.4602818265085288 },
            { 0.001467943892214541, -0.02982477582032934, -0.006175738899621284, -0.02982477582032934, 0.6059613432438318, 0.1254748421809385, -0.006175738899621283, 0.1254748421809386, 0.02598174981930532, 0.005081968337032051, -0.1032522885798696, -0.02138018333814192, -0.1032522885798696, 2.097816119650775, 0.4343893376576202, -0.02138018333814192, 0.4343893376576202, 0.08994787241030353, -0.00654991222924659, 0.133077064400199, 0.0275559222377632, 0.133077064400199, -2.703777462894607, -0.5598641798385587, 0.0275559222377632, -0.5598641798385587, -0.1159296222296088 } } };
    alignas(32) static const double FE12_C0_Q125[1][125][27] =
        { { { 0.6442357634591096, -0.03170860226454257, 0.1334002270089049, -0.03170860226454256, 0.001560663835507124, -0.006565817950734635, 0.1334002270089049, -0.006565817950734635, 0.02762283868017033, -0.03170860226454256, 0.001560663835507124, -0.006565817950734635, 0.001560663835507124, -7.681422180451775e-5, 0.0003231626087061414, -0.006565817950734635, 0.0003231626087061414, -0.001359566877231795, 0.1334002270089049, -0.006565817950734635, 0.02762283868017033, -0.006565817950734635, 0.0003231626087061414, -0.001359566877231795, 0.02762283868017033, -0.001359566877231795, 0.005719789492560459 },
            { 0.3089700270176297, -0.09268897909722798, 0.5296463402830702, -0.01520717764217822, 0.004562053427024695, -0.02606863216461655, 0.06397762136301417, -0.01919286626747268, 0.1096724926427991, -0.01520717764217822, 0.004562053427024695, -0.02606863216461655, 0.0007484811846411554, -0.0002245394401118201, 0.001283070477879412, -0.003148910794301283, 0.0009446525593739007, -0.005397963984332906, 0.06397762136301417, -0.01919286626747268, 0.1096724926427991, -0.003148910794301283, 0.0009446525593739007, -0.005397963984332906, 0.01324767996034662, -0.003974216990508499, 0.02270959832566087 },
            { 0.0, 0.0, 0.7459273882034719, 0.0, 0.0, -0.03671375637977008, 0.0, 0.0, 0.1544572477383406, 0.0, 0.0, -0.03671375637977008, 0.0, 0.0, 0.001807012222408747, 0.0, 0.0, -0.007602222219260288, 0.0, 0.0, 0.1544572477383406, 0.0, 0.0, -0.007602222219260288, 0.0, 0.0, 0.03198306129549899 },
            { -0.09268897909722798, 0.3089700270176295, 0.5296463402830704, 0.004562053427024695, -0.01520717764217822, -0.02606863216461656, -0.01919286626747268, 0.06397762136301413, 0.1096724926427991, 0.004562053427024695, -0.01520717764217822, -0.02606863216461656, -0.0002245394401118201, 0.0007484811846411551, 0.001283070477879412, 0.0009446525593739007, -0.003148910794301281, -0.005397963984332908, -0.01919286626747268, 0.06397762136301413, 0.1096724926427991, 0.0009446525593739007, -0.003148910794301281, -0.005397963984332908, -0.003974216990508499, 0.01324767996034661, 0.02270959832566088 },
            { -0.03170860226454263, 0.6442357634591095, 0.1334002270089051, 0.001560663835507127, -0.03170860226454256, -0.006565817950734644, -0.006565817950734648, 0.1334002270089049, 0.02762283868017037, 0.001560663835507127, -0.03170860226454256, -0.006565817950734644, -7.68142218045179e-5, 0.001560663835507123, 0.0003231626087061419, 0.000323162608706142, -0.006565817950734633, -0.001359566877231797, -0.006565817950734648, 0.1334002270089049, 0.02762283868017037, 0.000323162608706142, -0.006565817950734633, -0.001359566877231797, -0.001359566877231798, 0.02762283868017032, 0.005719789492560468 },
            { 0.3089700270176297, -0.01520717764217822, 0.06397762136301417, -0.09268897909722797, 0.004562053427024695, -0.01919286626747268, 0.5296463402830702, -0.02606863216461655, 0.1096724926427991, -0.01520717764217822, 0.0007484811846411554, -0.003148910794301282, 0.004562053427024694, -0.0002245394401118201, 0.0009446525593739006, -0.02606863216461655, 0.001283070477879412, -0.005397963984332906, 0.06397762136301417, -0.003148910794301283, 0.01324767996034662, -0.01919286626747268, 0.0009446525593739006, -0.003974216990508499, 0.1096724926427991, -0.005397963984332906, 0.02270959832566087 },
            { 0.1481794135158004, -0.04445285095962347, 0.2540139081822886, -0.04445285095962347, 0.01333556336574236, -0.07620250434379484, 0.2540139081822886, -0.07620250434379484, 0.4354387969227589, -0.007293233864785159, 0.002187922264724061, -0.01250229565177725, 0.002187922264724061, -0.0006563623113182975, 0.003750606592881011, -0.01250229565177725, 0.003750606592881011, -0.0214318366121738, 0.03068312646121642, -0.009204736442085417, 0.0525980005099285, -0.009204736442085415, 0.002761360485064999, -0.01577905474158686, 0.05259800050992849, -0.01577905474158686, 0.0901651812157854 },
            { 0.0, 0.0, 0.3577404707384656, 0.0, 0.0, -0.1073197919376759, 0.0, 0.0, 0.6132502007612527, 0.0, 0.0, -0.01760760725183835, 0.0, 0.0, 0.005282166546286775, 0.0, 0.0, -0.03018352567107004, 0.0, 0.0, 0.07407639052905951, 0.0, 0.0, -0.02222243069860727, 0.0, 0.0, 0.126984126984127 },
            { -0.04445285095962347, 0.1481794135158004, 0.2540139081822887, 0.01333556336574236, -0.04445285095962345, -0.07620250434379487, -0.07620250434379484, 0.2540139081822885, 0.4354387969227591, 0.002187922264724061, -0.007293233864785155, -0.01250229565177726, -0.0006563623113182975, 0.002187922264724061, 0.003750606592881012, 0.003750606592881011, -0.01250229565177725, -0.02143183661217381, -0.009204736442085417, 0.03068312646121641, 0.05259800050992852, 0.002761360485064999, -0.009204736442085412, -0.01577905474158686, -0.01577905474158686, 0.05259800050992847, 0.09016518121578543 },
            { -0.01520717764217825, 0.3089700270176296, 0.06397762136301427, 0.004562053427024704, -0.09268897909722794, -0.01919286626747271, -0.0260686321646166, 0.52964634028307, 0.1096724926427992, 0.0007484811846411568, -0.01520717764217822, -0.003148910794301287, -0.0002245394401118205, 0.004562053427024693, 0.0009446525593739021, 0.001283070477879415, -0.02606863216461654, -0.005397963984332915, -0.003148910794301289, 0.06397762136301416, 0.01324767996034664, 0.0009446525593739025, -0.01919286626747267, -0.003974216990508505, -0.005397963984332917, 0.109672492642799, 0.02270959832566091 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7459273882034719, -0.03671375637977008, 0.1544572477383406, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03671375637977008, 0.001807012222408747, -0.007602222219260288, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1544572477383406, -0.007602222219260288, 0.03198306129549899 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3577404707384656, -0.1073197919376759, 0.6132502007612527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.01760760725183835, 0.005282166546286775, -0.03018352567107004, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07407639052905951, -0.02222243069860727, 0.126984126984127 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8636708795620424, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.04250896637662162, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1788380868145793 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1073197919376759, 0.3577404707384654, 0.6132502007612529, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005282166546286775, -0.01760760725183834, -0.03018352567107005, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.02222243069860727, 0.07407639052905947, 0.1269841269841271 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03671375637977015, 0.7459273882034717, 0.1544572477383408, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001807012222408751, -0.03671375637977007, -0.0076022222192603, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.007602222219260303, 0.1544572477383405, 0.03198306129549904 },
            { -0.09268897909722797, 0.004562053427024695, -0.01919286626747268, 0.3089700270176295, -0.01520717764217822, 0.06397762136301413, 0.5296463402830703, -0.02606863216461656, 0.1096724926427991, 0.004562053427024694, -0.0002245394401118201, 0.0009446525593739006, -0.01520717764217822, 0.0007484811846411551, -0.003148910794301281, -0.02606863216461656, 0.001283070477879412, -0.005397963984332908, -0.01919286626747268, 0.0009446525593739006, -0.003974216990508499, 0.06397762136301413, -0.003148910794301281, 0.01324767996034661, 0.1096724926427991, -0.005397963984332908, 0.02270959832566088 },
            { -0.04445285095962347, 0.01333556336574236, -0.07620250434379484, 0.1481794135158004, -0.04445285095962345, 0.2540139081822885, 0.2540139081822887, -0.07620250434379487, 0.4354387969227591, 0.002187922264724061, -0.0006563623113182975, 0.003750606592881011, -0.007293233864785156, 0.002187922264724061, -0.01250229565177725, -0.01250229565177726, 0.003750606592881013, -0.02143183661217381, -0.009204736442085415, 0.002761360485064999, -0.01577905474158686, 0.03068312646121641, -0.009204736442085412, 0.05259800050992847, 0.05259800050992852, -0.01577905474158686, 0.09016518121578543 },
            { 0.0, 0.0, -0.1073197919376759, 0.0, 0.0, 0.3577404707384654, 0.0, 0.0, 0.6132502007612529, 0.0, 0.0, 0.005282166546286775, 0.0, 0.0, -0.01760760725183834, 0.0, 0.0, -0.03018352567107005, 0.0, 0.0, -0.02222243069860727, 0.0, 0.0, 0.07407639052905947, 0.0, 0.0, 0.1269841269841271 },
            { 0.01333556336574236, -0.04445285095962345, -0.07620250434379487, -0.04445285095962345, 0.1481794135158003, 0.2540139081822886, -0.07620250434379487, 0.2540139081822886, 0.4354387969227592, -0.0006563623113182975, 0.002187922264724061, 0.003750606592881012, 0.002187922264724061, -0.007293233864785152, -0.01250229565177725, 0.003750606592881013, -0.01250229565177725, -0.02143183661217381, 0.002761360485064999, -0.009204736442085412, -0.01577905474158686, -0.009204736442085412, 0.03068312646121639, 0.05259800050992849, -0.01577905474158686, 0.05259800050992849, 0.09016518121578546 },
            { 0.004562053427024704, -0.09268897909722794, -0.01919286626747271, -0.01520717764217825, 0.3089700270176294, 0.06397762136301424, -0.02606863216461661, 0.5296463402830702, 0.1096724926427993, -0.0002245394401118205, 0.004562053427024693, 0.0009446525593739021, 0.0007484811846411566, -0.01520717764217821, -0.003148910794301286, 0.001283070477879415, -0.02606863216461655, -0.005397963984332917, 0.0009446525593739025, -0.01919286626747267, -0.003974216990508505, -0.003148910794301287, 0.06397762136301412, 0.01324767996034664, -0.005397963984332919, 0.1096724926427991, 0.02270959832566091 },
            { -0.03170860226454263, 0.001560663835507127, -0.006565817950734648, 0.6442357634591094, -0.03170860226454256, 0.1334002270089049, 0.1334002270089051, -0.006565817950734644, 0.02762283868017037, 0.001560663835507127, -7.681422180451788e-5, 0.000323162608706142, -0.03170860226454256, 0.001560663835507123, -0.006565817950734633, -0.006565817950734644, 0.0003231626087061419, -0.001359566877231797, -0.006565817950734648, 0.000323162608706142, -0.001359566877231798, 0.1334002270089048, -0.006565817950734632, 0.02762283868017032, 0.02762283868017037, -0.001359566877231797, 0.005719789492560468 },
            { -0.01520717764217826, 0.004562053427024704, -0.0260686321646166, 0.3089700270176296, -0.09268897909722795, 0.5296463402830701, 0.06397762136301426, -0.0191928662674727, 0.1096724926427992, 0.0007484811846411569, -0.0002245394401118205, 0.001283070477879414, -0.01520717764217822, 0.004562053427024694, -0.02606863216461654, -0.003148910794301287, 0.0009446525593739022, -0.005397963984332914, -0.003148910794301289, 0.0009446525593739026, -0.005397963984332917, 0.06397762136301414, -0.01919286626747267, 0.109672492642799, 0.01324767996034664, -0.003974216990508505, 0.02270959832566091 },
            { 0.0, 0.0, -0.03671375637977015, 0.0, 0.0, 0.7459273882034717, 0.0, 0.0, 0.1544572477383408, 0.0, 0.0, 0.001807012222408751, 0.0, 0.0, -0.03671375637977007, 0.0, 0.0, -0.0076022222192603, 0.0, 0.0, -0.007602222219260303, 0.0, 0.0, 0.1544572477383405, 0.0, 0.0, 0.03198306129549904 },
            { 0.004562053427024704, -0.01520717764217825, -0.02606863216461661, -0.09268897909722795, 0.3089700270176294, 0.5296463402830702, -0.0191928662674727, 0.06397762136301423, 0.1096724926427993, -0.0002245394401118205, 0.0007484811846411565, 0.001283070477879415, 0.004562053427024694, -0.01520717764217821, -0.02606863216461655, 0.0009446525593739022, -0.003148910794301286, -0.005397963984332916, 0.0009446525593739026, -0.003148910794301287, -0.005397963984332919, -0.01919286626747267, 0.06397762136301412, 0.1096724926427991, -0.003974216990508505, 0.01324767996034664, 0.02270959832566091 },
            { 0.00156066383550713, -0.03170860226454263, -0.006565817950734658, -0.03170860226454262, 0.6442357634591093, 0.1334002270089051, -0.006565817950734658, 0.1334002270089051, 0.02762283868017041, -7.681422180451804e-5, 0.001560663835507126, 0.0003231626087061425, 0.001560663835507126, -0.03170860226454255, -0.006565817950734644, 0.0003231626087061425, -0.006565817950734643, -0.001359566877231799, 0.0003231626087061426, -0.006565817950734646, -0.0013595668772318, -0.006565817950734645, 0.1334002270089048, 0.02762283868017036, -0.0013595668772318, 0.02762283868017036, 0.005719789492560477 },
            { 0.3089700270176297, -0.01520717764217822, 0.06397762136301417, -0.01520717764217822, 0.0007484811846411554, -0.003148910794301282, 0.06397762136301417, -0.003148910794301283, 0.01324767996034662, -0.09268897909722797, 0.004562053427024695, -0.01919286626747268, 0.004562053427024694, -0.0002245394401118201, 0.0009446525593739006, -0.01919286626747268, 0.0009446525593739006, -0.003974216990508499, 0.5296463402830702, -0.02606863216461655, 0.1096724926427991, -0.02606863216461655, 0.001283070477879412, -0.005397963984332906, 0.1096724926427991, -0.005397963984332906, 0.02270959832566087 },
            { 0.1481794135158004, -0.04445285095962347, 0.2540139081822886, -0.007293233864785159, 0.002187922264724061, -0.01250229565177725, 0.03068312646121642, -0.009204736442085417, 0.0525980005099285, -0.04445285095962347, 0.01333556336574236, -0.07620250434379484, 0.002187922264724061, -0.0006563623113182975, 0.003750606592881011, -0.009204736442085415, 0.002761360485064999, -0.01577905474158686, 0.2540139081822886, -0.07620250434379484, 0.4354387969227589, -0.01250229565177725, 0.003750606592881011, -0.0214318366121738, 0.05259800050992849, -0.01577905474158686, 0.0901651812157854 },
            { 0.0, 0.0, 0.3577404707384656, 0.0, 0.0, -0.01760760725183835, 0.0, 0.0, 0.07407639052905951, 0.0, 0.0, -0.1073197919376759, 0.0, 0.0, 0.005282166546286775, 0.0, 0.0, -0.02222243069860727, 0.0, 0.0, 0.6132502007612527, 0.0, 0.0, -0.03018352567107004, 0.0, 0.0, 0.126984126984127 },
            { -0.04445285095962347, 0.1481794135158004, 0.2540139081822887, 0.002187922264724061, -0.007293233864785155, -0.01250229565177726, -0.009204736442085417, 0.03068312646121641, 0.05259800050992852, 0.01333556336574236, -0.04445285095962345, -0.07620250434379487, -0.0006563623113182975, 0.002187922264724061, 0.003750606592881012, 0.002761360485064999, -0.009204736442085412, -0.01577905474158686, -0.07620250434379484, 0.2540139081822885, 0.4354387969227591, 0.003750606592881011, -0.01250229565177725, -0.02143183661217381, -0.01577905474158686, 0.05259800050992847, 0.09016518121578543 },
            { -0.01520717764217825, 0.3089700270176296, 0.06397762136301427, 0.0007484811846411568, -0.01520717764217822, -0.003148910794301287, -0.003148910794301289, 0.06397762136301416, 0.01324767996034664, 0.004562053427024704, -0.09268897909722794, -0.01919286626747271, -0.0002245394401118205, 0.004562053427024693, 0.0009446525593739021, 0.0009446525593739025, -0.01919286626747267, -0.003974216990508505, -0.0260686321646166, 0.52964634028307, 0.1096724926427992, 0.001283070477879415, -0.02606863216461654, -0.005397963984332915, -0.005397963984332917, 0.109672492642799, 0.02270959832566091 },
            { 0.1481794135158005, -0.007293233864785161, 0.03068312646121642, -0.04445285095962347, 0.002187922264724062, -0.009204736442085417, 0.2540139081822886, -0.01250229565177725, 0.0525980005099285, -0.04445285095962347, 0.002187922264724062, -0.009204736442085417, 0.01333556336574236, -0.0006563623113182975, 0.002761360485064999, -0.07620250434379484, 0.003750606592881011, -0.01577905474158686, 0.2540139081822886, -0.01250229565177725, 0.0525980005099285, -0.07620250434379484, 0.003750606592881011, -0.01577905474158686, 0.435438796922759, -0.0214318366121738, 0.09016518121578541 },
            { 0.07106559429673651, -0.02131921160082768, 0.1218229234163229, -0.02131921160082768, 0.006395623476855069, -0.03654607701301221, 0.1218229234163229, -0.03654607701301221, 0.2088327666371292, -0.02131921160082768, 0.006395623476855069, -0.03654607701301221, 0.006395623476855069, -0.001918645042957953, 0.01096358310559195, -0.03654607701301221, 0.01096358310559195, -0.06264845858508043, 0.1218229234163229, -0.03654607701301221, 0.2088327666371292, -0.03654607701301221, 0.01096358310559195, -0.06264845858508043, 0.2088327666371292, -0.06264845858508043, 0.3579878334743218 },
            { 0.0, 0.0, 0.1715693061122317, 0.0, 0.0, -0.05146966513698482, 0.0, 0.0, 0.2941096130404399, 0.0, 0.0, -0.05146966513698482, 0.0, 0.0, 0.01544056153948906, 0.0, 0.0, -0.08823095249250069, 0.0, 0.0, 0.2941096130404399, 0.0, 0.0, -0.08823095249250069, 0.0, 0.0, 0.5041721415263706 },
            { -0.02131921160082768, 0.07106559429673648, 0.1218229234163229, 0.006395623476855069, -0.02131921160082767, -0.03654607701301222, -0.03654607701301221, 0.1218229234163228, 0.2088327666371292, 0.006395623476855069, -0.02131921160082767, -0.03654607701301222, -0.001918645042957953, 0.006395623476855065, 0.01096358310559195, 0.01096358310559195, -0.03654607701301219, -0.06264845858508045, -0.03654607701301221, 0.1218229234163228, 0.2088327666371292, 0.01096358310559195, -0.03654607701301219, -0.06264845858508045, -0.06264845858508043, 0.2088327666371291, 0.3579878334743219 },
            { -0.007293233864785175, 0.1481794135158004, 0.03068312646121647, 0.002187922264724066, -0.04445285095962346, -0.009204736442085431, -0.01250229565177728, 0.2540139081822886, 0.05259800050992858, 0.002187922264724066, -0.04445285095962346, -0.009204736442085431, -0.0006563623113182988, 0.01333556336574236, 0.002761360485065003, 0.003750606592881019, -0.07620250434379483, -0.01577905474158688, -0.01250229565177728, 0.2540139081822886, 0.05259800050992858, 0.003750606592881019, -0.07620250434379483, -0.01577905474158688, -0.02143183661217385, 0.4354387969227589, 0.09016518121578555 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3577404707384656, -0.01760760725183835, 0.07407639052905951, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1073197919376759, 0.005282166546286775, -0.02222243069860727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6132502007612527, -0.03018352567107004, 0.126984126984127 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1715693061122317, -0.05146966513698482, 0.2941096130404399, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05146966513698482, 0.01544056153948906, -0.08823095249250069, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2941096130404399, -0.08823095249250069, 0.5041721415263706 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4142092540156868, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1242600560899964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7100508020743097 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05146966513698482, 0.1715693061122316, 0.29410961304044, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01544056153948906, -0.0514696651369848, -0.08823095249250072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08823095249250069, 0.2941096130404397, 0.5041721415263707 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.01760760725183838, 0.3577404707384655, 0.07407639052905962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005282166546286785, -0.1073197919376759, -0.02222243069860731, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0301835256710701, 0.6132502007612526, 0.1269841269841272 },
            { -0.04445285095962347, 0.002187922264724062, -0.009204736442085417, 0.1481794135158004, -0.007293233864785155, 0.0306831264612164, 0.2540139081822887, -0.01250229565177726, 0.05259800050992852, 0.01333556336574236, -0.0006563623113182975, 0.002761360485064999, -0.04445285095962345, 0.002187922264724061, -0.009204736442085412, -0.07620250434379487, 0.003750606592881013, -0.01577905474158686, -0.07620250434379484, 0.003750606592881011, -0.01577905474158686, 0.2540139081822885, -0.01250229565177725, 0.05259800050992847, 0.4354387969227591, -0.02143183661217381, 0.09016518121578543 },
            { -0.02131921160082768, 0.006395623476855069, -0.03654607701301221, 0.07106559429673646, -0.02131921160082767, 0.1218229234163228, 0.1218229234163229, -0.03654607701301222, 0.2088327666371293, 0.006395623476855069, -0.001918645042957953, 0.01096358310559195, -0.02131921160082767, 0.006395623476855065, -0.03654607701301219, -0.03654607701301222, 0.01096358310559195, -0.06264845858508045, -0.03654607701301221, 0.01096358310559195, -0.06264845858508043, 0.1218229234163228, -0.03654607701301218, 0.2088327666371291, 0.2088327666371292, -0.06264845858508045, 0.3579878334743219 },
            { 0.0, 0.0, -0.05146966513698482, 0.0, 0.0, 0.1715693061122316, 0.0, 0.0, 0.29410961304044, 0.0, 0.0, 0.01544056153948906, 0.0, 0.0, -0.0514696651369848, 0.0, 0.0, -0.08823095249250072, 0.0, 0.0, -0.08823095249250069, 0.0, 0.0, 0.2941096130404397, 0.0, 0.0, 0.5041721415263707 },
            { 0.006395623476855069, -0.02131921160082767, -0.03654607701301222, -0.02131921160082767, 0.07106559429673642, 0.1218229234163229, -0.03654607701301222, 0.1218229234163229, 0.2088327666371293, -0.001918645042957953, 0.006395623476855065, 0.01096358310559195, 0.006395623476855065, -0.02131921160082766, -0.0365460770130122, 0.01096358310559195, -0.03654607701301221, -0.06264845858508047, 0.01096358310559195, -0.03654607701301219, -0.06264845858508045, -0.03654607701301218, 0.1218229234163228, 0.2088327666371291, -0.06264845858508045, 0.2088327666371291, 0.357987833474322 },
            { 0.002187922264724066, -0.04445285095962346, -0.009204736442085431, -0.00729323386478517, 0.1481794135158003, 0.03068312646121645, -0.01250229565177728, 0.2540139081822886, 0.05259800050992861, -0.0006563623113182988, 0.01333556336574236, 0.002761360485065003, 0.002187922264724065, -0.04445285095962344, -0.009204736442085425, 0.00375060659288102, -0.07620250434379486, -0.01577905474158689, 0.003750606592881019, -0.07620250434379483, -0.01577905474158688, -0.01250229565177727, 0.2540139081822884, 0.05259800050992855, -0.02143183661217385, 0.4354387969227589, 0.09016518121578557 },
            { -0.01520717764217825, 0.0007484811846411568, -0.003148910794301288, 0.3089700270176295, -0.01520717764217822, 0.06397762136301414, 0.06397762136301427, -0.003148910794301287, 0.01324767996034664, 0.004562053427024704, -0.0002245394401118205, 0.0009446525593739025, -0.09268897909722794, 0.004562053427024693, -0.01919286626747267, -0.01919286626747271, 0.0009446525593739022, -0.003974216990508505, -0.0260686321646166, 0.001283070477879415, -0.005397963984332917, 0.5296463402830701, -0.02606863216461654, 0.1096724926427991, 0.1096724926427992, -0.005397963984332914, 0.0227095983256609 },
            { -0.007293233864785174, 0.002187922264724066, -0.01250229565177728, 0.1481794135158004, -0.04445285095962345, 0.2540139081822885, 0.03068312646121647, -0.009204736442085431, 0.05259800050992858, 0.002187922264724066, -0.0006563623113182988, 0.003750606592881018, -0.04445285095962346, 0.01333556336574236, -0.07620250434379483, -0.009204736442085431, 0.002761360485065003, -0.01577905474158688, -0.01250229565177728, 0.003750606592881019, -0.02143183661217384, 0.2540139081822886, -0.07620250434379483, 0.4354387969227588, 0.05259800050992858, -0.01577905474158688, 0.09016518121578553 },
            { 0.0, 0.0, -0.01760760725183838, 0.0, 0.0, 0.3577404707384655, 0.0, 0.0, 0.07407639052905962, 0.0, 0.0, 0.005282166546286785, 0.0, 0.0, -0.1073197919376759, 0.0, 0.0, -0.02222243069860731, 0.0, 0.0, -0.0301835256710701, 0.0, 0.0, 0.6132502007612526, 0.0, 0.0, 0.1269841269841272 },
            { 0.002187922264724066, -0.007293233864785169, -0.01250229565177728, -0.04445285095962345, 0.1481794135158003, 0.2540139081822886, -0.009204736442085431, 0.03068312646121645, 0.0525980005099286, -0.0006563623113182988, 0.002187922264724065, 0.00375060659288102, 0.01333556336574236, -0.04445285095962343, -0.07620250434379484, 0.002761360485065003, -0.009204736442085425, -0.01577905474158689, 0.003750606592881019, -0.01250229565177727, -0.02143183661217385, -0.07620250434379483, 0.2540139081822884, 0.435438796922759, -0.01577905474158688, 0.05259800050992855, 0.09016518121578555 },
            { 0.0007484811846411583, -0.01520717764217825, -0.003148910794301294, -0.01520717764217825, 0.3089700270176295, 0.06397762136301424, -0.003148910794301294, 0.06397762136301426, 0.01324767996034666, -0.0002245394401118209, 0.004562053427024702, 0.000944652559373904, 0.004562053427024703, -0.09268897909722792, -0.0191928662674727, 0.000944652559373904, -0.0191928662674727, -0.003974216990508511, 0.001283070477879417, -0.02606863216461659, -0.005397963984332925, -0.02606863216461659, 0.5296463402830699, 0.1096724926427992, -0.005397963984332925, 0.1096724926427992, 0.02270959832566094 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7459273882034719, -0.03671375637977008, 0.1544572477383406, -0.03671375637977008, 0.001807012222408747, -0.007602222219260288, 0.1544572477383406, -0.007602222219260288, 0.03198306129549899 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3577404707384656, -0.1073197919376759, 0.6132502007612527, -0.01760760725183835, 0.005282166546286775, -0.03018352567107004, 0.07407639052905951, -0.02222243069860727, 0.126984126984127 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8636708795620424, 0.0, 0.0, -0.04250896637662162, 0.0, 0.0, 0.1788380868145793 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1073197919376759, 0.3577404707384654, 0.6132502007612529, 0.005282166546286775, -0.01760760725183834, -0.03018352567107005, -0.02222243069860727, 0.07407639052905947, 0.1269841269841271 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03671375637977015, 0.7459273882034717, 0.1544572477383408, 0.001807012222408751, -0.03671375637977007, -0.0076022222192603, -0.007602222219260303, 0.1544572477383405, 0.03198306129549904 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3577404707384656, -0.01760760725183835, 0.07407639052905951, -0.1073197919376759, 0.005282166546286775, -0.02222243069860727, 0.6132502007612527, -0.03018352567107004, 0.126984126984127 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1715693061122317, -0.05146966513698482, 0.2941096130404399, -0.05146966513698482, 0.01544056153948906, -0.08823095249250069, 0.2941096130404399, -0.08823095249250069, 0.5041721415263706 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4142092540156868, 0.0, 0.0, -0.1242600560899964, 0.0, 0.0, 0.7100508020743097 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05146966513698482, 0.1715693061122316, 0.29410961304044, 0.01544056153948906, -0.0514696651369848, -0.08823095249250072, -0.08823095249250069, 0.2941096130404397, 0.5041721415263707 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.01760760725183838, 0.3577404707384655, 0.07407639052905962, 0.005282166546286785, -0.1073197919376759, -0.02222243069860731, -0.0301835256710701, 0.6132502007612526, 0.1269841269841272 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8636708795620424, -0.04250896637662162, 0.1788380868145793 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4142092540156868, -0.1242600560899964, 0.7100508020743097 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1242600560899964, 0.4142092540156865, 0.7100508020743099 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0425089663766217, 0.8636708795620421, 0.1788380868145795 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1073197919376759, 0.005282166546286775, -0.02222243069860727, 0.3577404707384654, -0.01760760725183834, 0.07407639052905947, 0.6132502007612529, -0.03018352567107005, 0.1269841269841271 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05146966513698482, 0.01544056153948906, -0.08823095249250069, 0.1715693061122316, -0.0514696651369848, 0.2941096130404397, 0.29410961304044, -0.08823095249250072, 0.5041721415263707 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1242600560899964, 0.0, 0.0, 0.4142092540156865, 0.0, 0.0, 0.7100508020743099 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01544056153948906, -0.0514696651369848, -0.08823095249250072, -0.0514696651369848, 0.1715693061122315, 0.2941096130404398, -0.08823095249250072, 0.2941096130404398, 0.5041721415263708 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005282166546286785, -0.1073197919376759, -0.02222243069860731, -0.01760760725183838, 0.3577404707384653, 0.07407639052905958, -0.03018352567107011, 0.6132502007612527, 0.1269841269841273 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03671375637977015, 0.001807012222408751, -0.007602222219260303, 0.7459273882034717, -0.03671375637977007, 0.1544572477383405, 0.1544572477383408, -0.0076022222192603, 0.03198306129549904 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.01760760725183838, 0.005282166546286785, -0.0301835256710701, 0.3577404707384655, -0.1073197919376759, 0.6132502007612526, 0.07407639052905962, -0.02222243069860731, 0.1269841269841272 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0425089663766217, 0.0, 0.0, 0.8636708795620421, 0.0, 0.0, 0.1788380868145795 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005282166546286785, -0.01760760725183838, -0.03018352567107011, -0.1073197919376759, 0.3577404707384653, 0.6132502007612527, -0.02222243069860731, 0.07407639052905958, 0.1269841269841273 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001807012222408754, -0.03671375637977014, -0.007602222219260315, -0.03671375637977014, 0.7459273882034715, 0.1544572477383408, -0.007602222219260315, 0.1544572477383408, 0.03198306129549909 },
            { -0.09268897909722797, 0.004562053427024695, -0.01919286626747268, 0.004562053427024694, -0.0002245394401118201, 0.0009446525593739006, -0.01919286626747268, 0.0009446525593739006, -0.003974216990508499, 0.3089700270176295, -0.01520717764217822, 0.06397762136301413, -0.01520717764217822, 0.0007484811846411551, -0.003148910794301281, 0.06397762136301413, -0.003148910794301281, 0.01324767996034661, 0.5296463402830703, -0.02606863216461656, 0.1096724926427991, -0.02606863216461656, 0.001283070477879412, -0.005397963984332908, 0.1096724926427991, -0.005397963984332908, 0.02270959832566088 },
            { -0.04445285095962347, 0.01333556336574236, -0.07620250434379484, 0.002187922264724061, -0.0006563623113182975, 0.003750606592881011, -0.009204736442085415, 0.002761360485064999, -0.01577905474158686, 0.1481794135158004, -0.04445285095962345, 0.2540139081822885, -0.007293233864785156, 0.002187922264724061, -0.01250229565177725, 0.03068312646121641, -0.009204736442085412, 0.05259800050992847, 0.2540139081822887, -0.07620250434379487, 0.4354387969227591, -0.01250229565177726, 0.003750606592881013, -0.02143183661217381, 0.05259800050992852, -0.01577905474158686, 0.09016518121578543 },
            { 0.0, 0.0, -0.1073197919376759, 0.0, 0.0, 0.005282166546286775, 0.0, 0.0, -0.02222243069860727, 0.0, 0.0, 0.3577404707384654, 0.0, 0.0, -0.01760760725183834, 0.0, 0.0, 0.07407639052905947, 0.0, 0.0, 0.6132502007612529, 0.0, 0.0, -0.03018352567107005, 0.0, 0.0, 0.1269841269841271 },
            { 0.01333556336574236, -0.04445285095962345, -0.07620250434379487, -0.0006563623113182975, 0.002187922264724061, 0.003750606592881012, 0.002761360485064999, -0.009204736442085412, -0.01577905474158686, -0.04445285095962345, 0.1481794135158003, 0.2540139081822886, 0.002187922264724061, -0.007293233864785152, -0.01250229565177725, -0.009204736442085412, 0.03068312646121639, 0.05259800050992849, -0.07620250434379487, 0.2540139081822886, 0.4354387969227592, 0.003750606592881013, -0.01250229565177725, -0.02143183661217381, -0.01577905474158686, 0.05259800050992849, 0.09016518121578546 },
            { 0.004562053427024704, -0.09268897909722794, -0.01919286626747271, -0.0002245394401118205, 0.004562053427024693, 0.0009446525593739021, 0.0009446525593739025, -0.01919286626747267, -0.003974216990508505, -0.01520717764217825, 0.3089700270176294, 0.06397762136301424, 0.0007484811846411566, -0.01520717764217821, -0.003148910794301286, -0.003148910794301287, 0.06397762136301412, 0.01324767996034664, -0.02606863216461661, 0.5296463402830702, 0.1096724926427993, 0.001283070477879415, -0.02606863216461655, -0.005397963984332917, -0.005397963984332919, 0.1096724926427991, 0.02270959832566091 },
            { -0.04445285095962347, 0.002187922264724062, -0.009204736442085417, 0.01333556336574236, -0.0006563623113182975, 0.002761360485064999, -0.07620250434379484, 0.003750606592881011, -0.01577905474158686, 0.1481794135158004, -0.007293233864785155, 0.0306831264612164, -0.04445285095962345, 0.002187922264724061, -0.009204736442085412, 0.2540139081822885, -0.01250229565177725, 0.05259800050992847, 0.2540139081822887, -0.01250229565177726, 0.05259800050992852, -0.07620250434379487, 0.003750606592881013, -0.01577905474158686, 0.4354387969227591, -0.02143183661217381, 0.09016518121578543 },
            { -0.02131921160082768, 0.006395623476855069, -0.03654607701301221, 0.006395623476855069, -0.001918645042957953, 0.01096358310559195, -0.03654607701301221, 0.01096358310559195, -0.06264845858508043, 0.07106559429673646, -0.02131921160082767, 0.1218229234163228, -0.02131921160082767, 0.006395623476855065, -0.03654607701301219, 0.1218229234163228, -0.03654607701301218, 0.2088327666371291, 0.1218229234163229, -0.03654607701301222, 0.2088327666371293, -0.03654607701301222, 0.01096358310559195, -0.06264845858508045, 0.2088327666371292, -0.06264845858508045, 0.3579878334743219 },
            { 0.0, 0.0, -0.05146966513698482, 0.0, 0.0, 0.01544056153948906, 0.0, 0.0, -0.08823095249250069, 0.0, 0.0, 0.1715693061122316, 0.0, 0.0, -0.0514696651369848, 0.0, 0.0, 0.2941096130404397, 0.0, 0.0, 0.29410961304044, 0.0, 0.0, -0.08823095249250072, 0.0, 0.0, 0.5041721415263707 },
            { 0.006395623476855069, -0.02131921160082767, -0.03654607701301222, -0.001918645042957953, 0.006395623476855065, 0.01096358310559195, 0.01096358310559195, -0.03654607701301219, -0.06264845858508045, -0.02131921160082767, 0.07106559429673642, 0.1218229234163229, 0.006395623476855065, -0.02131921160082766, -0.0365460770130122, -0.03654607701301218, 0.1218229234163228, 0.2088327666371291, -0.03654607701301222, 0.1218229234163229, 0.2088327666371293, 0.01096358310559195, -0.03654607701301221, -0.06264845858508047, -0.06264845858508045, 0.2088327666371291, 0.357987833474322 },
            { 0.002187922264724066, -0.04445285095962346, -0.009204736442085431, -0.0006563623113182988, 0.01333556336574236, 0.002761360485065003, 0.003750606592881019, -0.07620250434379483, -0.01577905474158688, -0.00729323386478517, 0.1481794135158003, 0.03068312646121645, 0.002187922264724065, -0.04445285095962344, -0.009204736442085425, -0.01250229565177727, 0.2540139081822884, 0.05259800050992855, -0.01250229565177728, 0.2540139081822886, 0.05259800050992861, 0.00375060659288102, -0.07620250434379486, -0.01577905474158689, -0.02143183661217385, 0.4354387969227589, 0.09016518121578557 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1073197919376759, 0.005282166546286775, -0.02222243069860727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3577404707384654, -0.01760760725183834, 0.07407639052905947, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6132502007612529, -0.03018352567107005, 0.1269841269841271 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.05146966513698482, 0.01544056153948906, -0.08823095249250069, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1715693061122316, -0.0514696651369848, 0.2941096130404397, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.29410961304044, -0.08823095249250072, 0.5041721415263707 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1242600560899964, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4142092540156865, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7100508020743099 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01544056153948906, -0.0514696651369848, -0.08823095249250072, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0514696651369848, 0.1715693061122315, 0.2941096130404398, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.08823095249250072, 0.2941096130404398, 0.5041721415263708 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005282166546286785, -0.1073197919376759, -0.02222243069860731, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.01760760725183838, 0.3577404707384653, 0.07407639052905958, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03018352567107011, 0.6132502007612527, 0.1269841269841273 },
            { 0.01333556336574236, -0.0006563623113182975, 0.002761360485064999, -0.04445285095962345, 0.002187922264724061, -0.009204736442085412, -0.07620250434379487, 0.003750606592881013, -0.01577905474158686, -0.04445285095962345, 0.002187922264724061, -0.009204736442085412, 0.1481794135158003, -0.007293233864785152, 0.03068312646121639, 0.2540139081822886, -0.01250229565177725, 0.05259800050992849, -0.07620250434379487, 0.003750606592881013, -0.01577905474158686, 0.2540139081822886, -0.01250229565177725, 0.05259800050992849, 0.4354387969227592, -0.02143183661217381, 0.09016518121578544 },
            { 0.006395623476855069, -0.001918645042957953, 0.01096358310559195, -0.02131921160082767, 0.006395623476855065, -0.03654607701301219, -0.03654607701301222, 0.01096358310559195, -0.06264845858508045, -0.02131921160082767, 0.006395623476855065, -0.03654607701301219, 0.07106559429673644, -0.02131921160082766, 0.1218229234163228, 0.1218229234163229, -0.0365460770130122, 0.2088327666371292, -0.03654607701301222, 0.01096358310559195, -0.06264845858508045, 0.1218229234163229, -0.0365460770130122, 0.2088327666371292, 0.2088327666371293, -0.06264845858508046, 0.3579878334743219 },
            { 0.0, 0.0, 0.01544056153948906, 0.0, 0.0, -0.0514696651369848, 0.0, 0.0, -0.08823095249250072, 0.0, 0.0, -0.0514696651369848, 0.0, 0.0, 0.1715693061122315, 0.0, 0.0, 0.2941096130404398, 0.0, 0.0, -0.08823095249250072, 0.0, 0.0, 0.2941096130404398, 0.0, 0.0, 0.5041721415263708 },
            { -0.001918645042957953, 0.006395623476855065, 0.01096358310559195, 0.006395623476855065, -0.02131921160082766, -0.0365460770130122, 0.01096358310559195, -0.03654607701301221, -0.06264845858508047, 0.006395623476855065, -0.02131921160082766, -0.0365460770130122, -0.02131921160082766, 0.0710655942967364, 0.1218229234163228, -0.0365460770130122, 0.1218229234163228, 0.2088327666371292, 0.01096358310559195, -0.03654607701301221, -0.06264845858508047, -0.0365460770130122, 0.1218229234163228, 0.2088327666371292, -0.06264845858508046, 0.2088327666371292, 0.3579878334743221 },
            { -0.0006563623113182988, 0.01333556336574236, 0.002761360485065003, 0.002187922264724065, -0.04445285095962344, -0.009204736442085425, 0.00375060659288102, -0.07620250434379486, -0.01577905474158689, 0.002187922264724065, -0.04445285095962344, -0.009204736442085425, -0.007293233864785167, 0.1481794135158003, 0.03068312646121644, -0.01250229565177727, 0.2540139081822885, 0.05259800050992857, 0.00375060659288102, -0.07620250434379486, -0.01577905474158689, -0.01250229565177727, 0.2540139081822885, 0.05259800050992857, -0.02143183661217385, 0.4354387969227591, 0.09016518121578559 },
            { 0.004562053427024704, -0.0002245394401118205, 0.0009446525593739025, -0.09268897909722794, 0.004562053427024693, -0.01919286626747267, -0.01919286626747271, 0.0009446525593739022, -0.003974216990508505, -0.01520717764217825, 0.0007484811846411566, -0.003148910794301287, 0.3089700270176294, -0.01520717764217821, 0.06397762136301412, 0.06397762136301423, -0.003148910794301286, 0.01324767996034664, -0.02606863216461661, 0.001283070477879415, -0.005397963984332919, 0.5296463402830702, -0.02606863216461655, 0.1096724926427991, 0.1096724926427993, -0.005397963984332917, 0.02270959832566091 },
            { 0.002187922264724066, -0.0006563623113182988, 0.003750606592881018, -0.04445285095962346, 0.01333556336574236, -0.07620250434379483, -0.009204736442085431, 0.002761360485065003, -0.01577905474158688, -0.007293233864785171, 0.002187922264724065, -0.01250229565177727, 0.1481794135158003, -0.04445285095962343, 0.2540139081822884, 0.03068312646121645, -0.009204736442085425, 0.05259800050992856, -0.01250229565177728, 0.00375060659288102, -0.02143183661217385, 0.2540139081822886, -0.07620250434379484, 0.4354387969227589, 0.0525980005099286, -0.01577905474158689, 0.09016518121578557 },
            { 0.0, 0.0, 0.005282166546286785, 0.0, 0.0, -0.1073197919376759, 0.0, 0.0, -0.02222243069860731, 0.0, 0.0, -0.01760760725183838, 0.0, 0.0, 0.3577404707384653, 0.0, 0.0, 0.07407639052905958, 0.0, 0.0, -0.03018352567107011, 0.0, 0.0, 0.6132502007612527, 0.0, 0.0, 0.1269841269841273 },
            { -0.0006563623113182988, 0.002187922264724065, 0.00375060659288102, 0.01333556336574236, -0.04445285095962343, -0.07620250434379484, 0.002761360485065003, -0.009204736442085425, -0.01577905474158689, 0.002187922264724065, -0.007293233864785167, -0.01250229565177728, -0.04445285095962343, 0.1481794135158002, 0.2540139081822885, -0.009204736442085425, 0.03068312646121643, 0.05259800050992857, 0.00375060659288102, -0.01250229565177727, -0.02143183661217386, -0.07620250434379484, 0.2540139081822885, 0.4354387969227591, -0.01577905474158689, 0.05259800050992857, 0.09016518121578559 },
            { -0.0002245394401118209, 0.004562053427024702, 0.000944652559373904, 0.004562053427024703, -0.09268897909722792, -0.0191928662674727, 0.000944652559373904, -0.0191928662674727, -0.003974216990508511, 0.000748481184641158, -0.01520717764217824, -0.003148910794301292, -0.01520717764217824, 0.3089700270176293, 0.06397762136301421, -0.003148910794301292, 0.06397762136301421, 0.01324767996034665, 0.001283070477879417, -0.0260686321646166, -0.005397963984332927, -0.0260686321646166, 0.52964634028307, 0.1096724926427992, -0.005397963984332927, 0.1096724926427993, 0.02270959832566095 },
            { -0.03170860226454263, 0.001560663835507127, -0.006565817950734648, 0.001560663835507127, -7.681422180451788e-5, 0.000323162608706142, -0.006565817950734648, 0.000323162608706142, -0.001359566877231798, 0.6442357634591094, -0.03170860226454256, 0.1334002270089049, -0.03170860226454256, 0.001560663835507123, -0.006565817950734633, 0.1334002270089048, -0.006565817950734632, 0.02762283868017032, 0.1334002270089051, -0.006565817950734644, 0.02762283868017037, -0.006565817950734644, 0.0003231626087061419, -0.001359566877231797, 0.02762283868017037, -0.001359566877231797, 0.005719789492560468 },
            { -0.01520717764217826, 0.004562053427024704, -0.0260686321646166, 0.0007484811846411569, -0.0002245394401118205, 0.001283070477879414, -0.003148910794301289, 0.0009446525593739026, -0.005397963984332917, 0.3089700270176296, -0.09268897909722795, 0.5296463402830701, -0.01520717764217822, 0.004562053427024694, -0.02606863216461654, 0.06397762136301414, -0.01919286626747267, 0.109672492642799, 0.06397762136301426, -0.0191928662674727, 0.1096724926427992, -0.003148910794301287, 0.0009446525593739022, -0.005397963984332914, 0.01324767996034664, -0.003974216990508505, 0.02270959832566091 },
            { 0.0, 0.0, -0.03671375637977015, 0.0, 0.0, 0.001807012222408751, 0.0, 0.0, -0.007602222219260303, 0.0, 0.0, 0.7459273882034717, 0.0, 0.0, -0.03671375637977007, 0.0, 0.0, 0.1544572477383405, 0.0, 0.0, 0.1544572477383408, 0.0, 0.0, -0.0076022222192603, 0.0, 0.0, 0.03198306129549904 },
            { 0.004562053427024704, -0.01520717764217825, -0.02606863216461661, -0.0002245394401118205, 0.0007484811846411565, 0.001283070477879415, 0.0009446525593739026, -0.003148910794301287, -0.005397963984332919, -0.09268897909722795, 0.3089700270176294, 0.5296463402830702, 0.004562053427024694, -0.01520717764217821, -0.02606863216461655, -0.01919286626747267, 0.06397762136301412, 0.1096724926427991, -0.0191928662674727, 0.06397762136301423, 0.1096724926427993, 0.0009446525593739022, -0.003148910794301286, -0.005397963984332916, -0.003974216990508505, 0.01324767996034664, 0.02270959832566091 },
            { 0.00156066383550713, -0.03170860226454263, -0.006565817950734658, -7.681422180451804e-5, 0.001560663835507126, 0.0003231626087061425, 0.0003231626087061426, -0.006565817950734646, -0.0013595668772318, -0.03170860226454262, 0.6442357634591093, 0.1334002270089051, 0.001560663835507126, -0.03170860226454255, -0.006565817950734644, -0.006565817950734645, 0.1334002270089048, 0.02762283868017036, -0.006565817950734658, 0.1334002270089051, 0.02762283868017041, 0.0003231626087061425, -0.006565817950734643, -0.001359566877231799, -0.0013595668772318, 0.02762283868017036, 0.005719789492560477 },
            { -0.01520717764217825, 0.0007484811846411568, -0.003148910794301288, 0.004562053427024704, -0.0002245394401118205, 0.0009446525593739025, -0.0260686321646166, 0.001283070477879415, -0.005397963984332917, 0.3089700270176295, -0.01520717764217822, 0.06397762136301414, -0.09268897909722794, 0.004562053427024693, -0.01919286626747267, 0.5296463402830701, -0.02606863216461654, 0.1096724926427991, 0.06397762136301427, -0.003148910794301287, 0.01324767996034664, -0.01919286626747271, 0.0009446525593739022, -0.003974216990508505, 0.1096724926427992, -0.005397963984332914, 0.0227095983256609 },
            { -0.007293233864785174, 0.002187922264724066, -0.01250229565177728, 0.002187922264724066, -0.0006563623113182988, 0.003750606592881018, -0.01250229565177728, 0.003750606592881019, -0.02143183661217384, 0.1481794135158004, -0.04445285095962345, 0.2540139081822885, -0.04445285095962346, 0.01333556336574236, -0.07620250434379483, 0.2540139081822886, -0.07620250434379483, 0.4354387969227588, 0.03068312646121647, -0.009204736442085431, 0.05259800050992858, -0.009204736442085431, 0.002761360485065003, -0.01577905474158688, 0.05259800050992858, -0.01577905474158688, 0.09016518121578553 },
            { 0.0, 0.0, -0.01760760725183838, 0.0, 0.0, 0.005282166546286785, 0.0, 0.0, -0.0301835256710701, 0.0, 0.0, 0.3577404707384655, 0.0, 0.0, -0.1073197919376759, 0.0, 0.0, 0.6132502007612526, 0.0, 0.0, 0.07407639052905962, 0.0, 0.0, -0.02222243069860731, 0.0, 0.0, 0.1269841269841272 },
            { 0.002187922264724066, -0.007293233864785169, -0.01250229565177728, -0.0006563623113182988, 0.002187922264724065, 0.00375060659288102, 0.003750606592881019, -0.01250229565177727, -0.02143183661217385, -0.04445285095962345, 0.1481794135158003, 0.2540139081822886, 0.01333556336574236, -0.04445285095962343, -0.07620250434379484, -0.07620250434379483, 0.2540139081822884, 0.435438796922759, -0.009204736442085431, 0.03068312646121645, 0.0525980005099286, 0.002761360485065003, -0.009204736442085425, -0.01577905474158689, -0.01577905474158688, 0.05259800050992855, 0.09016518121578555 },
            { 0.0007484811846411583, -0.01520717764217825, -0.003148910794301294, -0.0002245394401118209, 0.004562053427024702, 0.000944652559373904, 0.001283070477879417, -0.02606863216461659, -0.005397963984332925, -0.01520717764217825, 0.3089700270176295, 0.06397762136301424, 0.004562053427024703, -0.09268897909722792, -0.0191928662674727, -0.02606863216461659, 0.5296463402830699, 0.1096724926427992, -0.003148910794301294, 0.06397762136301426, 0.01324767996034666, 0.000944652559373904, -0.0191928662674727, -0.003974216990508511, -0.005397963984332925, 0.1096724926427992, 0.02270959832566094 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03671375637977015, 0.001807012222408751, -0.007602222219260303, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.7459273882034717, -0.03671375637977007, 0.1544572477383405, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1544572477383408, -0.0076022222192603, 0.03198306129549904 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.01760760725183838, 0.005282166546286785, -0.0301835256710701, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3577404707384655, -0.1073197919376759, 0.6132502007612526, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07407639052905962, -0.02222243069860731, 0.1269841269841272 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0425089663766217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8636708795620421, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1788380868145795 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.005282166546286785, -0.01760760725183838, -0.03018352567107011, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.1073197919376759, 0.3577404707384653, 0.6132502007612527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.02222243069860731, 0.07407639052905958, 0.1269841269841273 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001807012222408754, -0.03671375637977014, -0.007602222219260315, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.03671375637977014, 0.7459273882034715, 0.1544572477383408, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.007602222219260315, 0.1544572477383408, 0.03198306129549909 },
            { 0.004562053427024704, -0.0002245394401118205, 0.0009446525593739025, -0.01520717764217825, 0.0007484811846411566, -0.003148910794301287, -0.02606863216461661, 0.001283070477879415, -0.005397963984332919, -0.09268897909722794, 0.004562053427024693, -0.01919286626747267, 0.3089700270176294, -0.01520717764217821, 0.06397762136301412, 0.5296463402830702, -0.02606863216461655, 0.1096724926427991, -0.01919286626747271, 0.0009446525593739022, -0.003974216990508505, 0.06397762136301423, -0.003148910794301286, 0.01324767996034664, 0.1096724926427993, -0.005397963984332917, 0.02270959832566091 },
            { 0.002187922264724066, -0.0006563623113182988, 0.003750606592881018, -0.007293233864785171, 0.002187922264724065, -0.01250229565177727, -0.01250229565177728, 0.00375060659288102, -0.02143183661217385, -0.04445285095962346, 0.01333556336574236, -0.07620250434379483, 0.1481794135158003, -0.04445285095962343, 0.2540139081822884, 0.2540139081822886, -0.07620250434379484, 0.4354387969227589, -0.009204736442085431, 0.002761360485065003, -0.01577905474158688, 0.03068312646121645, -0.009204736442085425, 0.05259800050992856, 0.0525980005099286, -0.01577905474158689, 0.09016518121578557 },
            { 0.0, 0.0, 0.005282166546286785, 0.0, 0.0, -0.01760760725183838, 0.0, 0.0, -0.03018352567107011, 0.0, 0.0, -0.1073197919376759, 0.0, 0.0, 0.3577404707384653, 0.0, 0.0, 0.6132502007612527, 0.0, 0.0, -0.02222243069860731, 0.0, 0.0, 0.07407639052905958, 0.0, 0.0, 0.1269841269841273 },
            { -0.0006563623113182988, 0.002187922264724065, 0.00375060659288102, 0.002187922264724065, -0.007293233864785167, -0.01250229565177728, 0.00375060659288102, -0.01250229565177727, -0.02143183661217386, 0.01333556336574236, -0.04445285095962343, -0.07620250434379484, -0.04445285095962343, 0.1481794135158002, 0.2540139081822885, -0.07620250434379484, 0.2540139081822885, 0.4354387969227591, 0.002761360485065003, -0.009204736442085425, -0.01577905474158689, -0.009204736442085425, 0.03068312646121643, 0.05259800050992857, -0.01577905474158689, 0.05259800050992857, 0.09016518121578559 },
            { -0.0002245394401118209, 0.004562053427024702, 0.000944652559373904, 0.000748481184641158, -0.01520717764217824, -0.003148910794301292, 0.001283070477879417, -0.0260686321646166, -0.005397963984332927, 0.004562053427024703, -0.09268897909722792, -0.0191928662674727, -0.01520717764217824, 0.3089700270176293, 0.06397762136301421, -0.0260686321646166, 0.52964634028307, 0.1096724926427992, 0.000944652559373904, -0.0191928662674727, -0.003974216990508511, -0.003148910794301292, 0.06397762136301421, 0.01324767996034665, -0.005397963984332927, 0.1096724926427993, 0.02270959832566095 },
            { 0.00156066383550713, -7.681422180451804e-5, 0.0003231626087061427, -0.03170860226454262, 0.001560663835507126, -0.006565817950734645, -0.006565817950734658, 0.0003231626087061425, -0.0013595668772318, -0.03170860226454262, 0.001560663835507126, -0.006565817950734645, 0.6442357634591093, -0.03170860226454255, 0.1334002270089048, 0.1334002270089051, -0.006565817950734644, 0.02762283868017036, -0.006565817950734658, 0.0003231626087061425, -0.0013595668772318, 0.1334002270089051, -0.006565817950734644, 0.02762283868017036, 0.02762283868017041, -0.001359566877231799, 0.005719789492560476 },
            { 0.0007484811846411584, -0.000224539440111821, 0.001283070477879417, -0.01520717764217825, 0.004562053427024703, -0.02606863216461659, -0.003148910794301294, 0.000944652559373904, -0.005397963984332925, -0.01520717764217825, 0.004562053427024703, -0.02606863216461659, 0.3089700270176295, -0.09268897909722792, 0.5296463402830699, 0.06397762136301426, -0.0191928662674727, 0.1096724926427992, -0.003148910794301294, 0.000944652559373904, -0.005397963984332925, 0.06397762136301426, -0.0191928662674727, 0.1096724926427992, 0.01324767996034666, -0.003974216990508511, 0.02270959832566094 },
            { 0.0, 0.0, 0.001807012222408754, 0.0, 0.0, -0.03671375637977014, 0.0, 0.0, -0.007602222219260315, 0.0, 0.0, -0.03671375637977014, 0.0, 0.0, 0.7459273882034715, 0.0, 0.0, 0.1544572477383408, 0.0, 0.0, -0.007602222219260315, 0.0, 0.0, 0.1544572477383408, 0.0, 0.0, 0.03198306129549909 },
            { -0.000224539440111821, 0.000748481184641158, 0.001283070477879417, 0.004562053427024703, -0.01520717764217824, -0.0260686321646166, 0.000944652559373904, -0.003148910794301292, -0.005397963984332927, 0.004562053427024703, -0.01520717764217824, -0.0260686321646166, -0.09268897909722792, 0.3089700270176293, 0.5296463402830701, -0.0191928662674727, 0.06397762136301421, 0.1096724926427993, 0.000944652559373904, -0.003148910794301292, -0.005397963984332927, -0.0191928662674727, 0.06397762136301421, 0.1096724926427993, -0.003974216990508511, 0.01324767996034665, 0.02270959832566095 },
            { -7.681422180451819e-5, 0.001560663835507129, 0.0003231626087061432, 0.001560663835507129, -0.03170860226454261, -0.006565817950734656, 0.0003231626087061432, -0.006565817950734657, -0.001359566877231802, 0.001560663835507129, -0.03170860226454261, -0.006565817950734656, -0.03170860226454261, 0.644235763459109, 0.133400227008905, -0.006565817950734656, 0.133400227008905, 0.02762283868017041, 0.0003231626087061432, -0.006565817950734657, -0.001359566877231802, -0.006565817950734656, 0.133400227008905, 0.02762283868017041, -0.001359566877231802, 0.02762283868017041, 0.005719789492560486 } } };
    alignas(32) static const double FE12_C0_Q64[1][64][27] =
        { { { 0.5145887271371519, -0.03839465611263234, 0.1659613877624345, -0.03839465611263234, 0.002864714169330016, -0.01238276331190516, 0.1659613877624345, -0.01238276331190516, 0.05352465138765494, -0.03839465611263234, 0.002864714169330016, -0.01238276331190516, 0.002864714169330016, -0.0002137429554749961, 0.0009239066345851055, -0.01238276331190516, 0.0009239066345851055, -0.003993598140034286, 0.1659613877624345, -0.01238276331190516, 0.05352465138765494, -0.01238276331190516, 0.0009239066345851055, -0.003993598140034286, 0.05352465138765494, -0.003993598140034286, 0.0172623785857403 },
            { 0.1462727883360566, -0.07204789468604419, 0.5679305651369416, -0.01091375133311444, 0.005375660200524634, -0.04237461412261769, 0.04717482848718269, -0.02323635936212554, 0.1831648067131271, -0.01091375133311444, 0.005375660200524634, -0.04237461412261769, 0.000814300250347359, -0.0004010904512537004, 0.003161668049346466, -0.003519823154724959, 0.001733718560027011, -0.0136663502226564, 0.04717482848718269, -0.02323635936212554, 0.1831648067131271, -0.003519823154724959, 0.001733718560027011, -0.0136663502226564, 0.01521448020586151, -0.007494020453458502, 0.05907297208095794 },
            { -0.07204789468604419, 0.1462727883360566, 0.5679305651369416, 0.005375660200524634, -0.01091375133311444, -0.04237461412261769, -0.02323635936212554, 0.04717482848718269, 0.1831648067131271, 0.005375660200524634, -0.01091375133311444, -0.04237461412261769, -0.0004010904512537004, 0.000814300250347359, 0.003161668049346466, 0.001733718560027011, -0.003519823154724959, -0.0136663502226564, -0.02323635936212554, 0.04717482848718269, 0.1831648067131271, 0.001733718560027011, -0.003519823154724959, -0.0136663502226564, -0.007494020453458502, 0.01521448020586151, 0.05907297208095794 },
            { -0.03839465611263239, 0.5145887271371518, 0.1659613877624345, 0.002864714169330019, -0.03839465611263234, -0.01238276331190517, -0.01238276331190518, 0.1659613877624345, 0.05352465138765496, 0.002864714169330019, -0.03839465611263234, -0.01238276331190517, -0.0002137429554749964, 0.002864714169330015, 0.000923906634585106, 0.0009239066345851066, -0.01238276331190516, -0.003993598140034288, -0.01238276331190518, 0.1659613877624345, 0.05352465138765496, 0.0009239066345851066, -0.01238276331190516, -0.003993598140034288, -0.003993598140034292, 0.05352465138765493, 0.01726237858574031 },
            { 0.1462727883360566, -0.01091375133311444, 0.04717482848718269, -0.07204789468604421, 0.005375660200524635, -0.02323635936212554, 0.5679305651369416, -0.04237461412261768, 0.1831648067131271, -0.01091375133311444, 0.000814300250347359, -0.003519823154724959, 0.005375660200524634, -0.0004010904512537004, 0.001733718560027011, -0.04237461412261769, 0.003161668049346466, -0.0136663502226564, 0.04717482848718269, -0.003519823154724959, 0.01521448020586151, -0.02323635936212554, 0.001733718560027011, -0.007494020453458502, 0.1831648067131271, -0.0136663502226564, 0.05907297208095794 },
            { 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, -0.02047974604515852, 0.01008747151841086, -0.07951631932089745, 0.1614353035015314, -0.07951631932089745, 0.626801773546817, -0.003102253808749921, 0.001528041259380969, -0.01204506168812308, 0.001528041259380969, -0.0007526496006822372, 0.005932896650599213, -0.01204506168812308, 0.005932896650599213, -0.04676713125840375, 0.01340953141450435, -0.006604977714117027, 0.05206493183793191, -0.006604977714117027, 0.003253337440023821, -0.02564502098146382, 0.05206493183793191, -0.02564502098146382, 0.2021515177149605 },
            { -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, 0.01008747151841086, -0.02047974604515852, -0.07951631932089745, -0.07951631932089745, 0.1614353035015314, 0.626801773546817, 0.001528041259380969, -0.003102253808749921, -0.01204506168812308, -0.0007526496006822372, 0.001528041259380969, 0.005932896650599213, 0.005932896650599213, -0.01204506168812308, -0.04676713125840375, -0.006604977714117027, 0.01340953141450435, 0.05206493183793191, 0.003253337440023821, -0.006604977714117027, -0.02564502098146382, -0.02564502098146382, 0.05206493183793191, 0.2021515177149605 },
            { -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, 0.005375660200524641, -0.07204789468604419, -0.02323635936212555, -0.04237461412261773, 0.5679305651369415, 0.1831648067131272, 0.0008143002503473599, -0.01091375133311443, -0.003519823154724961, -0.0004010904512537009, 0.005375660200524633, 0.001733718560027011, 0.00316166804934647, -0.04237461412261768, -0.0136663502226564, -0.003519823154724963, 0.04717482848718269, 0.01521448020586152, 0.001733718560027013, -0.02323635936212554, -0.007494020453458505, -0.01366635022265641, 0.1831648067131271, 0.05907297208095796 },
            { -0.07204789468604421, 0.005375660200524635, -0.02323635936212554, 0.1462727883360566, -0.01091375133311444, 0.04717482848718269, 0.5679305651369416, -0.04237461412261768, 0.1831648067131271, 0.005375660200524634, -0.0004010904512537004, 0.001733718560027011, -0.01091375133311444, 0.000814300250347359, -0.003519823154724959, -0.04237461412261769, 0.003161668049346466, -0.0136663502226564, -0.02323635936212554, 0.001733718560027011, -0.007494020453458502, 0.04717482848718269, -0.003519823154724959, 0.01521448020586151, 0.1831648067131271, -0.0136663502226564, 0.05907297208095794 },
            { -0.02047974604515852, 0.01008747151841086, -0.07951631932089745, 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, 0.1614353035015314, -0.07951631932089745, 0.626801773546817, 0.001528041259380969, -0.0007526496006822372, 0.005932896650599213, -0.003102253808749921, 0.001528041259380969, -0.01204506168812308, -0.01204506168812308, 0.005932896650599213, -0.04676713125840375, -0.006604977714117027, 0.003253337440023821, -0.02564502098146382, 0.01340953141450435, -0.006604977714117027, 0.05206493183793191, 0.05206493183793191, -0.02564502098146382, 0.2021515177149605 },
            { 0.01008747151841086, -0.02047974604515852, -0.07951631932089745, -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, -0.07951631932089745, 0.1614353035015314, 0.626801773546817, -0.0007526496006822372, 0.001528041259380969, 0.005932896650599213, 0.001528041259380969, -0.003102253808749921, -0.01204506168812308, 0.005932896650599213, -0.01204506168812308, -0.04676713125840375, 0.003253337440023821, -0.006604977714117027, -0.02564502098146382, -0.006604977714117027, 0.01340953141450435, 0.05206493183793191, -0.02564502098146382, 0.05206493183793191, 0.2021515177149605 },
            { 0.005375660200524641, -0.07204789468604419, -0.02323635936212555, -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, -0.04237461412261773, 0.5679305651369415, 0.1831648067131272, -0.0004010904512537009, 0.005375660200524633, 0.001733718560027011, 0.0008143002503473599, -0.01091375133311443, -0.003519823154724961, 0.00316166804934647, -0.04237461412261768, -0.0136663502226564, 0.001733718560027013, -0.02323635936212554, -0.007494020453458505, -0.003519823154724963, 0.04717482848718269, 0.01521448020586152, -0.01366635022265641, 0.1831648067131271, 0.05907297208095796 },
            { -0.03839465611263239, 0.002864714169330019, -0.01238276331190518, 0.5145887271371518, -0.03839465611263233, 0.1659613877624345, 0.1659613877624346, -0.01238276331190517, 0.05352465138765496, 0.002864714169330019, -0.0002137429554749963, 0.0009239066345851065, -0.03839465611263234, 0.002864714169330015, -0.01238276331190516, -0.01238276331190517, 0.000923906634585106, -0.003993598140034288, -0.01238276331190518, 0.0009239066345851065, -0.003993598140034291, 0.1659613877624345, -0.01238276331190516, 0.05352465138765493, 0.05352465138765496, -0.003993598140034288, 0.01726237858574031 },
            { -0.01091375133311445, 0.005375660200524641, -0.04237461412261774, 0.1462727883360566, -0.07204789468604418, 0.5679305651369415, 0.04717482848718271, -0.02323635936212555, 0.1831648067131272, 0.0008143002503473598, -0.0004010904512537009, 0.00316166804934647, -0.01091375133311443, 0.005375660200524633, -0.04237461412261768, -0.003519823154724961, 0.001733718560027012, -0.0136663502226564, -0.003519823154724963, 0.001733718560027013, -0.01366635022265641, 0.04717482848718269, -0.02323635936212554, 0.1831648067131271, 0.01521448020586152, -0.007494020453458506, 0.05907297208095796 },
            { 0.005375660200524641, -0.01091375133311445, -0.04237461412261774, -0.07204789468604418, 0.1462727883360566, 0.5679305651369415, -0.02323635936212555, 0.04717482848718271, 0.1831648067131272, -0.0004010904512537009, 0.0008143002503473598, 0.00316166804934647, 0.005375660200524633, -0.01091375133311443, -0.04237461412261768, 0.001733718560027012, -0.003519823154724961, -0.0136663502226564, 0.001733718560027013, -0.003519823154724963, -0.01366635022265641, -0.02323635936212554, 0.04717482848718269, 0.1831648067131271, -0.007494020453458506, 0.01521448020586152, 0.05907297208095796 },
            { 0.002864714169330022, -0.03839465611263238, -0.01238276331190519, -0.03839465611263238, 0.5145887271371516, 0.1659613877624345, -0.01238276331190519, 0.1659613877624345, 0.05352465138765498, -0.0002137429554749966, 0.002864714169330018, 0.000923906634585107, 0.002864714169330019, -0.03839465611263233, -0.01238276331190517, 0.0009239066345851071, -0.01238276331190517, -0.00399359814003429, 0.0009239066345851076, -0.01238276331190518, -0.003993598140034292, -0.01238276331190518, 0.1659613877624345, 0.05352465138765495, -0.003993598140034293, 0.05352465138765495, 0.01726237858574031 },
            { 0.1462727883360566, -0.01091375133311444, 0.04717482848718269, -0.01091375133311444, 0.000814300250347359, -0.003519823154724959, 0.04717482848718269, -0.003519823154724959, 0.01521448020586151, -0.07204789468604421, 0.005375660200524635, -0.02323635936212554, 0.005375660200524634, -0.0004010904512537004, 0.001733718560027011, -0.02323635936212554, 0.001733718560027011, -0.007494020453458502, 0.5679305651369416, -0.04237461412261768, 0.1831648067131271, -0.04237461412261769, 0.003161668049346466, -0.0136663502226564, 0.1831648067131271, -0.0136663502226564, 0.05907297208095794 },
            { 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, -0.003102253808749921, 0.001528041259380969, -0.01204506168812308, 0.01340953141450435, -0.006604977714117027, 0.05206493183793191, -0.02047974604515852, 0.01008747151841086, -0.07951631932089745, 0.001528041259380969, -0.0007526496006822372, 0.005932896650599213, -0.006604977714117027, 0.003253337440023821, -0.02564502098146382, 0.1614353035015314, -0.07951631932089745, 0.626801773546817, -0.01204506168812308, 0.005932896650599213, -0.04676713125840375, 0.05206493183793191, -0.02564502098146382, 0.2021515177149605 },
            { -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, 0.001528041259380969, -0.003102253808749921, -0.01204506168812308, -0.006604977714117027, 0.01340953141450435, 0.05206493183793191, 0.01008747151841086, -0.02047974604515852, -0.07951631932089745, -0.0007526496006822372, 0.001528041259380969, 0.005932896650599213, 0.003253337440023821, -0.006604977714117027, -0.02564502098146382, -0.07951631932089745, 0.1614353035015314, 0.626801773546817, 0.005932896650599213, -0.01204506168812308, -0.04676713125840375, -0.02564502098146382, 0.05206493183793191, 0.2021515177149605 },
            { -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, 0.0008143002503473599, -0.01091375133311443, -0.003519823154724961, -0.003519823154724963, 0.04717482848718269, 0.01521448020586152, 0.005375660200524641, -0.07204789468604419, -0.02323635936212555, -0.0004010904512537009, 0.005375660200524633, 0.001733718560027011, 0.001733718560027013, -0.02323635936212554, -0.007494020453458505, -0.04237461412261773, 0.5679305651369415, 0.1831648067131272, 0.00316166804934647, -0.04237461412261768, -0.0136663502226564, -0.01366635022265641, 0.1831648067131271, 0.05907297208095796 },
            { 0.04157830803375191, -0.003102253808749921, 0.01340953141450435, -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, 0.01008747151841086, -0.0007526496006822372, 0.003253337440023821, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, 0.626801773546817, -0.04676713125840375, 0.2021515177149605 },
            { 0.01181871022365283, -0.005821405329077965, 0.04588828074493147, -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, 0.002867382257803024, -0.001412353297458125, 0.01113313039740754, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, 0.1781695523350284, -0.08775891462054997, 0.6917755222888954 },
            { -0.005821405329077965, 0.01181871022365283, 0.04588828074493147, 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, -0.001412353297458125, 0.002867382257803024, 0.01113313039740754, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, -0.08775891462054997, 0.1781695523350284, 0.6917755222888954 },
            { -0.003102253808749924, 0.04157830803375191, 0.01340953141450436, 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, -0.0007526496006822381, 0.01008747151841086, 0.003253337440023822, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, -0.0467671312584038, 0.6268017735468169, 0.2021515177149606 },
            { -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, 0.04157830803375191, -0.003102253808749921, 0.01340953141450435, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, 0.01008747151841086, -0.0007526496006822372, 0.003253337440023821, -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, 0.626801773546817, -0.04676713125840375, 0.2021515177149605 },
            { -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, 0.01181871022365283, -0.005821405329077965, 0.04588828074493147, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, 0.002867382257803024, -0.001412353297458125, 0.01113313039740754, -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, 0.1781695523350284, -0.08775891462054997, 0.6917755222888954 },
            { 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, -0.005821405329077965, 0.01181871022365283, 0.04588828074493147, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, -0.001412353297458125, 0.002867382257803024, 0.01113313039740754, 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, -0.08775891462054997, 0.1781695523350284, 0.6917755222888954 },
            { 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, -0.003102253808749924, 0.04157830803375191, 0.01340953141450436, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, -0.0007526496006822381, 0.01008747151841086, 0.003253337440023822, 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, -0.0467671312584038, 0.6268017735468169, 0.2021515177149606 },
            { -0.01091375133311445, 0.0008143002503473599, -0.003519823154724964, 0.1462727883360566, -0.01091375133311443, 0.04717482848718269, 0.04717482848718271, -0.003519823154724961, 0.01521448020586152, 0.00537566020052464, -0.0004010904512537009, 0.001733718560027013, -0.07204789468604419, 0.005375660200524634, -0.02323635936212554, -0.02323635936212555, 0.001733718560027011, -0.007494020453458506, -0.04237461412261773, 0.00316166804934647, -0.01366635022265641, 0.5679305651369415, -0.04237461412261768, 0.1831648067131271, 0.1831648067131272, -0.0136663502226564, 0.05907297208095796 },
            { -0.003102253808749925, 0.001528041259380971, -0.0120450616881231, 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, 0.01340953141450436, -0.006604977714117031, 0.05206493183793194, 0.001528041259380971, -0.0007526496006822381, 0.005932896650599219, -0.02047974604515851, 0.01008747151841086, -0.07951631932089744, -0.006604977714117031, 0.003253337440023823, -0.02564502098146384, -0.0120450616881231, 0.005932896650599219, -0.04676713125840379, 0.1614353035015314, -0.07951631932089744, 0.6268017735468169, 0.05206493183793194, -0.02564502098146384, 0.2021515177149606 },
            { 0.001528041259380971, -0.003102253808749925, -0.0120450616881231, -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, -0.006604977714117031, 0.01340953141450436, 0.05206493183793194, -0.0007526496006822381, 0.001528041259380971, 0.005932896650599219, 0.01008747151841086, -0.02047974604515851, -0.07951631932089744, 0.003253337440023823, -0.006604977714117031, -0.02564502098146384, 0.005932896650599219, -0.0120450616881231, -0.04676713125840379, -0.07951631932089744, 0.1614353035015314, 0.6268017735468169, -0.02564502098146384, 0.05206493183793194, 0.2021515177149606 },
            { 0.0008143002503473608, -0.01091375133311445, -0.003519823154724965, -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, -0.003519823154724965, 0.04717482848718271, 0.01521448020586152, -0.0004010904512537013, 0.00537566020052464, 0.001733718560027013, 0.00537566020052464, -0.07204789468604418, -0.02323635936212555, 0.001733718560027013, -0.02323635936212555, -0.007494020453458508, 0.003161668049346473, -0.04237461412261773, -0.01366635022265642, -0.04237461412261773, 0.5679305651369414, 0.1831648067131272, -0.01366635022265642, 0.1831648067131272, 0.05907297208095798 },
            { -0.07204789468604421, 0.005375660200524635, -0.02323635936212554, 0.005375660200524634, -0.0004010904512537004, 0.001733718560027011, -0.02323635936212554, 0.001733718560027011, -0.007494020453458502, 0.1462727883360566, -0.01091375133311444, 0.04717482848718269, -0.01091375133311444, 0.000814300250347359, -0.003519823154724959, 0.04717482848718269, -0.003519823154724959, 0.01521448020586151, 0.5679305651369416, -0.04237461412261768, 0.1831648067131271, -0.04237461412261769, 0.003161668049346466, -0.0136663502226564, 0.1831648067131271, -0.0136663502226564, 0.05907297208095794 },
            { -0.02047974604515852, 0.01008747151841086, -0.07951631932089745, 0.001528041259380969, -0.0007526496006822372, 0.005932896650599213, -0.006604977714117027, 0.003253337440023821, -0.02564502098146382, 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, -0.003102253808749921, 0.001528041259380969, -0.01204506168812308, 0.01340953141450435, -0.006604977714117027, 0.05206493183793191, 0.1614353035015314, -0.07951631932089745, 0.626801773546817, -0.01204506168812308, 0.005932896650599213, -0.04676713125840375, 0.05206493183793191, -0.02564502098146382, 0.2021515177149605 },
            { 0.01008747151841086, -0.02047974604515852, -0.07951631932089745, -0.0007526496006822372, 0.001528041259380969, 0.005932896650599213, 0.003253337440023821, -0.006604977714117027, -0.02564502098146382, -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, 0.001528041259380969, -0.003102253808749921, -0.01204506168812308, -0.006604977714117027, 0.01340953141450435, 0.05206493183793191, -0.07951631932089745, 0.1614353035015314, 0.626801773546817, 0.005932896650599213, -0.01204506168812308, -0.04676713125840375, -0.02564502098146382, 0.05206493183793191, 0.2021515177149605 },
            { 0.005375660200524641, -0.07204789468604419, -0.02323635936212555, -0.0004010904512537009, 0.005375660200524633, 0.001733718560027011, 0.001733718560027013, -0.02323635936212554, -0.007494020453458505, -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, 0.0008143002503473599, -0.01091375133311443, -0.003519823154724961, -0.003519823154724963, 0.04717482848718269, 0.01521448020586152, -0.04237461412261773, 0.5679305651369415, 0.1831648067131272, 0.00316166804934647, -0.04237461412261768, -0.0136663502226564, -0.01366635022265641, 0.1831648067131271, 0.05907297208095796 },
            { -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, 0.01008747151841086, -0.0007526496006822372, 0.003253337440023821, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, 0.04157830803375191, -0.003102253808749921, 0.01340953141450435, -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, 0.626801773546817, -0.04676713125840375, 0.2021515177149605 },
            { -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, 0.002867382257803024, -0.001412353297458125, 0.01113313039740754, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, 0.01181871022365283, -0.005821405329077965, 0.04588828074493147, -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, 0.1781695523350284, -0.08775891462054997, 0.6917755222888954 },
            { 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, -0.001412353297458125, 0.002867382257803024, 0.01113313039740754, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, -0.005821405329077965, 0.01181871022365283, 0.04588828074493147, 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, -0.08775891462054997, 0.1781695523350284, 0.6917755222888954 },
            { 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, -0.0007526496006822381, 0.01008747151841086, 0.003253337440023822, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, -0.003102253808749924, 0.04157830803375191, 0.01340953141450436, 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, -0.0467671312584038, 0.6268017735468169, 0.2021515177149606 },
            { 0.01008747151841086, -0.0007526496006822372, 0.003253337440023821, -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, -0.02047974604515851, 0.001528041259380969, -0.006604977714117027, 0.04157830803375191, -0.003102253808749921, 0.01340953141450435, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, -0.07951631932089745, 0.005932896650599213, -0.02564502098146382, 0.1614353035015314, -0.01204506168812308, 0.05206493183793191, 0.626801773546817, -0.04676713125840375, 0.2021515177149605 },
            { 0.002867382257803024, -0.001412353297458125, 0.01113313039740754, -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, -0.005821405329077965, 0.002867382257803024, -0.02260265942861963, 0.01181871022365283, -0.005821405329077965, 0.04588828074493147, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, -0.02260265942861963, 0.01113313039740754, -0.08775891462054997, 0.04588828074493147, -0.02260265942861963, 0.1781695523350284, 0.1781695523350284, -0.08775891462054997, 0.6917755222888954 },
            { -0.001412353297458125, 0.002867382257803024, 0.01113313039740754, 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, 0.002867382257803024, -0.005821405329077965, -0.02260265942861963, -0.005821405329077965, 0.01181871022365283, 0.04588828074493147, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, 0.01113313039740754, -0.02260265942861963, -0.08775891462054997, -0.02260265942861963, 0.04588828074493147, 0.1781695523350284, -0.08775891462054997, 0.1781695523350284, 0.6917755222888954 },
            { -0.0007526496006822381, 0.01008747151841086, 0.003253337440023822, 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, 0.001528041259380971, -0.02047974604515851, -0.00660497771411703, -0.003102253808749924, 0.04157830803375191, 0.01340953141450436, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, 0.005932896650599219, -0.07951631932089744, -0.02564502098146383, -0.0120450616881231, 0.1614353035015314, 0.05206493183793194, -0.0467671312584038, 0.6268017735468169, 0.2021515177149606 },
            { 0.00537566020052464, -0.0004010904512537009, 0.001733718560027013, -0.07204789468604419, 0.005375660200524634, -0.02323635936212554, -0.02323635936212555, 0.001733718560027011, -0.007494020453458506, -0.01091375133311445, 0.0008143002503473599, -0.003519823154724964, 0.1462727883360566, -0.01091375133311443, 0.04717482848718269, 0.04717482848718271, -0.003519823154724961, 0.01521448020586152, -0.04237461412261773, 0.00316166804934647, -0.01366635022265641, 0.5679305651369415, -0.04237461412261768, 0.1831648067131271, 0.1831648067131272, -0.0136663502226564, 0.05907297208095796 },
            { 0.001528041259380971, -0.0007526496006822381, 0.005932896650599219, -0.02047974604515851, 0.01008747151841086, -0.07951631932089744, -0.006604977714117031, 0.003253337440023823, -0.02564502098146384, -0.003102253808749925, 0.001528041259380971, -0.0120450616881231, 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, 0.01340953141450436, -0.006604977714117031, 0.05206493183793194, -0.0120450616881231, 0.005932896650599219, -0.04676713125840379, 0.1614353035015314, -0.07951631932089744, 0.6268017735468169, 0.05206493183793194, -0.02564502098146384, 0.2021515177149606 },
            { -0.0007526496006822381, 0.001528041259380971, 0.005932896650599219, 0.01008747151841086, -0.02047974604515851, -0.07951631932089744, 0.003253337440023823, -0.006604977714117031, -0.02564502098146384, 0.001528041259380971, -0.003102253808749925, -0.0120450616881231, -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, -0.006604977714117031, 0.01340953141450436, 0.05206493183793194, 0.005932896650599219, -0.0120450616881231, -0.04676713125840379, -0.07951631932089744, 0.1614353035015314, 0.6268017735468169, -0.02564502098146384, 0.05206493183793194, 0.2021515177149606 },
            { -0.0004010904512537013, 0.00537566020052464, 0.001733718560027013, 0.00537566020052464, -0.07204789468604418, -0.02323635936212555, 0.001733718560027013, -0.02323635936212555, -0.007494020453458508, 0.0008143002503473608, -0.01091375133311445, -0.003519823154724965, -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, -0.003519823154724965, 0.04717482848718271, 0.01521448020586152, 0.003161668049346473, -0.04237461412261773, -0.01366635022265642, -0.04237461412261773, 0.5679305651369414, 0.1831648067131272, -0.01366635022265642, 0.1831648067131272, 0.05907297208095798 },
            { -0.03839465611263239, 0.002864714169330019, -0.01238276331190518, 0.002864714169330019, -0.0002137429554749963, 0.0009239066345851065, -0.01238276331190518, 0.0009239066345851065, -0.003993598140034291, 0.5145887271371518, -0.03839465611263233, 0.1659613877624345, -0.03839465611263234, 0.002864714169330015, -0.01238276331190516, 0.1659613877624345, -0.01238276331190516, 0.05352465138765493, 0.1659613877624346, -0.01238276331190517, 0.05352465138765496, -0.01238276331190517, 0.000923906634585106, -0.003993598140034288, 0.05352465138765496, -0.003993598140034288, 0.01726237858574031 },
            { -0.01091375133311445, 0.005375660200524641, -0.04237461412261774, 0.0008143002503473598, -0.0004010904512537009, 0.00316166804934647, -0.003519823154724963, 0.001733718560027013, -0.01366635022265641, 0.1462727883360566, -0.07204789468604418, 0.5679305651369415, -0.01091375133311443, 0.005375660200524633, -0.04237461412261768, 0.04717482848718269, -0.02323635936212554, 0.1831648067131271, 0.04717482848718271, -0.02323635936212555, 0.1831648067131272, -0.003519823154724961, 0.001733718560027012, -0.0136663502226564, 0.01521448020586152, -0.007494020453458506, 0.05907297208095796 },
            { 0.005375660200524641, -0.01091375133311445, -0.04237461412261774, -0.0004010904512537009, 0.0008143002503473598, 0.00316166804934647, 0.001733718560027013, -0.003519823154724963, -0.01366635022265641, -0.07204789468604418, 0.1462727883360566, 0.5679305651369415, 0.005375660200524633, -0.01091375133311443, -0.04237461412261768, -0.02323635936212554, 0.04717482848718269, 0.1831648067131271, -0.02323635936212555, 0.04717482848718271, 0.1831648067131272, 0.001733718560027012, -0.003519823154724961, -0.0136663502226564, -0.007494020453458506, 0.01521448020586152, 0.05907297208095796 },
            { 0.002864714169330022, -0.03839465611263238, -0.01238276331190519, -0.0002137429554749966, 0.002864714169330018, 0.000923906634585107, 0.0009239066345851076, -0.01238276331190518, -0.003993598140034292, -0.03839465611263238, 0.5145887271371516, 0.1659613877624345, 0.002864714169330019, -0.03839465611263233, -0.01238276331190517, -0.01238276331190518, 0.1659613877624345, 0.05352465138765495, -0.01238276331190519, 0.1659613877624345, 0.05352465138765498, 0.0009239066345851071, -0.01238276331190517, -0.00399359814003429, -0.003993598140034293, 0.05352465138765495, 0.01726237858574031 },
            { -0.01091375133311445, 0.0008143002503473599, -0.003519823154724964, 0.00537566020052464, -0.0004010904512537009, 0.001733718560027013, -0.04237461412261773, 0.00316166804934647, -0.01366635022265641, 0.1462727883360566, -0.01091375133311443, 0.04717482848718269, -0.07204789468604419, 0.005375660200524634, -0.02323635936212554, 0.5679305651369415, -0.04237461412261768, 0.1831648067131271, 0.04717482848718271, -0.003519823154724961, 0.01521448020586152, -0.02323635936212555, 0.001733718560027011, -0.007494020453458506, 0.1831648067131272, -0.0136663502226564, 0.05907297208095796 },
            { -0.003102253808749925, 0.001528041259380971, -0.0120450616881231, 0.001528041259380971, -0.0007526496006822381, 0.005932896650599219, -0.0120450616881231, 0.005932896650599219, -0.04676713125840379, 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, -0.02047974604515851, 0.01008747151841086, -0.07951631932089744, 0.1614353035015314, -0.07951631932089744, 0.6268017735468169, 0.01340953141450436, -0.006604977714117031, 0.05206493183793194, -0.006604977714117031, 0.003253337440023823, -0.02564502098146384, 0.05206493183793194, -0.02564502098146384, 0.2021515177149606 },
            { 0.001528041259380971, -0.003102253808749925, -0.0120450616881231, -0.0007526496006822381, 0.001528041259380971, 0.005932896650599219, 0.005932896650599219, -0.0120450616881231, -0.04676713125840379, -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, 0.01008747151841086, -0.02047974604515851, -0.07951631932089744, -0.07951631932089744, 0.1614353035015314, 0.6268017735468169, -0.006604977714117031, 0.01340953141450436, 0.05206493183793194, 0.003253337440023823, -0.006604977714117031, -0.02564502098146384, -0.02564502098146384, 0.05206493183793194, 0.2021515177149606 },
            { 0.0008143002503473608, -0.01091375133311445, -0.003519823154724965, -0.0004010904512537013, 0.00537566020052464, 0.001733718560027013, 0.003161668049346473, -0.04237461412261773, -0.01366635022265642, -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, 0.00537566020052464, -0.07204789468604418, -0.02323635936212555, -0.04237461412261773, 0.5679305651369414, 0.1831648067131272, -0.003519823154724965, 0.04717482848718271, 0.01521448020586152, 0.001733718560027013, -0.02323635936212555, -0.007494020453458508, -0.01366635022265642, 0.1831648067131272, 0.05907297208095798 },
            { 0.00537566020052464, -0.0004010904512537009, 0.001733718560027013, -0.01091375133311445, 0.0008143002503473599, -0.003519823154724964, -0.04237461412261773, 0.00316166804934647, -0.01366635022265641, -0.07204789468604419, 0.005375660200524634, -0.02323635936212554, 0.1462727883360566, -0.01091375133311443, 0.04717482848718269, 0.5679305651369415, -0.04237461412261768, 0.1831648067131271, -0.02323635936212555, 0.001733718560027011, -0.007494020453458506, 0.04717482848718271, -0.003519823154724961, 0.01521448020586152, 0.1831648067131272, -0.0136663502226564, 0.05907297208095796 },
            { 0.001528041259380971, -0.0007526496006822381, 0.005932896650599219, -0.003102253808749925, 0.001528041259380971, -0.0120450616881231, -0.0120450616881231, 0.005932896650599219, -0.04676713125840379, -0.02047974604515851, 0.01008747151841086, -0.07951631932089744, 0.04157830803375191, -0.02047974604515851, 0.1614353035015314, 0.1614353035015314, -0.07951631932089744, 0.6268017735468169, -0.006604977714117031, 0.003253337440023823, -0.02564502098146384, 0.01340953141450436, -0.006604977714117031, 0.05206493183793194, 0.05206493183793194, -0.02564502098146384, 0.2021515177149606 },
            { -0.0007526496006822381, 0.001528041259380971, 0.005932896650599219, 0.001528041259380971, -0.003102253808749925, -0.0120450616881231, 0.005932896650599219, -0.0120450616881231, -0.04676713125840379, 0.01008747151841086, -0.02047974604515851, -0.07951631932089744, -0.02047974604515851, 0.04157830803375191, 0.1614353035015314, -0.07951631932089744, 0.1614353035015314, 0.6268017735468169, 0.003253337440023823, -0.006604977714117031, -0.02564502098146384, -0.006604977714117031, 0.01340953141450436, 0.05206493183793194, -0.02564502098146384, 0.05206493183793194, 0.2021515177149606 },
            { -0.0004010904512537013, 0.00537566020052464, 0.001733718560027013, 0.0008143002503473608, -0.01091375133311445, -0.003519823154724965, 0.003161668049346473, -0.04237461412261773, -0.01366635022265642, 0.00537566020052464, -0.07204789468604418, -0.02323635936212555, -0.01091375133311445, 0.1462727883360566, 0.04717482848718271, -0.04237461412261773, 0.5679305651369414, 0.1831648067131272, 0.001733718560027013, -0.02323635936212555, -0.007494020453458508, -0.003519823154724965, 0.04717482848718271, 0.01521448020586152, -0.01366635022265642, 0.1831648067131272, 0.05907297208095798 },
            { 0.002864714169330022, -0.0002137429554749966, 0.0009239066345851077, -0.03839465611263238, 0.002864714169330019, -0.01238276331190518, -0.01238276331190519, 0.000923906634585107, -0.003993598140034292, -0.03839465611263238, 0.002864714169330019, -0.01238276331190518, 0.5145887271371518, -0.03839465611263233, 0.1659613877624345, 0.1659613877624345, -0.01238276331190517, 0.05352465138765495, -0.01238276331190519, 0.000923906634585107, -0.003993598140034292, 0.1659613877624345, -0.01238276331190517, 0.05352465138765495, 0.05352465138765498, -0.00399359814003429, 0.01726237858574031 },
            { 0.0008143002503473608, -0.0004010904512537013, 0.003161668049346474, -0.01091375133311445, 0.00537566020052464, -0.04237461412261773, -0.003519823154724965, 0.001733718560027013, -0.01366635022265642, -0.01091375133311445, 0.00537566020052464, -0.04237461412261773, 0.1462727883360566, -0.07204789468604418, 0.5679305651369415, 0.04717482848718271, -0.02323635936212555, 0.1831648067131272, -0.003519823154724965, 0.001733718560027013, -0.01366635022265642, 0.04717482848718271, -0.02323635936212555, 0.1831648067131272, 0.01521448020586152, -0.007494020453458508, 0.05907297208095798 },
            { -0.0004010904512537013, 0.0008143002503473608, 0.003161668049346474, 0.00537566020052464, -0.01091375133311445, -0.04237461412261773, 0.001733718560027013, -0.003519823154724965, -0.01366635022265642, 0.00537566020052464, -0.01091375133311445, -0.04237461412261773, -0.07204789468604418, 0.1462727883360566, 0.5679305651369415, -0.02323635936212555, 0.04717482848718271, 0.1831648067131272, 0.001733718560027013, -0.003519823154724965, -0.01366635022265642, -0.02323635936212555, 0.04717482848718271, 0.1831648067131272, -0.007494020453458508, 0.01521448020586152, 0.05907297208095798 },
            { -0.0002137429554749968, 0.002864714169330022, 0.000923906634585108, 0.002864714169330022, -0.03839465611263237, -0.01238276331190518, 0.000923906634585108, -0.01238276331190518, -0.003993598140034294, 0.002864714169330022, -0.03839465611263237, -0.01238276331190518, -0.03839465611263238, 0.5145887271371516, 0.1659613877624345, -0.01238276331190518, 0.1659613877624345, 0.05352465138765497, 0.000923906634585108, -0.01238276331190518, -0.003993598140034294, -0.01238276331190518, 0.1659613877624345, 0.05352465138765497, -0.003993598140034295, 0.05352465138765497, 0.01726237858574032 } } };
    alignas(32) static const double FE8_C0_D001_Q125[1][125][8] =
        { { { -0.9083804012656873, 0.9083804012656873, -0.04470952170364479, 0.04470952170364479, -0.04470952170364479, 0.04470952170364479, -0.002200555327023205, 0.002200555327023205 },
            { -0.9083804012656873, 0.9083804012656873, -0.04470952170364479, 0.04470952170364479, -0.04470952170364479, 0.04470952170364479, -0.002200555327023205, 0.002200555327023205 },
            { -0.9083804012656873, 0.9083804012656873, -0.04470952170364479, 0.04470952170364479, -0.04470952170364479, 0.04470952170364479, -0.002200555327023205, 0.002200555327023205 },
            { -0.9083804012656873, 0.9083804012656873, -0.04470952170364479, 0.04470952170364479, -0.04470952170364479, 0.04470952170364479, -0.002200555327023205, 0.002200555327023205 },
            { -0.9083804012656873, 0.9083804012656873, -0.04470952170364479, 0.04470952170364479, -0.04470952170364479, 0.04470952170364479, -0.002200555327023205, 0.002200555327023205 },
            { -0.7331497981296535, 0.7331497981296535, -0.2199401248396786, 0.2199401248396786, -0.03608485692318813, 0.03608485692318813, -0.01082522010747987, 0.01082522010747987 },
            { -0.7331497981296535, 0.7331497981296535, -0.2199401248396786, 0.2199401248396786, -0.03608485692318813, 0.03608485692318813, -0.01082522010747987, 0.01082522010747987 },
            { -0.7331497981296535, 0.7331497981296535, -0.2199401248396786, 0.2199401248396786, -0.03608485692318813, 0.03608485692318813, -0.01082522010747987, 0.01082522010747987 },
            { -0.7331497981296535, 0.7331497981296535, -0.2199401248396786, 0.2199401248396786, -0.03608485692318813, 0.03608485692318813, -0.01082522010747987, 0.01082522010747987 },
            { -0.7331497981296535, 0.7331497981296535, -0.2199401248396786, 0.2199401248396786, -0.03608485692318813, 0.03608485692318813, -0.01082522010747987, 0.01082522010747987 },
            { -0.476544961484666, 0.476544961484666, -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334, -0.023455038515334, 0.023455038515334 },
            { -0.476544961484666, 0.476544961484666, -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334, -0.023455038515334, 0.023455038515334 },
            { -0.476544961484666, 0.476544961484666, -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334, -0.023455038515334, 0.023455038515334 },
            { -0.476544961484666, 0.476544961484666, -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334, -0.023455038515334, 0.023455038515334 },
            { -0.476544961484666, 0.476544961484666, -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334, -0.023455038515334, 0.023455038515334 },
            { -0.2199401248396786, 0.2199401248396786, -0.7331497981296534, 0.7331497981296534, -0.01082522010747988, 0.01082522010747988, -0.03608485692318812, 0.03608485692318812 },
            { -0.2199401248396786, 0.2199401248396786, -0.7331497981296534, 0.7331497981296534, -0.01082522010747988, 0.01082522010747988, -0.03608485692318812, 0.03608485692318812 },
            { -0.2199401248396786, 0.2199401248396786, -0.7331497981296534, 0.7331497981296534, -0.01082522010747988, 0.01082522010747988, -0.03608485692318812, 0.03608485692318812 },
            { -0.2199401248396786, 0.2199401248396786, -0.7331497981296534, 0.7331497981296534, -0.01082522010747988, 0.01082522010747988, -0.03608485692318812, 0.03608485692318812 },
            { -0.2199401248396786, 0.2199401248396786, -0.7331497981296534, 0.7331497981296534, -0.01082522010747988, 0.01082522010747988, -0.03608485692318812, 0.03608485692318812 },
            { -0.04470952170364488, 0.04470952170364488, -0.9083804012656872, 0.9083804012656872, -0.00220055532702321, 0.00220055532702321, -0.04470952170364479, 0.04470952170364479 },
            { -0.04470952170364488, 0.04470952170364488, -0.9083804012656872, 0.9083804012656872, -0.00220055532702321, 0.00220055532702321, -0.04470952170364479, 0.04470952170364479 },
            { -0.04470952170364488, 0.04470952170364488, -0.9083804012656872, 0.9083804012656872, -0.00220055532702321, 0.00220055532702321, -0.04470952170364479, 0.04470952170364479 },
            { -0.04470952170364488, 0.04470952170364488, -0.9083804012656872, 0.9083804012656872, -0.00220055532702321, 0.00220055532702321, -0.04470952170364479, 0.04470952170364479 },
            { -0.04470952170364488, 0.04470952170364488, -0.9083804012656872, 0.9083804012656872, -0.00220055532702321, 0.00220055532702321, -0.04470952170364479, 0.04470952170364479 },
            { -0.7331497981296535, 0.7331497981296535, -0.03608485692318813, 0.03608485692318813, -0.2199401248396786, 0.2199401248396786, -0.01082522010747987, 0.01082522010747987 },
            { -0.7331497981296535, 0.7331497981296535, -0.03608485692318813, 0.03608485692318813, -0.2199401248396786, 0.2199401248396786, -0.01082522010747987, 0.01082522010747987 },
            { -0.7331497981296535, 0.7331497981296535, -0.03608485692318813, 0.03608485692318813, -0.2199401248396786, 0.2199401248396786, -0.01082522010747987, 0.01082522010747987 },
            { -0.7331497981296535, 0.7331497981296535, -0.03608485692318813, 0.03608485692318813, -0.2199401248396786, 0.2199401248396786, -0.01082522010747987, 0.01082522010747987 },
            { -0.7331497981296535, 0.7331497981296535, -0.03608485692318813, 0.03608485692318813, -0.2199401248396786, 0.2199401248396786, -0.01082522010747987, 0.01082522010747987 },
            { -0.5917219545342642, 0.5917219545342642, -0.1775127005185774, 0.1775127005185774, -0.1775127005185774, 0.1775127005185774, -0.05325264442858101, 0.05325264442858101 },
            { -0.5917219545342642, 0.5917219545342642, -0.1775127005185774, 0.1775127005185774, -0.1775127005185774, 0.1775127005185774, -0.05325264442858101, 0.05325264442858101 },
            { -0.5917219545342642, 0.5917219545342642, -0.1775127005185774, 0.1775127005185774, -0.1775127005185774, 0.1775127005185774, -0.05325264442858101, 0.05325264442858101 },
            { -0.5917219545342642, 0.5917219545342642, -0.1775127005185774, 0.1775127005185774, -0.1775127005185774, 0.1775127005185774, -0.05325264442858101, 0.05325264442858101 },
            { -0.5917219545342642, 0.5917219545342642, -0.1775127005185774, 0.1775127005185774, -0.1775127005185774, 0.1775127005185774, -0.05325264442858101, 0.05325264442858101 },
            { -0.3846173275264208, 0.3846173275264208, -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792, -0.1153826724735792, 0.1153826724735792 },
            { -0.3846173275264208, 0.3846173275264208, -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792, -0.1153826724735792, 0.1153826724735792 },
            { -0.3846173275264208, 0.3846173275264208, -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792, -0.1153826724735792, 0.1153826724735792 },
            { -0.3846173275264208, 0.3846173275264208, -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792, -0.1153826724735792, 0.1153826724735792 },
            { -0.3846173275264208, 0.3846173275264208, -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792, -0.1153826724735792, 0.1153826724735792 },
            { -0.1775127005185775, 0.1775127005185775, -0.5917219545342641, 0.5917219545342641, -0.05325264442858103, 0.05325264442858103, -0.1775127005185774, 0.1775127005185774 },
            { -0.1775127005185775, 0.1775127005185775, -0.5917219545342641, 0.5917219545342641, -0.05325264442858103, 0.05325264442858103, -0.1775127005185774, 0.1775127005185774 },
            { -0.1775127005185775, 0.1775127005185775, -0.5917219545342641, 0.5917219545342641, -0.05325264442858103, 0.05325264442858103, -0.1775127005185774, 0.1775127005185774 },
            { -0.1775127005185775, 0.1775127005185775, -0.5917219545342641, 0.5917219545342641, -0.05325264442858103, 0.05325264442858103, -0.1775127005185774, 0.1775127005185774 },
            { -0.1775127005185775, 0.1775127005185775, -0.5917219545342641, 0.5917219545342641, -0.05325264442858103, 0.05325264442858103, -0.1775127005185774, 0.1775127005185774 },
            { -0.0360848569231882, 0.0360848569231882, -0.7331497981296534, 0.7331497981296534, -0.01082522010747989, 0.01082522010747989, -0.2199401248396785, 0.2199401248396785 },
            { -0.0360848569231882, 0.0360848569231882, -0.7331497981296534, 0.7331497981296534, -0.01082522010747989, 0.01082522010747989, -0.2199401248396785, 0.2199401248396785 },
            { -0.0360848569231882, 0.0360848569231882, -0.7331497981296534, 0.7331497981296534, -0.01082522010747989, 0.01082522010747989, -0.2199401248396785, 0.2199401248396785 },
            { -0.0360848569231882, 0.0360848569231882, -0.7331497981296534, 0.7331497981296534, -0.01082522010747989, 0.01082522010747989, -0.2199401248396785, 0.2199401248396785 },
            { -0.0360848569231882, 0.0360848569231882, -0.7331497981296534, 0.7331497981296534, -0.01082522010747989, 0.01082522010747989, -0.2199401248396785, 0.2199401248396785 },
            { -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334, -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334 },
            { -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334, -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334 },
            { -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334, -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334 },
            { -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334, -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334 },
            { -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334, -0.476544961484666, 0.476544961484666, -0.023455038515334, 0.023455038515334 },
            { -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792, -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792 },
            { -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792, -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792 },
            { -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792, -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792 },
            { -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792, -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792 },
            { -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792, -0.3846173275264208, 0.3846173275264208, -0.1153826724735792, 0.1153826724735792 },
            { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 },
            { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 },
            { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 },
            { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 },
            { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 },
            { -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207, -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207 },
            { -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207, -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207 },
            { -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207, -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207 },
            { -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207, -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207 },
            { -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207, -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207 },
            { -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666, -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666 },
            { -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666, -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666 },
            { -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666, -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666 },
            { -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666, -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666 },
            { -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666, -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666 },
            { -0.2199401248396786, 0.2199401248396786, -0.01082522010747988, 0.01082522010747988, -0.7331497981296534, 0.7331497981296534, -0.03608485692318812, 0.03608485692318812 },
            { -0.2199401248396786, 0.2199401248396786, -0.01082522010747988, 0.01082522010747988, -0.7331497981296534, 0.7331497981296534, -0.03608485692318812, 0.03608485692318812 },
            { -0.2199401248396786, 0.2199401248396786, -0.01082522010747988, 0.01082522010747988, -0.7331497981296534, 0.7331497981296534, -0.03608485692318812, 0.03608485692318812 },
            { -0.2199401248396786, 0.2199401248396786, -0.01082522010747988, 0.01082522010747988, -0.7331497981296534, 0.7331497981296534, -0.03608485692318812, 0.03608485692318812 },
            { -0.2199401248396786, 0.2199401248396786, -0.01082522010747988, 0.01082522010747988, -0.7331497981296534, 0.7331497981296534, -0.03608485692318812, 0.03608485692318812 },
            { -0.1775127005185775, 0.1775127005185775, -0.05325264442858103, 0.05325264442858103, -0.5917219545342641, 0.5917219545342641, -0.1775127005185774, 0.1775127005185774 },
            { -0.1775127005185775, 0.1775127005185775, -0.05325264442858103, 0.05325264442858103, -0.5917219545342641, 0.5917219545342641, -0.1775127005185774, 0.1775127005185774 },
            { -0.1775127005185775, 0.1775127005185775, -0.05325264442858103, 0.05325264442858103, -0.5917219545342641, 0.5917219545342641, -0.1775127005185774, 0.1775127005185774 },
            { -0.1775127005185775, 0.1775127005185775, -0.05325264442858103, 0.05325264442858103, -0.5917219545342641, 0.5917219545342641, -0.1775127005185774, 0.1775127005185774 },
            { -0.1775127005185775, 0.1775127005185775, -0.05325264442858103, 0.05325264442858103, -0.5917219545342641, 0.5917219545342641, -0.1775127005185774, 0.1775127005185774 },
            { -0.1153826724735793, 0.1153826724735793, -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207, -0.3846173275264207, 0.3846173275264207 },
            { -0.1153826724735793, 0.1153826724735793, -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207, -0.3846173275264207, 0.3846173275264207 },
            { -0.1153826724735793, 0.1153826724735793, -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207, -0.3846173275264207, 0.3846173275264207 },
            { -0.1153826724735793, 0.1153826724735793, -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207, -0.3846173275264207, 0.3846173275264207 },
            { -0.1153826724735793, 0.1153826724735793, -0.1153826724735793, 0.1153826724735793, -0.3846173275264207, 0.3846173275264207, -0.3846173275264207, 0.3846173275264207 },
            { -0.05325264442858105, 0.05325264442858105, -0.1775127005185775, 0.1775127005185775, -0.1775127005185775, 0.1775127005185775, -0.591721954534264, 0.591721954534264 },
            { -0.05325264442858105, 0.05325264442858105, -0.1775127005185775, 0.1775127005185775, -0.1775127005185775, 0.1775127005185775, -0.591721954534264, 0.591721954534264 },
            { -0.05325264442858105, 0.05325264442858105, -0.1775127005185775, 0.1775127005185775, -0.1775127005185775, 0.1775127005185775, -0.591721954534264, 0.591721954534264 },
            { -0.05325264442858105, 0.05325264442858105, -0.1775127005185775, 0.1775127005185775, -0.1775127005185775, 0.1775127005185775, -0.591721954534264, 0.591721954534264 },
            { -0.05325264442858105, 0.05325264442858105, -0.1775127005185775, 0.1775127005185775, -0.1775127005185775, 0.1775127005185775, -0.591721954534264, 0.591721954534264 },
            { -0.0108252201074799, 0.0108252201074799, -0.2199401248396786, 0.2199401248396786, -0.03608485692318819, 0.03608485692318819, -0.7331497981296533, 0.7331497981296533 },
            { -0.0108252201074799, 0.0108252201074799, -0.2199401248396786, 0.2199401248396786, -0.03608485692318819, 0.03608485692318819, -0.7331497981296533, 0.7331497981296533 },
            { -0.0108252201074799, 0.0108252201074799, -0.2199401248396786, 0.2199401248396786, -0.03608485692318819, 0.03608485692318819, -0.7331497981296533, 0.7331497981296533 },
            { -0.0108252201074799, 0.0108252201074799, -0.2199401248396786, 0.2199401248396786, -0.03608485692318819, 0.03608485692318819, -0.7331497981296533, 0.7331497981296533 },
            { -0.0108252201074799, 0.0108252201074799, -0.2199401248396786, 0.2199401248396786, -0.03608485692318819, 0.03608485692318819, -0.7331497981296533, 0.7331497981296533 },
            { -0.04470952170364488, 0.04470952170364488, -0.00220055532702321, 0.00220055532702321, -0.9083804012656872, 0.9083804012656872, -0.04470952170364479, 0.04470952170364479 },
            { -0.04470952170364488, 0.04470952170364488, -0.00220055532702321, 0.00220055532702321, -0.9083804012656872, 0.9083804012656872, -0.04470952170364479, 0.04470952170364479 },
            { -0.04470952170364488, 0.04470952170364488, -0.00220055532702321, 0.00220055532702321, -0.9083804012656872, 0.9083804012656872, -0.04470952170364479, 0.04470952170364479 },
            { -0.04470952170364488, 0.04470952170364488, -0.00220055532702321, 0.00220055532702321, -0.9083804012656872, 0.9083804012656872, -0.04470952170364479, 0.04470952170364479 },
            { -0.04470952170364488, 0.04470952170364488, -0.00220055532702321, 0.00220055532702321, -0.9083804012656872, 0.9083804012656872, -0.04470952170364479, 0.04470952170364479 },
            { -0.0360848569231882, 0.0360848569231882, -0.01082522010747989, 0.01082522010747989, -0.7331497981296534, 0.7331497981296534, -0.2199401248396785, 0.2199401248396785 },
            { -0.0360848569231882, 0.0360848569231882, -0.01082522010747989, 0.01082522010747989, -0.7331497981296534, 0.7331497981296534, -0.2199401248396785, 0.2199401248396785 },
            { -0.0360848569231882, 0.0360848569231882, -0.01082522010747989, 0.01082522010747989, -0.7331497981296534, 0.7331497981296534, -0.2199401248396785, 0.2199401248396785 },
            { -0.0360848569231882, 0.0360848569231882, -0.01082522010747989, 0.01082522010747989, -0.7331497981296534, 0.7331497981296534, -0.2199401248396785, 0.2199401248396785 },
            { -0.0360848569231882, 0.0360848569231882, -0.01082522010747989, 0.01082522010747989, -0.7331497981296534, 0.7331497981296534, -0.2199401248396785, 0.2199401248396785 },
            { -0.02345503851533404, 0.02345503851533404, -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666, -0.476544961484666, 0.476544961484666 },
            { -0.02345503851533404, 0.02345503851533404, -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666, -0.476544961484666, 0.476544961484666 },
            { -0.02345503851533404, 0.02345503851533404, -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666, -0.476544961484666, 0.476544961484666 },
            { -0.02345503851533404, 0.02345503851533404, -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666, -0.476544961484666, 0.476544961484666 },
            { -0.02345503851533404, 0.02345503851533404, -0.02345503851533404, 0.02345503851533404, -0.476544961484666, 0.476544961484666, -0.476544961484666, 0.476544961484666 },
            { -0.0108252201074799, 0.0108252201074799, -0.03608485692318819, 0.03608485692318819, -0.2199401248396786, 0.2199401248396786, -0.7331497981296533, 0.7331497981296533 },
            { -0.0108252201074799, 0.0108252201074799, -0.03608485692318819, 0.03608485692318819, -0.2199401248396786, 0.2199401248396786, -0.7331497981296533, 0.7331497981296533 },
            { -0.0108252201074799, 0.0108252201074799, -0.03608485692318819, 0.03608485692318819, -0.2199401248396786, 0.2199401248396786, -0.7331497981296533, 0.7331497981296533 },
            { -0.0108252201074799, 0.0108252201074799, -0.03608485692318819, 0.03608485692318819, -0.2199401248396786, 0.2199401248396786, -0.7331497981296533, 0.7331497981296533 },
            { -0.0108252201074799, 0.0108252201074799, -0.03608485692318819, 0.03608485692318819, -0.2199401248396786, 0.2199401248396786, -0.7331497981296533, 0.7331497981296533 },
            { -0.002200555327023214, 0.002200555327023214, -0.04470952170364487, 0.04470952170364487, -0.04470952170364487, 0.04470952170364487, -0.9083804012656871, 0.9083804012656871 },
            { -0.002200555327023214, 0.002200555327023214, -0.04470952170364487, 0.04470952170364487, -0.04470952170364487, 0.04470952170364487, -0.9083804012656871, 0.9083804012656871 },
            { -0.002200555327023214, 0.002200555327023214, -0.04470952170364487, 0.04470952170364487, -0.04470952170364487, 0.04470952170364487, -0.9083804012656871, 0.9083804012656871 },
            { -0.002200555327023214, 0.002200555327023214, -0.04470952170364487, 0.04470952170364487, -0.04470952170364487, 0.04470952170364487, -0.9083804012656871, 0.9083804012656871 },
            { -0.002200555327023214, 0.002200555327023214, -0.04470952170364487, 0.04470952170364487, -0.04470952170364487, 0.04470952170364487, -0.9083804012656871, 0.9083804012656871 } } };
    alignas(32) static const double FE8_C0_D001_Q64[1][64][8] =
        { { { -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014 },
            { -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014 },
            { -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014 },
            { -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014 },
            { -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278 },
            { -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278 },
            { -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278 },
            { -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278 },
            { -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094 },
            { -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094 },
            { -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094 },
            { -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094 },
            { -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785, -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769 },
            { -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785, -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769 },
            { -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785, -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769 },
            { -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785, -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769 },
            { -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278 },
            { -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278 },
            { -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278 },
            { -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278 },
            { -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338 },
            { -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338 },
            { -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338 },
            { -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338 },
            { -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901, -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738 },
            { -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901, -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738 },
            { -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901, -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738 },
            { -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901, -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738 },
            { -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591 },
            { -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591 },
            { -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591 },
            { -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671, -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591 },
            { -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094 },
            { -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094 },
            { -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094 },
            { -0.3070963115311591, 0.3070963115311591, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.04651867752656094, 0.04651867752656094 },
            { -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338, -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738 },
            { -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338, -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738 },
            { -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338, -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738 },
            { -0.221103222500738, 0.221103222500738, -0.1089062557068338, 0.1089062557068338, -0.4488872992916901, 0.4488872992916901, -0.221103222500738, 0.221103222500738 },
            { -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901 },
            { -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901 },
            { -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901 },
            { -0.1089062557068338, 0.1089062557068338, -0.221103222500738, 0.221103222500738, -0.221103222500738, 0.221103222500738, -0.4488872992916901, 0.4488872992916901 },
            { -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671 },
            { -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671 },
            { -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671 },
            { -0.02291316667641278, 0.02291316667641278, -0.3070963115311591, 0.3070963115311591, -0.04651867752656094, 0.04651867752656094, -0.6234718442658671, 0.6234718442658671 },
            { -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014, -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769 },
            { -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014, -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769 },
            { -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014, -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769 },
            { -0.06461106321354769, 0.06461106321354769, -0.004820780989426014, 0.004820780989426014, -0.8659570925834785, 0.8659570925834785, -0.06461106321354769, 0.06461106321354769 },
            { -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591 },
            { -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591 },
            { -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591 },
            { -0.04651867752656094, 0.04651867752656094, -0.02291316667641278, 0.02291316667641278, -0.6234718442658671, 0.6234718442658671, -0.3070963115311591, 0.3070963115311591 },
            { -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671 },
            { -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671 },
            { -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671 },
            { -0.02291316667641278, 0.02291316667641278, -0.04651867752656094, 0.04651867752656094, -0.3070963115311591, 0.3070963115311591, -0.6234718442658671, 0.6234718442658671 },
            { -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785 },
            { -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785 },
            { -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785 },
            { -0.004820780989426014, 0.004820780989426014, -0.06461106321354769, 0.06461106321354769, -0.06461106321354769, 0.06461106321354769, -0.8659570925834785, 0.8659570925834785 } } };
    alignas(32) static const double FE8_C0_D010_Q125[1][125][8] =
        { { { -0.9083804012656873, -0.04470952170364479, 0.9083804012656873, 0.04470952170364479, -0.04470952170364479, -0.002200555327023205, 0.04470952170364479, 0.002200555327023205 },
            { -0.7331497981296535, -0.2199401248396786, 0.7331497981296535, 0.2199401248396786, -0.03608485692318813, -0.01082522010747987, 0.03608485692318813, 0.01082522010747987 },
            { -0.476544961484666, -0.476544961484666, 0.476544961484666, 0.476544961484666, -0.023455038515334, -0.023455038515334, 0.023455038515334, 0.023455038515334 },
            { -0.2199401248396786, -0.7331497981296534, 0.2199401248396786, 0.7331497981296534, -0.01082522010747988, -0.03608485692318812, 0.01082522010747988, 0.03608485692318812 },
            { -0.04470952170364488, -0.9083804012656872, 0.04470952170364488, 0.9083804012656872, -0.00220055532702321, -0.04470952170364479, 0.00220055532702321, 0.04470952170364479 },
            { -0.9083804012656873, -0.04470952170364479, 0.9083804012656873, 0.04470952170364479, -0.04470952170364479, -0.002200555327023205, 0.04470952170364479, 0.002200555327023205 },
            { -0.7331497981296535, -0.2199401248396786, 0.7331497981296535, 0.2199401248396786, -0.03608485692318813, -0.01082522010747987, 0.03608485692318813, 0.01082522010747987 },
            { -0.476544961484666, -0.476544961484666, 0.476544961484666, 0.476544961484666, -0.023455038515334, -0.023455038515334, 0.023455038515334, 0.023455038515334 },
            { -0.2199401248396786, -0.7331497981296534, 0.2199401248396786, 0.7331497981296534, -0.01082522010747988, -0.03608485692318812, 0.01082522010747988, 0.03608485692318812 },
            { -0.04470952170364488, -0.9083804012656872, 0.04470952170364488, 0.9083804012656872, -0.00220055532702321, -0.04470952170364479, 0.00220055532702321, 0.04470952170364479 },
            { -0.9083804012656873, -0.04470952170364479, 0.9083804012656873, 0.04470952170364479, -0.04470952170364479, -0.002200555327023205, 0.04470952170364479, 0.002200555327023205 },
            { -0.7331497981296535, -0.2199401248396786, 0.7331497981296535, 0.2199401248396786, -0.03608485692318813, -0.01082522010747987, 0.03608485692318813, 0.01082522010747987 },
            { -0.476544961484666, -0.476544961484666, 0.476544961484666, 0.476544961484666, -0.023455038515334, -0.023455038515334, 0.023455038515334, 0.023455038515334 },
            { -0.2199401248396786, -0.7331497981296534, 0.2199401248396786, 0.7331497981296534, -0.01082522010747988, -0.03608485692318812, 0.01082522010747988, 0.03608485692318812 },
            { -0.04470952170364488, -0.9083804012656872, 0.04470952170364488, 0.9083804012656872, -0.00220055532702321, -0.04470952170364479, 0.00220055532702321, 0.04470952170364479 },
            { -0.9083804012656873, -0.04470952170364479, 0.9083804012656873, 0.04470952170364479, -0.04470952170364479, -0.002200555327023205, 0.04470952170364479, 0.002200555327023205 },
            { -0.7331497981296535, -0.2199401248396786, 0.7331497981296535, 0.2199401248396786, -0.03608485692318813, -0.01082522010747987, 0.03608485692318813, 0.01082522010747987 },
            { -0.476544961484666, -0.476544961484666, 0.476544961484666, 0.476544961484666, -0.023455038515334, -0.023455038515334, 0.023455038515334, 0.023455038515334 },
            { -0.2199401248396786, -0.7331497981296534, 0.2199401248396786, 0.7331497981296534, -0.01082522010747988, -0.03608485692318812, 0.01082522010747988, 0.03608485692318812 },
            { -0.04470952170364488, -0.9083804012656872, 0.04470952170364488, 0.9083804012656872, -0.00220055532702321, -0.04470952170364479, 0.00220055532702321, 0.04470952170364479 },
            { -0.9083804012656873, -0.04470952170364479, 0.9083804012656873, 0.04470952170364479, -0.04470952170364479, -0.002200555327023205, 0.04470952170364479, 0.002200555327023205 },
            { -0.7331497981296535, -0.2199401248396786, 0.7331497981296535, 0.2199401248396786, -0.03608485692318813, -0.01082522010747987, 0.03608485692318813, 0.01082522010747987 },
            { -0.476544961484666, -0.476544961484666, 0.476544961484666, 0.476544961484666, -0.023455038515334, -0.023455038515334, 0.023455038515334, 0.023455038515334 },
            { -0.2199401248396786, -0.7331497981296534, 0.2199401248396786, 0.7331497981296534, -0.01082522010747988, -0.03608485692318812, 0.01082522010747988, 0.03608485692318812 },
            { -0.04470952170364488, -0.9083804012656872, 0.04470952170364488, 0.9083804012656872, -0.00220055532702321, -0.04470952170364479, 0.00220055532702321, 0.04470952170364479 },
            { -0.7331497981296535, -0.03608485692318813, 0.7331497981296535, 0.03608485692318813, -0.2199401248396786, -0.01082522010747987, 0.2199401248396786, 0.01082522010747987 },
            { -0.5917219545342642, -0.1775127005185774, 0.5917219545342642, 0.1775127005185774, -0.1775127005185774, -0.05325264442858101, 0.1775127005185774, 0.05325264442858101 },
            { -0.3846173275264208, -0.3846173275264208, 0.3846173275264208, 0.3846173275264208, -0.1153826724735792, -0.1153826724735792, 0.1153826724735792, 0.1153826724735792 },
            { -0.1775127005185775, -0.5917219545342641, 0.1775127005185775, 0.5917219545342641, -0.05325264442858103, -0.1775127005185774, 0.05325264442858103, 0.1775127005185774 },
            { -0.0360848569231882, -0.7331497981296534, 0.0360848569231882, 0.7331497981296534, -0.01082522010747989, -0.2199401248396785, 0.01082522010747989, 0.2199401248396785 },
            { -0.7331497981296535, -0.03608485692318813, 0.7331497981296535, 0.03608485692318813, -0.2199401248396786, -0.01082522010747987, 0.2199401248396786, 0.01082522010747987 },
            { -0.5917219545342642, -0.1775127005185774, 0.5917219545342642, 0.1775127005185774, -0.1775127005185774, -0.05325264442858101, 0.1775127005185774, 0.05325264442858101 },
            { -0.3846173275264208, -0.3846173275264208, 0.3846173275264208, 0.3846173275264208, -0.1153826724735792, -0.1153826724735792, 0.1153826724735792, 0.1153826724735792 },
            { -0.1775127005185775, -0.5917219545342641, 0.1775127005185775, 0.5917219545342641, -0.05325264442858103, -0.1775127005185774, 0.05325264442858103, 0.1775127005185774 },
            { -0.0360848569231882, -0.7331497981296534, 0.0360848569231882, 0.7331497981296534, -0.01082522010747989, -0.2199401248396785, 0.01082522010747989, 0.2199401248396785 },
            { -0.7331497981296535, -0.03608485692318813, 0.7331497981296535, 0.03608485692318813, -0.2199401248396786, -0.01082522010747987, 0.2199401248396786, 0.01082522010747987 },
            { -0.5917219545342642, -0.1775127005185774, 0.5917219545342642, 0.1775127005185774, -0.1775127005185774, -0.05325264442858101, 0.1775127005185774, 0.05325264442858101 },
            { -0.3846173275264208, -0.3846173275264208, 0.3846173275264208, 0.3846173275264208, -0.1153826724735792, -0.1153826724735792, 0.1153826724735792, 0.1153826724735792 },
            { -0.1775127005185775, -0.5917219545342641, 0.1775127005185775, 0.5917219545342641, -0.05325264442858103, -0.1775127005185774, 0.05325264442858103, 0.1775127005185774 },
            { -0.0360848569231882, -0.7331497981296534, 0.0360848569231882, 0.7331497981296534, -0.01082522010747989, -0.2199401248396785, 0.01082522010747989, 0.2199401248396785 },
            { -0.7331497981296535, -0.03608485692318813, 0.7331497981296535, 0.03608485692318813, -0.2199401248396786, -0.01082522010747987, 0.2199401248396786, 0.01082522010747987 },
            { -0.5917219545342642, -0.1775127005185774, 0.5917219545342642, 0.1775127005185774, -0.1775127005185774, -0.05325264442858101, 0.1775127005185774, 0.05325264442858101 },
            { -0.3846173275264208, -0.3846173275264208, 0.3846173275264208, 0.3846173275264208, -0.1153826724735792, -0.1153826724735792, 0.1153826724735792, 0.1153826724735792 },
            { -0.1775127005185775, -0.5917219545342641, 0.1775127005185775, 0.5917219545342641, -0.05325264442858103, -0.1775127005185774, 0.05325264442858103, 0.1775127005185774 },
            { -0.0360848569231882, -0.7331497981296534, 0.0360848569231882, 0.7331497981296534, -0.01082522010747989, -0.2199401248396785, 0.01082522010747989, 0.2199401248396785 },
            { -0.7331497981296535, -0.03608485692318813, 0.7331497981296535, 0.03608485692318813, -0.2199401248396786, -0.01082522010747987, 0.2199401248396786, 0.01082522010747987 },
            { -0.5917219545342642, -0.1775127005185774, 0.5917219545342642, 0.1775127005185774, -0.1775127005185774, -0.05325264442858101, 0.1775127005185774, 0.05325264442858101 },
            { -0.3846173275264208, -0.3846173275264208, 0.3846173275264208, 0.3846173275264208, -0.1153826724735792, -0.1153826724735792, 0.1153826724735792, 0.1153826724735792 },
            { -0.1775127005185775, -0.5917219545342641, 0.1775127005185775, 0.5917219545342641, -0.05325264442858103, -0.1775127005185774, 0.05325264442858103, 0.1775127005185774 },
            { -0.0360848569231882, -0.7331497981296534, 0.0360848569231882, 0.7331497981296534, -0.01082522010747989, -0.2199401248396785, 0.01082522010747989, 0.2199401248396785 },
            { -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334, -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334 },
            { -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792, -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792 },
            { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25 },
            { -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207, -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207 },
            { -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666, -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666 },
            { -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334, -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334 },
            { -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792, -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792 },
            { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25 },
            { -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207, -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207 },
            { -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666, -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666 },
            { -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334, -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334 },
            { -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792, -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792 },
            { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25 },
            { -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207, -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207 },
            { -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666, -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666 },
            { -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334, -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334 },
            { -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792, -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792 },
            { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25 },
            { -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207, -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207 },
            { -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666, -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666 },
            { -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334, -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334 },
            { -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792, -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792 },
            { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, 0.25, 0.25 },
            { -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207, -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207 },
            { -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666, -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666 },
            { -0.2199401248396786, -0.01082522010747988, 0.2199401248396786, 0.01082522010747988, -0.7331497981296534, -0.03608485692318812, 0.7331497981296534, 0.03608485692318812 },
            { -0.1775127005185775, -0.05325264442858103, 0.1775127005185775, 0.05325264442858103, -0.5917219545342641, -0.1775127005185774, 0.5917219545342641, 0.1775127005185774 },
            { -0.1153826724735793, -0.1153826724735793, 0.1153826724735793, 0.1153826724735793, -0.3846173275264207, -0.3846173275264207, 0.3846173275264207, 0.3846173275264207 },
            { -0.05325264442858105, -0.1775127005185775, 0.05325264442858105, 0.1775127005185775, -0.1775127005185775, -0.591721954534264, 0.1775127005185775, 0.591721954534264 },
            { -0.0108252201074799, -0.2199401248396786, 0.0108252201074799, 0.2199401248396786, -0.03608485692318819, -0.7331497981296533, 0.03608485692318819, 0.7331497981296533 },
            { -0.2199401248396786, -0.01082522010747988, 0.2199401248396786, 0.01082522010747988, -0.7331497981296534, -0.03608485692318812, 0.7331497981296534, 0.03608485692318812 },
            { -0.1775127005185775, -0.05325264442858103, 0.1775127005185775, 0.05325264442858103, -0.5917219545342641, -0.1775127005185774, 0.5917219545342641, 0.1775127005185774 },
            { -0.1153826724735793, -0.1153826724735793, 0.1153826724735793, 0.1153826724735793, -0.3846173275264207, -0.3846173275264207, 0.3846173275264207, 0.3846173275264207 },
            { -0.05325264442858105, -0.1775127005185775, 0.05325264442858105, 0.1775127005185775, -0.1775127005185775, -0.591721954534264, 0.1775127005185775, 0.591721954534264 },
            { -0.0108252201074799, -0.2199401248396786, 0.0108252201074799, 0.2199401248396786, -0.03608485692318819, -0.7331497981296533, 0.03608485692318819, 0.7331497981296533 },
            { -0.2199401248396786, -0.01082522010747988, 0.2199401248396786, 0.01082522010747988, -0.7331497981296534, -0.03608485692318812, 0.7331497981296534, 0.03608485692318812 },
            { -0.1775127005185775, -0.05325264442858103, 0.1775127005185775, 0.05325264442858103, -0.5917219545342641, -0.1775127005185774, 0.5917219545342641, 0.1775127005185774 },
            { -0.1153826724735793, -0.1153826724735793, 0.1153826724735793, 0.1153826724735793, -0.3846173275264207, -0.3846173275264207, 0.3846173275264207, 0.3846173275264207 },
            { -0.05325264442858105, -0.1775127005185775, 0.05325264442858105, 0.1775127005185775, -0.1775127005185775, -0.591721954534264, 0.1775127005185775, 0.591721954534264 },
            { -0.0108252201074799, -0.2199401248396786, 0.0108252201074799, 0.2199401248396786, -0.03608485692318819, -0.7331497981296533, 0.03608485692318819, 0.7331497981296533 },
            { -0.2199401248396786, -0.01082522010747988, 0.2199401248396786, 0.01082522010747988, -0.7331497981296534, -0.03608485692318812, 0.7331497981296534, 0.03608485692318812 },
            { -0.1775127005185775, -0.05325264442858103, 0.1775127005185775, 0.05325264442858103, -0.5917219545342641, -0.1775127005185774, 0.5917219545342641, 0.1775127005185774 },
            { -0.1153826724735793, -0.1153826724735793, 0.1153826724735793, 0.1153826724735793, -0.3846173275264207, -0.3846173275264207, 0.3846173275264207, 0.3846173275264207 },
            { -0.05325264442858105, -0.1775127005185775, 0.05325264442858105, 0.1775127005185775, -0.1775127005185775, -0.591721954534264, 0.1775127005185775, 0.591721954534264 },
            { -0.0108252201074799, -0.2199401248396786, 0.0108252201074799, 0.2199401248396786, -0.03608485692318819, -0.7331497981296533, 0.03608485692318819, 0.7331497981296533 },
            { -0.2199401248396786, -0.01082522010747988, 0.2199401248396786, 0.01082522010747988, -0.7331497981296534, -0.03608485692318812, 0.7331497981296534, 0.03608485692318812 },
            { -0.1775127005185775, -0.05325264442858103, 0.1775127005185775, 0.05325264442858103, -0.5917219545342641, -0.1775127005185774, 0.5917219545342641, 0.1775127005185774 },
            { -0.1153826724735793, -0.1153826724735793, 0.1153826724735793, 0.1153826724735793, -0.3846173275264207, -0.3846173275264207, 0.3846173275264207, 0.3846173275264207 },
            { -0.05325264442858105, -0.1775127005185775, 0.05325264442858105, 0.1775127005185775, -0.1775127005185775, -0.591721954534264, 0.1775127005185775, 0.591721954534264 },
            { -0.0108252201074799, -0.2199401248396786, 0.0108252201074799, 0.2199401248396786, -0.03608485692318819, -0.7331497981296533, 0.03608485692318819, 0.7331497981296533 },
            { -0.04470952170364488, -0.00220055532702321, 0.04470952170364488, 0.00220055532702321, -0.9083804012656872, -0.04470952170364479, 0.9083804012656872, 0.04470952170364479 },
            { -0.0360848569231882, -0.01082522010747989, 0.0360848569231882, 0.01082522010747989, -0.7331497981296534, -0.2199401248396785, 0.7331497981296534, 0.2199401248396785 },
            { -0.02345503851533404, -0.02345503851533404, 0.02345503851533404, 0.02345503851533404, -0.476544961484666, -0.476544961484666, 0.476544961484666, 0.476544961484666 },
            { -0.0108252201074799, -0.03608485692318819, 0.0108252201074799, 0.03608485692318819, -0.2199401248396786, -0.7331497981296533, 0.2199401248396786, 0.7331497981296533 },
            { -0.002200555327023214, -0.04470952170364487, 0.002200555327023214, 0.04470952170364487, -0.04470952170364487, -0.9083804012656871, 0.04470952170364487, 0.9083804012656871 },
            { -0.04470952170364488, -0.00220055532702321, 0.04470952170364488, 0.00220055532702321, -0.9083804012656872, -0.04470952170364479, 0.9083804012656872, 0.04470952170364479 },
            { -0.0360848569231882, -0.01082522010747989, 0.0360848569231882, 0.01082522010747989, -0.7331497981296534, -0.2199401248396785, 0.7331497981296534, 0.2199401248396785 },
            { -0.02345503851533404, -0.02345503851533404, 0.02345503851533404, 0.02345503851533404, -0.476544961484666, -0.476544961484666, 0.476544961484666, 0.476544961484666 },
            { -0.0108252201074799, -0.03608485692318819, 0.0108252201074799, 0.03608485692318819, -0.2199401248396786, -0.7331497981296533, 0.2199401248396786, 0.7331497981296533 },
            { -0.002200555327023214, -0.04470952170364487, 0.002200555327023214, 0.04470952170364487, -0.04470952170364487, -0.9083804012656871, 0.04470952170364487, 0.9083804012656871 },
            { -0.04470952170364488, -0.00220055532702321, 0.04470952170364488, 0.00220055532702321, -0.9083804012656872, -0.04470952170364479, 0.9083804012656872, 0.04470952170364479 },
            { -0.0360848569231882, -0.01082522010747989, 0.0360848569231882, 0.01082522010747989, -0.7331497981296534, -0.2199401248396785, 0.7331497981296534, 0.2199401248396785 },
            { -0.02345503851533404, -0.02345503851533404, 0.02345503851533404, 0.02345503851533404, -0.476544961484666, -0.476544961484666, 0.476544961484666, 0.476544961484666 },
            { -0.0108252201074799, -0.03608485692318819, 0.0108252201074799, 0.03608485692318819, -0.2199401248396786, -0.7331497981296533, 0.2199401248396786, 0.7331497981296533 },
            { -0.002200555327023214, -0.04470952170364487, 0.002200555327023214, 0.04470952170364487, -0.04470952170364487, -0.9083804012656871, 0.04470952170364487, 0.9083804012656871 },
            { -0.04470952170364488, -0.00220055532702321, 0.04470952170364488, 0.00220055532702321, -0.9083804012656872, -0.04470952170364479, 0.9083804012656872, 0.04470952170364479 },
            { -0.0360848569231882, -0.01082522010747989, 0.0360848569231882, 0.01082522010747989, -0.7331497981296534, -0.2199401248396785, 0.7331497981296534, 0.2199401248396785 },
            { -0.02345503851533404, -0.02345503851533404, 0.02345503851533404, 0.02345503851533404, -0.476544961484666, -0.476544961484666, 0.476544961484666, 0.476544961484666 },
            { -0.0108252201074799, -0.03608485692318819, 0.0108252201074799, 0.03608485692318819, -0.2199401248396786, -0.7331497981296533, 0.2199401248396786, 0.7331497981296533 },
            { -0.002200555327023214, -0.04470952170364487, 0.002200555327023214, 0.04470952170364487, -0.04470952170364487, -0.9083804012656871, 0.04470952170364487, 0.9083804012656871 },
            { -0.04470952170364488, -0.00220055532702321, 0.04470952170364488, 0.00220055532702321, -0.9083804012656872, -0.04470952170364479, 0.9083804012656872, 0.04470952170364479 },
            { -0.0360848569231882, -0.01082522010747989, 0.0360848569231882, 0.01082522010747989, -0.7331497981296534, -0.2199401248396785, 0.7331497981296534, 0.2199401248396785 },
            { -0.02345503851533404, -0.02345503851533404, 0.02345503851533404, 0.02345503851533404, -0.476544961484666, -0.476544961484666, 0.476544961484666, 0.476544961484666 },
            { -0.0108252201074799, -0.03608485692318819, 0.0108252201074799, 0.03608485692318819, -0.2199401248396786, -0.7331497981296533, 0.2199401248396786, 0.7331497981296533 },
            { -0.002200555327023214, -0.04470952170364487, 0.002200555327023214, 0.04470952170364487, -0.04470952170364487, -0.9083804012656871, 0.04470952170364487, 0.9083804012656871 } } };
    alignas(32) static const double FE8_C0_D010_Q64[1][64][8] =
        { { { -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769 },
            { -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769 },
            { -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769 },
            { -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769 },
            { -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591 },
            { -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591 },
            { -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591 },
            { -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591 },
            { -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671 },
            { -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671 },
            { -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671 },
            { -0.3070963115311591, -0.02291316667641278, 0.3070963115311591, 0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, 0.221103222500738, 0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, 0.1089062557068338, 0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, 0.02291316667641278, 0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.04651867752656094, 0.6234718442658671 },
            { -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785 },
            { -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785 },
            { -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785 },
            { -0.06461106321354769, -0.004820780989426014, 0.06461106321354769, 0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, 0.04651867752656094, 0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, 0.02291316667641278, 0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, 0.004820780989426014, 0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.06461106321354769, 0.8659570925834785 } } };
    alignas(32) static const double FE8_C0_D100_Q125[1][125][8] =
        { { { -0.9083804012656873, -0.04470952170364479, -0.04470952170364479, -0.002200555327023205, 0.9083804012656873, 0.04470952170364479, 0.04470952170364479, 0.002200555327023205 },
            { -0.7331497981296535, -0.2199401248396786, -0.03608485692318813, -0.01082522010747987, 0.7331497981296535, 0.2199401248396786, 0.03608485692318813, 0.01082522010747987 },
            { -0.476544961484666, -0.476544961484666, -0.023455038515334, -0.023455038515334, 0.476544961484666, 0.476544961484666, 0.023455038515334, 0.023455038515334 },
            { -0.2199401248396786, -0.7331497981296534, -0.01082522010747988, -0.03608485692318812, 0.2199401248396786, 0.7331497981296534, 0.01082522010747988, 0.03608485692318812 },
            { -0.04470952170364488, -0.9083804012656872, -0.00220055532702321, -0.04470952170364479, 0.04470952170364488, 0.9083804012656872, 0.00220055532702321, 0.04470952170364479 },
            { -0.7331497981296535, -0.03608485692318813, -0.2199401248396786, -0.01082522010747987, 0.7331497981296535, 0.03608485692318813, 0.2199401248396786, 0.01082522010747987 },
            { -0.5917219545342642, -0.1775127005185774, -0.1775127005185774, -0.05325264442858101, 0.5917219545342642, 0.1775127005185774, 0.1775127005185774, 0.05325264442858101 },
            { -0.3846173275264208, -0.3846173275264208, -0.1153826724735792, -0.1153826724735792, 0.3846173275264208, 0.3846173275264208, 0.1153826724735792, 0.1153826724735792 },
            { -0.1775127005185775, -0.5917219545342641, -0.05325264442858103, -0.1775127005185774, 0.1775127005185775, 0.5917219545342641, 0.05325264442858103, 0.1775127005185774 },
            { -0.0360848569231882, -0.7331497981296534, -0.01082522010747989, -0.2199401248396785, 0.0360848569231882, 0.7331497981296534, 0.01082522010747989, 0.2199401248396785 },
            { -0.476544961484666, -0.023455038515334, -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334, 0.476544961484666, 0.023455038515334 },
            { -0.3846173275264208, -0.1153826724735792, -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792, 0.3846173275264208, 0.1153826724735792 },
            { -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 },
            { -0.1153826724735793, -0.3846173275264207, -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207, 0.1153826724735793, 0.3846173275264207 },
            { -0.02345503851533404, -0.476544961484666, -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666, 0.02345503851533404, 0.476544961484666 },
            { -0.2199401248396786, -0.01082522010747988, -0.7331497981296534, -0.03608485692318812, 0.2199401248396786, 0.01082522010747988, 0.7331497981296534, 0.03608485692318812 },
            { -0.1775127005185775, -0.05325264442858103, -0.5917219545342641, -0.1775127005185774, 0.1775127005185775, 0.05325264442858103, 0.5917219545342641, 0.1775127005185774 },
            { -0.1153826724735793, -0.1153826724735793, -0.3846173275264207, -0.3846173275264207, 0.1153826724735793, 0.1153826724735793, 0.3846173275264207, 0.3846173275264207 },
            { -0.05325264442858105, -0.1775127005185775, -0.1775127005185775, -0.591721954534264, 0.05325264442858105, 0.1775127005185775, 0.1775127005185775, 0.591721954534264 },
            { -0.0108252201074799, -0.2199401248396786, -0.03608485692318819, -0.7331497981296533, 0.0108252201074799, 0.2199401248396786, 0.03608485692318819, 0.7331497981296533 },
            { -0.04470952170364488, -0.00220055532702321, -0.9083804012656872, -0.04470952170364479, 0.04470952170364488, 0.00220055532702321, 0.9083804012656872, 0.04470952170364479 },
            { -0.0360848569231882, -0.01082522010747989, -0.7331497981296534, -0.2199401248396785, 0.0360848569231882, 0.01082522010747989, 0.7331497981296534, 0.2199401248396785 },
            { -0.02345503851533404, -0.02345503851533404, -0.476544961484666, -0.476544961484666, 0.02345503851533404, 0.02345503851533404, 0.476544961484666, 0.476544961484666 },
            { -0.0108252201074799, -0.03608485692318819, -0.2199401248396786, -0.7331497981296533, 0.0108252201074799, 0.03608485692318819, 0.2199401248396786, 0.7331497981296533 },
            { -0.002200555327023214, -0.04470952170364487, -0.04470952170364487, -0.9083804012656871, 0.002200555327023214, 0.04470952170364487, 0.04470952170364487, 0.9083804012656871 },
            { -0.9083804012656873, -0.04470952170364479, -0.04470952170364479, -0.002200555327023205, 0.9083804012656873, 0.04470952170364479, 0.04470952170364479, 0.002200555327023205 },
            { -0.7331497981296535, -0.2199401248396786, -0.03608485692318813, -0.01082522010747987, 0.7331497981296535, 0.2199401248396786, 0.03608485692318813, 0.01082522010747987 },
            { -0.476544961484666, -0.476544961484666, -0.023455038515334, -0.023455038515334, 0.476544961484666, 0.476544961484666, 0.023455038515334, 0.023455038515334 },
            { -0.2199401248396786, -0.7331497981296534, -0.01082522010747988, -0.03608485692318812, 0.2199401248396786, 0.7331497981296534, 0.01082522010747988, 0.03608485692318812 },
            { -0.04470952170364488, -0.9083804012656872, -0.00220055532702321, -0.04470952170364479, 0.04470952170364488, 0.9083804012656872, 0.00220055532702321, 0.04470952170364479 },
            { -0.7331497981296535, -0.03608485692318813, -0.2199401248396786, -0.01082522010747987, 0.7331497981296535, 0.03608485692318813, 0.2199401248396786, 0.01082522010747987 },
            { -0.5917219545342642, -0.1775127005185774, -0.1775127005185774, -0.05325264442858101, 0.5917219545342642, 0.1775127005185774, 0.1775127005185774, 0.05325264442858101 },
            { -0.3846173275264208, -0.3846173275264208, -0.1153826724735792, -0.1153826724735792, 0.3846173275264208, 0.3846173275264208, 0.1153826724735792, 0.1153826724735792 },
            { -0.1775127005185775, -0.5917219545342641, -0.05325264442858103, -0.1775127005185774, 0.1775127005185775, 0.5917219545342641, 0.05325264442858103, 0.1775127005185774 },
            { -0.0360848569231882, -0.7331497981296534, -0.01082522010747989, -0.2199401248396785, 0.0360848569231882, 0.7331497981296534, 0.01082522010747989, 0.2199401248396785 },
            { -0.476544961484666, -0.023455038515334, -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334, 0.476544961484666, 0.023455038515334 },
            { -0.3846173275264208, -0.1153826724735792, -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792, 0.3846173275264208, 0.1153826724735792 },
            { -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 },
            { -0.1153826724735793, -0.3846173275264207, -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207, 0.1153826724735793, 0.3846173275264207 },
            { -0.02345503851533404, -0.476544961484666, -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666, 0.02345503851533404, 0.476544961484666 },
            { -0.2199401248396786, -0.01082522010747988, -0.7331497981296534, -0.03608485692318812, 0.2199401248396786, 0.01082522010747988, 0.7331497981296534, 0.03608485692318812 },
            { -0.1775127005185775, -0.05325264442858103, -0.5917219545342641, -0.1775127005185774, 0.1775127005185775, 0.05325264442858103, 0.5917219545342641, 0.1775127005185774 },
            { -0.1153826724735793, -0.1153826724735793, -0.3846173275264207, -0.3846173275264207, 0.1153826724735793, 0.1153826724735793, 0.3846173275264207, 0.3846173275264207 },
            { -0.05325264442858105, -0.1775127005185775, -0.1775127005185775, -0.591721954534264, 0.05325264442858105, 0.1775127005185775, 0.1775127005185775, 0.591721954534264 },
            { -0.0108252201074799, -0.2199401248396786, -0.03608485692318819, -0.7331497981296533, 0.0108252201074799, 0.2199401248396786, 0.03608485692318819, 0.7331497981296533 },
            { -0.04470952170364488, -0.00220055532702321, -0.9083804012656872, -0.04470952170364479, 0.04470952170364488, 0.00220055532702321, 0.9083804012656872, 0.04470952170364479 },
            { -0.0360848569231882, -0.01082522010747989, -0.7331497981296534, -0.2199401248396785, 0.0360848569231882, 0.01082522010747989, 0.7331497981296534, 0.2199401248396785 },
            { -0.02345503851533404, -0.02345503851533404, -0.476544961484666, -0.476544961484666, 0.02345503851533404, 0.02345503851533404, 0.476544961484666, 0.476544961484666 },
            { -0.0108252201074799, -0.03608485692318819, -0.2199401248396786, -0.7331497981296533, 0.0108252201074799, 0.03608485692318819, 0.2199401248396786, 0.7331497981296533 },
            { -0.002200555327023214, -0.04470952170364487, -0.04470952170364487, -0.9083804012656871, 0.002200555327023214, 0.04470952170364487, 0.04470952170364487, 0.9083804012656871 },
            { -0.9083804012656873, -0.04470952170364479, -0.04470952170364479, -0.002200555327023205, 0.9083804012656873, 0.04470952170364479, 0.04470952170364479, 0.002200555327023205 },
            { -0.7331497981296535, -0.2199401248396786, -0.03608485692318813, -0.01082522010747987, 0.7331497981296535, 0.2199401248396786, 0.03608485692318813, 0.01082522010747987 },
            { -0.476544961484666, -0.476544961484666, -0.023455038515334, -0.023455038515334, 0.476544961484666, 0.476544961484666, 0.023455038515334, 0.023455038515334 },
            { -0.2199401248396786, -0.7331497981296534, -0.01082522010747988, -0.03608485692318812, 0.2199401248396786, 0.7331497981296534, 0.01082522010747988, 0.03608485692318812 },
            { -0.04470952170364488, -0.9083804012656872, -0.00220055532702321, -0.04470952170364479, 0.04470952170364488, 0.9083804012656872, 0.00220055532702321, 0.04470952170364479 },
            { -0.7331497981296535, -0.03608485692318813, -0.2199401248396786, -0.01082522010747987, 0.7331497981296535, 0.03608485692318813, 0.2199401248396786, 0.01082522010747987 },
            { -0.5917219545342642, -0.1775127005185774, -0.1775127005185774, -0.05325264442858101, 0.5917219545342642, 0.1775127005185774, 0.1775127005185774, 0.05325264442858101 },
            { -0.3846173275264208, -0.3846173275264208, -0.1153826724735792, -0.1153826724735792, 0.3846173275264208, 0.3846173275264208, 0.1153826724735792, 0.1153826724735792 },
            { -0.1775127005185775, -0.5917219545342641, -0.05325264442858103, -0.1775127005185774, 0.1775127005185775, 0.5917219545342641, 0.05325264442858103, 0.1775127005185774 },
            { -0.0360848569231882, -0.7331497981296534, -0.01082522010747989, -0.2199401248396785, 0.0360848569231882, 0.7331497981296534, 0.01082522010747989, 0.2199401248396785 },
            { -0.476544961484666, -0.023455038515334, -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334, 0.476544961484666, 0.023455038515334 },
            { -0.3846173275264208, -0.1153826724735792, -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792, 0.3846173275264208, 0.1153826724735792 },
            { -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 },
            { -0.1153826724735793, -0.3846173275264207, -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207, 0.1153826724735793, 0.3846173275264207 },
            { -0.02345503851533404, -0.476544961484666, -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666, 0.02345503851533404, 0.476544961484666 },
            { -0.2199401248396786, -0.01082522010747988, -0.7331497981296534, -0.03608485692318812, 0.2199401248396786, 0.01082522010747988, 0.7331497981296534, 0.03608485692318812 },
            { -0.1775127005185775, -0.05325264442858103, -0.5917219545342641, -0.1775127005185774, 0.1775127005185775, 0.05325264442858103, 0.5917219545342641, 0.1775127005185774 },
            { -0.1153826724735793, -0.1153826724735793, -0.3846173275264207, -0.3846173275264207, 0.1153826724735793, 0.1153826724735793, 0.3846173275264207, 0.3846173275264207 },
            { -0.05325264442858105, -0.1775127005185775, -0.1775127005185775, -0.591721954534264, 0.05325264442858105, 0.1775127005185775, 0.1775127005185775, 0.591721954534264 },
            { -0.0108252201074799, -0.2199401248396786, -0.03608485692318819, -0.7331497981296533, 0.0108252201074799, 0.2199401248396786, 0.03608485692318819, 0.7331497981296533 },
            { -0.04470952170364488, -0.00220055532702321, -0.9083804012656872, -0.04470952170364479, 0.04470952170364488, 0.00220055532702321, 0.9083804012656872, 0.04470952170364479 },
            { -0.0360848569231882, -0.01082522010747989, -0.7331497981296534, -0.2199401248396785, 0.0360848569231882, 0.01082522010747989, 0.7331497981296534, 0.2199401248396785 },
            { -0.02345503851533404, -0.02345503851533404, -0.476544961484666, -0.476544961484666, 0.02345503851533404, 0.02345503851533404, 0.476544961484666, 0.476544961484666 },
            { -0.0108252201074799, -0.03608485692318819, -0.2199401248396786, -0.7331497981296533, 0.0108252201074799, 0.03608485692318819, 0.2199401248396786, 0.7331497981296533 },
            { -0.002200555327023214, -0.04470952170364487, -0.04470952170364487, -0.9083804012656871, 0.002200555327023214, 0.04470952170364487, 0.04470952170364487, 0.9083804012656871 },
            { -0.9083804012656873, -0.04470952170364479, -0.04470952170364479, -0.002200555327023205, 0.9083804012656873, 0.04470952170364479, 0.04470952170364479, 0.002200555327023205 },
            { -0.7331497981296535, -0.2199401248396786, -0.03608485692318813, -0.01082522010747987, 0.7331497981296535, 0.2199401248396786, 0.03608485692318813, 0.01082522010747987 },
            { -0.476544961484666, -0.476544961484666, -0.023455038515334, -0.023455038515334, 0.476544961484666, 0.476544961484666, 0.023455038515334, 0.023455038515334 },
            { -0.2199401248396786, -0.7331497981296534, -0.01082522010747988, -0.03608485692318812, 0.2199401248396786, 0.7331497981296534, 0.01082522010747988, 0.03608485692318812 },
            { -0.04470952170364488, -0.9083804012656872, -0.00220055532702321, -0.04470952170364479, 0.04470952170364488, 0.9083804012656872, 0.00220055532702321, 0.04470952170364479 },
            { -0.7331497981296535, -0.03608485692318813, -0.2199401248396786, -0.01082522010747987, 0.7331497981296535, 0.03608485692318813, 0.2199401248396786, 0.01082522010747987 },
            { -0.5917219545342642, -0.1775127005185774, -0.1775127005185774, -0.05325264442858101, 0.5917219545342642, 0.1775127005185774, 0.1775127005185774, 0.05325264442858101 },
            { -0.3846173275264208, -0.3846173275264208, -0.1153826724735792, -0.1153826724735792, 0.3846173275264208, 0.3846173275264208, 0.1153826724735792, 0.1153826724735792 },
            { -0.1775127005185775, -0.5917219545342641, -0.05325264442858103, -0.1775127005185774, 0.1775127005185775, 0.5917219545342641, 0.05325264442858103, 0.1775127005185774 },
            { -0.0360848569231882, -0.7331497981296534, -0.01082522010747989, -0.2199401248396785, 0.0360848569231882, 0.7331497981296534, 0.01082522010747989, 0.2199401248396785 },
            { -0.476544961484666, -0.023455038515334, -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334, 0.476544961484666, 0.023455038515334 },
            { -0.3846173275264208, -0.1153826724735792, -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792, 0.3846173275264208, 0.1153826724735792 },
            { -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 },
            { -0.1153826724735793, -0.3846173275264207, -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207, 0.1153826724735793, 0.3846173275264207 },
            { -0.02345503851533404, -0.476544961484666, -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666, 0.02345503851533404, 0.476544961484666 },
            { -0.2199401248396786, -0.01082522010747988, -0.7331497981296534, -0.03608485692318812, 0.2199401248396786, 0.01082522010747988, 0.7331497981296534, 0.03608485692318812 },
            { -0.1775127005185775, -0.05325264442858103, -0.5917219545342641, -0.1775127005185774, 0.1775127005185775, 0.05325264442858103, 0.5917219545342641, 0.1775127005185774 },
            { -0.1153826724735793, -0.1153826724735793, -0.3846173275264207, -0.3846173275264207, 0.1153826724735793, 0.1153826724735793, 0.3846173275264207, 0.3846173275264207 },
            { -0.05325264442858105, -0.1775127005185775, -0.1775127005185775, -0.591721954534264, 0.05325264442858105, 0.1775127005185775, 0.1775127005185775, 0.591721954534264 },
            { -0.0108252201074799, -0.2199401248396786, -0.03608485692318819, -0.7331497981296533, 0.0108252201074799, 0.2199401248396786, 0.03608485692318819, 0.7331497981296533 },
            { -0.04470952170364488, -0.00220055532702321, -0.9083804012656872, -0.04470952170364479, 0.04470952170364488, 0.00220055532702321, 0.9083804012656872, 0.04470952170364479 },
            { -0.0360848569231882, -0.01082522010747989, -0.7331497981296534, -0.2199401248396785, 0.0360848569231882, 0.01082522010747989, 0.7331497981296534, 0.2199401248396785 },
            { -0.02345503851533404, -0.02345503851533404, -0.476544961484666, -0.476544961484666, 0.02345503851533404, 0.02345503851533404, 0.476544961484666, 0.476544961484666 },
            { -0.0108252201074799, -0.03608485692318819, -0.2199401248396786, -0.7331497981296533, 0.0108252201074799, 0.03608485692318819, 0.2199401248396786, 0.7331497981296533 },
            { -0.002200555327023214, -0.04470952170364487, -0.04470952170364487, -0.9083804012656871, 0.002200555327023214, 0.04470952170364487, 0.04470952170364487, 0.9083804012656871 },
            { -0.9083804012656873, -0.04470952170364479, -0.04470952170364479, -0.002200555327023205, 0.9083804012656873, 0.04470952170364479, 0.04470952170364479, 0.002200555327023205 },
            { -0.7331497981296535, -0.2199401248396786, -0.03608485692318813, -0.01082522010747987, 0.7331497981296535, 0.2199401248396786, 0.03608485692318813, 0.01082522010747987 },
            { -0.476544961484666, -0.476544961484666, -0.023455038515334, -0.023455038515334, 0.476544961484666, 0.476544961484666, 0.023455038515334, 0.023455038515334 },
            { -0.2199401248396786, -0.7331497981296534, -0.01082522010747988, -0.03608485692318812, 0.2199401248396786, 0.7331497981296534, 0.01082522010747988, 0.03608485692318812 },
            { -0.04470952170364488, -0.9083804012656872, -0.00220055532702321, -0.04470952170364479, 0.04470952170364488, 0.9083804012656872, 0.00220055532702321, 0.04470952170364479 },
            { -0.7331497981296535, -0.03608485692318813, -0.2199401248396786, -0.01082522010747987, 0.7331497981296535, 0.03608485692318813, 0.2199401248396786, 0.01082522010747987 },
            { -0.5917219545342642, -0.1775127005185774, -0.1775127005185774, -0.05325264442858101, 0.5917219545342642, 0.1775127005185774, 0.1775127005185774, 0.05325264442858101 },
            { -0.3846173275264208, -0.3846173275264208, -0.1153826724735792, -0.1153826724735792, 0.3846173275264208, 0.3846173275264208, 0.1153826724735792, 0.1153826724735792 },
            { -0.1775127005185775, -0.5917219545342641, -0.05325264442858103, -0.1775127005185774, 0.1775127005185775, 0.5917219545342641, 0.05325264442858103, 0.1775127005185774 },
            { -0.0360848569231882, -0.7331497981296534, -0.01082522010747989, -0.2199401248396785, 0.0360848569231882, 0.7331497981296534, 0.01082522010747989, 0.2199401248396785 },
            { -0.476544961484666, -0.023455038515334, -0.476544961484666, -0.023455038515334, 0.476544961484666, 0.023455038515334, 0.476544961484666, 0.023455038515334 },
            { -0.3846173275264208, -0.1153826724735792, -0.3846173275264208, -0.1153826724735792, 0.3846173275264208, 0.1153826724735792, 0.3846173275264208, 0.1153826724735792 },
            { -0.25, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 },
            { -0.1153826724735793, -0.3846173275264207, -0.1153826724735793, -0.3846173275264207, 0.1153826724735793, 0.3846173275264207, 0.1153826724735793, 0.3846173275264207 },
            { -0.02345503851533404, -0.476544961484666, -0.02345503851533404, -0.476544961484666, 0.02345503851533404, 0.476544961484666, 0.02345503851533404, 0.476544961484666 },
            { -0.2199401248396786, -0.01082522010747988, -0.7331497981296534, -0.03608485692318812, 0.2199401248396786, 0.01082522010747988, 0.7331497981296534, 0.03608485692318812 },
            { -0.1775127005185775, -0.05325264442858103, -0.5917219545342641, -0.1775127005185774, 0.1775127005185775, 0.05325264442858103, 0.5917219545342641, 0.1775127005185774 },
            { -0.1153826724735793, -0.1153826724735793, -0.3846173275264207, -0.3846173275264207, 0.1153826724735793, 0.1153826724735793, 0.3846173275264207, 0.3846173275264207 },
            { -0.05325264442858105, -0.1775127005185775, -0.1775127005185775, -0.591721954534264, 0.05325264442858105, 0.1775127005185775, 0.1775127005185775, 0.591721954534264 },
            { -0.0108252201074799, -0.2199401248396786, -0.03608485692318819, -0.7331497981296533, 0.0108252201074799, 0.2199401248396786, 0.03608485692318819, 0.7331497981296533 },
            { -0.04470952170364488, -0.00220055532702321, -0.9083804012656872, -0.04470952170364479, 0.04470952170364488, 0.00220055532702321, 0.9083804012656872, 0.04470952170364479 },
            { -0.0360848569231882, -0.01082522010747989, -0.7331497981296534, -0.2199401248396785, 0.0360848569231882, 0.01082522010747989, 0.7331497981296534, 0.2199401248396785 },
            { -0.02345503851533404, -0.02345503851533404, -0.476544961484666, -0.476544961484666, 0.02345503851533404, 0.02345503851533404, 0.476544961484666, 0.476544961484666 },
            { -0.0108252201074799, -0.03608485692318819, -0.2199401248396786, -0.7331497981296533, 0.0108252201074799, 0.03608485692318819, 0.2199401248396786, 0.7331497981296533 },
            { -0.002200555327023214, -0.04470952170364487, -0.04470952170364487, -0.9083804012656871, 0.002200555327023214, 0.04470952170364487, 0.04470952170364487, 0.9083804012656871 } } };
    alignas(32) static const double FE8_C0_D100_Q64[1][64][8] =
        { { { -0.8659570925834785, -0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.8659570925834785, 0.06461106321354769, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.6234718442658671, 0.3070963115311591, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.3070963115311591, 0.6234718442658671, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.06461106321354769, 0.8659570925834785, 0.004820780989426014, 0.06461106321354769 },
            { -0.6234718442658671, -0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.6234718442658671, 0.04651867752656094, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.4488872992916901, 0.221103222500738, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.221103222500738, 0.4488872992916901, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.04651867752656094, 0.6234718442658671, 0.02291316667641278, 0.3070963115311591 },
            { -0.3070963115311591, -0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.3070963115311591, 0.02291316667641278, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.221103222500738, 0.1089062557068338, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.1089062557068338, 0.221103222500738, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.02291316667641278, 0.3070963115311591, 0.04651867752656094, 0.6234718442658671 },
            { -0.06461106321354769, -0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.06461106321354769, 0.004820780989426014, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.04651867752656094, 0.02291316667641278, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.02291316667641278, 0.04651867752656094, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.004820780989426014, 0.06461106321354769, 0.06461106321354769, 0.8659570925834785 },
            { -0.8659570925834785, -0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.8659570925834785, 0.06461106321354769, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.6234718442658671, 0.3070963115311591, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.3070963115311591, 0.6234718442658671, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.06461106321354769, 0.8659570925834785, 0.004820780989426014, 0.06461106321354769 },
            { -0.6234718442658671, -0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.6234718442658671, 0.04651867752656094, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.4488872992916901, 0.221103222500738, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.221103222500738, 0.4488872992916901, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.04651867752656094, 0.6234718442658671, 0.02291316667641278, 0.3070963115311591 },
            { -0.3070963115311591, -0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.3070963115311591, 0.02291316667641278, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.221103222500738, 0.1089062557068338, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.1089062557068338, 0.221103222500738, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.02291316667641278, 0.3070963115311591, 0.04651867752656094, 0.6234718442658671 },
            { -0.06461106321354769, -0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.06461106321354769, 0.004820780989426014, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.04651867752656094, 0.02291316667641278, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.02291316667641278, 0.04651867752656094, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.004820780989426014, 0.06461106321354769, 0.06461106321354769, 0.8659570925834785 },
            { -0.8659570925834785, -0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.8659570925834785, 0.06461106321354769, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.6234718442658671, 0.3070963115311591, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.3070963115311591, 0.6234718442658671, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.06461106321354769, 0.8659570925834785, 0.004820780989426014, 0.06461106321354769 },
            { -0.6234718442658671, -0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.6234718442658671, 0.04651867752656094, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.4488872992916901, 0.221103222500738, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.221103222500738, 0.4488872992916901, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.04651867752656094, 0.6234718442658671, 0.02291316667641278, 0.3070963115311591 },
            { -0.3070963115311591, -0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.3070963115311591, 0.02291316667641278, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.221103222500738, 0.1089062557068338, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.1089062557068338, 0.221103222500738, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.02291316667641278, 0.3070963115311591, 0.04651867752656094, 0.6234718442658671 },
            { -0.06461106321354769, -0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.06461106321354769, 0.004820780989426014, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.04651867752656094, 0.02291316667641278, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.02291316667641278, 0.04651867752656094, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.004820780989426014, 0.06461106321354769, 0.06461106321354769, 0.8659570925834785 },
            { -0.8659570925834785, -0.06461106321354769, -0.06461106321354769, -0.004820780989426014, 0.8659570925834785, 0.06461106321354769, 0.06461106321354769, 0.004820780989426014 },
            { -0.6234718442658671, -0.3070963115311591, -0.04651867752656094, -0.02291316667641278, 0.6234718442658671, 0.3070963115311591, 0.04651867752656094, 0.02291316667641278 },
            { -0.3070963115311591, -0.6234718442658671, -0.02291316667641278, -0.04651867752656094, 0.3070963115311591, 0.6234718442658671, 0.02291316667641278, 0.04651867752656094 },
            { -0.06461106321354769, -0.8659570925834785, -0.004820780989426014, -0.06461106321354769, 0.06461106321354769, 0.8659570925834785, 0.004820780989426014, 0.06461106321354769 },
            { -0.6234718442658671, -0.04651867752656094, -0.3070963115311591, -0.02291316667641278, 0.6234718442658671, 0.04651867752656094, 0.3070963115311591, 0.02291316667641278 },
            { -0.4488872992916901, -0.221103222500738, -0.221103222500738, -0.1089062557068338, 0.4488872992916901, 0.221103222500738, 0.221103222500738, 0.1089062557068338 },
            { -0.221103222500738, -0.4488872992916901, -0.1089062557068338, -0.221103222500738, 0.221103222500738, 0.4488872992916901, 0.1089062557068338, 0.221103222500738 },
            { -0.04651867752656094, -0.6234718442658671, -0.02291316667641278, -0.3070963115311591, 0.04651867752656094, 0.6234718442658671, 0.02291316667641278, 0.3070963115311591 },
            { -0.3070963115311591, -0.02291316667641278, -0.6234718442658671, -0.04651867752656094, 0.3070963115311591, 0.02291316667641278, 0.6234718442658671, 0.04651867752656094 },
            { -0.221103222500738, -0.1089062557068338, -0.4488872992916901, -0.221103222500738, 0.221103222500738, 0.1089062557068338, 0.4488872992916901, 0.221103222500738 },
            { -0.1089062557068338, -0.221103222500738, -0.221103222500738, -0.4488872992916901, 0.1089062557068338, 0.221103222500738, 0.221103222500738, 0.4488872992916901 },
            { -0.02291316667641278, -0.3070963115311591, -0.04651867752656094, -0.6234718442658671, 0.02291316667641278, 0.3070963115311591, 0.04651867752656094, 0.6234718442658671 },
            { -0.06461106321354769, -0.004820780989426014, -0.8659570925834785, -0.06461106321354769, 0.06461106321354769, 0.004820780989426014, 0.8659570925834785, 0.06461106321354769 },
            { -0.04651867752656094, -0.02291316667641278, -0.6234718442658671, -0.3070963115311591, 0.04651867752656094, 0.02291316667641278, 0.6234718442658671, 0.3070963115311591 },
            { -0.02291316667641278, -0.04651867752656094, -0.3070963115311591, -0.6234718442658671, 0.02291316667641278, 0.04651867752656094, 0.3070963115311591, 0.6234718442658671 },
            { -0.004820780989426014, -0.06461106321354769, -0.06461106321354769, -0.8659570925834785, 0.004820780989426014, 0.06461106321354769, 0.06461106321354769, 0.8659570925834785 } } };
    alignas(32) double BF0[27] = {};
    alignas(32) double BF1[27] = {};
    alignas(32) double BF2[27] = {};
    alignas(32) double BF3[27] = {};
    alignas(32) double BF4[27] = {};
    alignas(32) double BF5[27] = {};
    for (int iq = 0; iq < 64; ++iq)
    {
        // Quadrature loop body setup (num_points=64)
        // Unstructured varying computations for num_points=64
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_c0 += w[0][ic] * FE12_C0_Q64[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_c1 += w[0][ic + 27] * FE12_C0_Q64[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_c2 += w[0][ic + 54] * FE12_C0_Q64[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w1_c0 += w[1][ic] * FE12_C0_Q64[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w1_c1 += w[1][ic + 27] * FE12_C0_Q64[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w1_c2 += w[1][ic + 54] * FE12_C0_Q64[0][iq][ic];
        const double J_c0 = coordinate_dofs[0] * FE8_C0_D100_Q64[0][iq][0] + coordinate_dofs[3] * FE8_C0_D100_Q64[0][iq][1] + coordinate_dofs[6] * FE8_C0_D100_Q64[0][iq][2] + coordinate_dofs[9] * FE8_C0_D100_Q64[0][iq][3] + coordinate_dofs[12] * FE8_C0_D100_Q64[0][iq][4] + coordinate_dofs[15] * FE8_C0_D100_Q64[0][iq][5] + coordinate_dofs[18] * FE8_C0_D100_Q64[0][iq][6] + coordinate_dofs[21] * FE8_C0_D100_Q64[0][iq][7];
        const double J_c4 = coordinate_dofs[1] * FE8_C0_D010_Q64[0][iq][0] + coordinate_dofs[4] * FE8_C0_D010_Q64[0][iq][1] + coordinate_dofs[7] * FE8_C0_D010_Q64[0][iq][2] + coordinate_dofs[10] * FE8_C0_D010_Q64[0][iq][3] + coordinate_dofs[13] * FE8_C0_D010_Q64[0][iq][4] + coordinate_dofs[16] * FE8_C0_D010_Q64[0][iq][5] + coordinate_dofs[19] * FE8_C0_D010_Q64[0][iq][6] + coordinate_dofs[22] * FE8_C0_D010_Q64[0][iq][7];
        const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q64[0][iq][0] + coordinate_dofs[5] * FE8_C0_D001_Q64[0][iq][1] + coordinate_dofs[8] * FE8_C0_D001_Q64[0][iq][2] + coordinate_dofs[11] * FE8_C0_D001_Q64[0][iq][3] + coordinate_dofs[14] * FE8_C0_D001_Q64[0][iq][4] + coordinate_dofs[17] * FE8_C0_D001_Q64[0][iq][5] + coordinate_dofs[20] * FE8_C0_D001_Q64[0][iq][6] + coordinate_dofs[23] * FE8_C0_D001_Q64[0][iq][7];
        const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q64[0][iq][0] + coordinate_dofs[4] * FE8_C0_D001_Q64[0][iq][1] + coordinate_dofs[7] * FE8_C0_D001_Q64[0][iq][2] + coordinate_dofs[10] * FE8_C0_D001_Q64[0][iq][3] + coordinate_dofs[13] * FE8_C0_D001_Q64[0][iq][4] + coordinate_dofs[16] * FE8_C0_D001_Q64[0][iq][5] + coordinate_dofs[19] * FE8_C0_D001_Q64[0][iq][6] + coordinate_dofs[22] * FE8_C0_D001_Q64[0][iq][7];
        const double J_c7 = coordinate_dofs[2] * FE8_C0_D010_Q64[0][iq][0] + coordinate_dofs[5] * FE8_C0_D010_Q64[0][iq][1] + coordinate_dofs[8] * FE8_C0_D010_Q64[0][iq][2] + coordinate_dofs[11] * FE8_C0_D010_Q64[0][iq][3] + coordinate_dofs[14] * FE8_C0_D010_Q64[0][iq][4] + coordinate_dofs[17] * FE8_C0_D010_Q64[0][iq][5] + coordinate_dofs[20] * FE8_C0_D010_Q64[0][iq][6] + coordinate_dofs[23] * FE8_C0_D010_Q64[0][iq][7];
        const double J_c1 = coordinate_dofs[0] * FE8_C0_D010_Q64[0][iq][0] + coordinate_dofs[3] * FE8_C0_D010_Q64[0][iq][1] + coordinate_dofs[6] * FE8_C0_D010_Q64[0][iq][2] + coordinate_dofs[9] * FE8_C0_D010_Q64[0][iq][3] + coordinate_dofs[12] * FE8_C0_D010_Q64[0][iq][4] + coordinate_dofs[15] * FE8_C0_D010_Q64[0][iq][5] + coordinate_dofs[18] * FE8_C0_D010_Q64[0][iq][6] + coordinate_dofs[21] * FE8_C0_D010_Q64[0][iq][7];
        const double J_c6 = coordinate_dofs[2] * FE8_C0_D100_Q64[0][iq][0] + coordinate_dofs[5] * FE8_C0_D100_Q64[0][iq][1] + coordinate_dofs[8] * FE8_C0_D100_Q64[0][iq][2] + coordinate_dofs[11] * FE8_C0_D100_Q64[0][iq][3] + coordinate_dofs[14] * FE8_C0_D100_Q64[0][iq][4] + coordinate_dofs[17] * FE8_C0_D100_Q64[0][iq][5] + coordinate_dofs[20] * FE8_C0_D100_Q64[0][iq][6] + coordinate_dofs[23] * FE8_C0_D100_Q64[0][iq][7];
        const double J_c3 = coordinate_dofs[1] * FE8_C0_D100_Q64[0][iq][0] + coordinate_dofs[4] * FE8_C0_D100_Q64[0][iq][1] + coordinate_dofs[7] * FE8_C0_D100_Q64[0][iq][2] + coordinate_dofs[10] * FE8_C0_D100_Q64[0][iq][3] + coordinate_dofs[13] * FE8_C0_D100_Q64[0][iq][4] + coordinate_dofs[16] * FE8_C0_D100_Q64[0][iq][5] + coordinate_dofs[19] * FE8_C0_D100_Q64[0][iq][6] + coordinate_dofs[22] * FE8_C0_D100_Q64[0][iq][7];
        const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q64[0][iq][0] + coordinate_dofs[3] * FE8_C0_D001_Q64[0][iq][1] + coordinate_dofs[6] * FE8_C0_D001_Q64[0][iq][2] + coordinate_dofs[9] * FE8_C0_D001_Q64[0][iq][3] + coordinate_dofs[12] * FE8_C0_D001_Q64[0][iq][4] + coordinate_dofs[15] * FE8_C0_D001_Q64[0][iq][5] + coordinate_dofs[18] * FE8_C0_D001_Q64[0][iq][6] + coordinate_dofs[21] * FE8_C0_D001_Q64[0][iq][7];
        alignas(32) double sv64[24];
        sv64[0] = -1 * w0_c0 / w[2][0];
        sv64[1] = -1 * w0_c1 / w[2][0];
        sv64[2] = -1 * w0_c2 / w[2][0];
        sv64[3] = -1 * (-1 * w1_c0) + -1 * sv64[0];
        sv64[4] = -1 * (-1 * w1_c1) + -1 * sv64[1];
        sv64[5] = -1 * (-1 * w1_c2) + -1 * sv64[2];
        sv64[6] = J_c4 * J_c8;
        sv64[7] = J_c5 * J_c7;
        sv64[8] = sv64[6] + -1 * sv64[7];
        sv64[9] = J_c0 * sv64[8];
        sv64[10] = J_c5 * J_c6;
        sv64[11] = J_c3 * J_c8;
        sv64[12] = sv64[10] + -1 * sv64[11];
        sv64[13] = J_c1 * sv64[12];
        sv64[14] = sv64[9] + sv64[13];
        sv64[15] = J_c3 * J_c7;
        sv64[16] = J_c4 * J_c6;
        sv64[17] = sv64[15] + -1 * sv64[16];
        sv64[18] = J_c2 * sv64[17];
        sv64[19] = sv64[14] + sv64[18];
        sv64[20] = std::abs(sv64[19]);
        sv64[21] = sv64[3] * sv64[20];
        sv64[22] = sv64[4] * sv64[20];
        sv64[23] = sv64[5] * sv64[20];
        const double fw0 = sv64[21] * weights64[iq];
        for (int i = 0; i < 27; ++i)
            BF0[i] += fw0 * FE12_C0_Q64[0][iq][i];
        const double fw1 = sv64[22] * weights64[iq];
        for (int i = 0; i < 27; ++i)
            BF1[i] += fw1 * FE12_C0_Q64[0][iq][i];
        const double fw2 = sv64[23] * weights64[iq];
        for (int i = 0; i < 27; ++i)
            BF2[i] += fw2 * FE12_C0_Q64[0][iq][i];
    }
    for (int iq = 0; iq < 125; ++iq)
    {
        // Quadrature loop body setup (num_points=125)
        // Unstructured varying computations for num_points=125
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_c0 += w[0][ic] * FE12_C0_Q125[0][iq][ic];
        double w0_d0_c0 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_d0_c0 += w[0][ic] * FE12_C0_D100_Q125[0][iq][ic];
        const double J_c4 = coordinate_dofs[1] * FE8_C0_D010_Q125[0][iq][0] + coordinate_dofs[4] * FE8_C0_D010_Q125[0][iq][1] + coordinate_dofs[7] * FE8_C0_D010_Q125[0][iq][2] + coordinate_dofs[10] * FE8_C0_D010_Q125[0][iq][3] + coordinate_dofs[13] * FE8_C0_D010_Q125[0][iq][4] + coordinate_dofs[16] * FE8_C0_D010_Q125[0][iq][5] + coordinate_dofs[19] * FE8_C0_D010_Q125[0][iq][6] + coordinate_dofs[22] * FE8_C0_D010_Q125[0][iq][7];
        const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q125[0][iq][0] + coordinate_dofs[5] * FE8_C0_D001_Q125[0][iq][1] + coordinate_dofs[8] * FE8_C0_D001_Q125[0][iq][2] + coordinate_dofs[11] * FE8_C0_D001_Q125[0][iq][3] + coordinate_dofs[14] * FE8_C0_D001_Q125[0][iq][4] + coordinate_dofs[17] * FE8_C0_D001_Q125[0][iq][5] + coordinate_dofs[20] * FE8_C0_D001_Q125[0][iq][6] + coordinate_dofs[23] * FE8_C0_D001_Q125[0][iq][7];
        const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q125[0][iq][0] + coordinate_dofs[4] * FE8_C0_D001_Q125[0][iq][1] + coordinate_dofs[7] * FE8_C0_D001_Q125[0][iq][2] + coordinate_dofs[10] * FE8_C0_D001_Q125[0][iq][3] + coordinate_dofs[13] * FE8_C0_D001_Q125[0][iq][4] + coordinate_dofs[16] * FE8_C0_D001_Q125[0][iq][5] + coordinate_dofs[19] * FE8_C0_D001_Q125[0][iq][6] + coordinate_dofs[22] * FE8_C0_D001_Q125[0][iq][7];
        const double J_c7 = coordinate_dofs[2] * FE8_C0_D010_Q125[0][iq][0] + coordinate_dofs[5] * FE8_C0_D010_Q125[0][iq][1] + coordinate_dofs[8] * FE8_C0_D010_Q125[0][iq][2] + coordinate_dofs[11] * FE8_C0_D010_Q125[0][iq][3] + coordinate_dofs[14] * FE8_C0_D010_Q125[0][iq][4] + coordinate_dofs[17] * FE8_C0_D010_Q125[0][iq][5] + coordinate_dofs[20] * FE8_C0_D010_Q125[0][iq][6] + coordinate_dofs[23] * FE8_C0_D010_Q125[0][iq][7];
        const double J_c0 = coordinate_dofs[0] * FE8_C0_D100_Q125[0][iq][0] + coordinate_dofs[3] * FE8_C0_D100_Q125[0][iq][1] + coordinate_dofs[6] * FE8_C0_D100_Q125[0][iq][2] + coordinate_dofs[9] * FE8_C0_D100_Q125[0][iq][3] + coordinate_dofs[12] * FE8_C0_D100_Q125[0][iq][4] + coordinate_dofs[15] * FE8_C0_D100_Q125[0][iq][5] + coordinate_dofs[18] * FE8_C0_D100_Q125[0][iq][6] + coordinate_dofs[21] * FE8_C0_D100_Q125[0][iq][7];
        const double J_c1 = coordinate_dofs[0] * FE8_C0_D010_Q125[0][iq][0] + coordinate_dofs[3] * FE8_C0_D010_Q125[0][iq][1] + coordinate_dofs[6] * FE8_C0_D010_Q125[0][iq][2] + coordinate_dofs[9] * FE8_C0_D010_Q125[0][iq][3] + coordinate_dofs[12] * FE8_C0_D010_Q125[0][iq][4] + coordinate_dofs[15] * FE8_C0_D010_Q125[0][iq][5] + coordinate_dofs[18] * FE8_C0_D010_Q125[0][iq][6] + coordinate_dofs[21] * FE8_C0_D010_Q125[0][iq][7];
        const double J_c6 = coordinate_dofs[2] * FE8_C0_D100_Q125[0][iq][0] + coordinate_dofs[5] * FE8_C0_D100_Q125[0][iq][1] + coordinate_dofs[8] * FE8_C0_D100_Q125[0][iq][2] + coordinate_dofs[11] * FE8_C0_D100_Q125[0][iq][3] + coordinate_dofs[14] * FE8_C0_D100_Q125[0][iq][4] + coordinate_dofs[17] * FE8_C0_D100_Q125[0][iq][5] + coordinate_dofs[20] * FE8_C0_D100_Q125[0][iq][6] + coordinate_dofs[23] * FE8_C0_D100_Q125[0][iq][7];
        const double J_c3 = coordinate_dofs[1] * FE8_C0_D100_Q125[0][iq][0] + coordinate_dofs[4] * FE8_C0_D100_Q125[0][iq][1] + coordinate_dofs[7] * FE8_C0_D100_Q125[0][iq][2] + coordinate_dofs[10] * FE8_C0_D100_Q125[0][iq][3] + coordinate_dofs[13] * FE8_C0_D100_Q125[0][iq][4] + coordinate_dofs[16] * FE8_C0_D100_Q125[0][iq][5] + coordinate_dofs[19] * FE8_C0_D100_Q125[0][iq][6] + coordinate_dofs[22] * FE8_C0_D100_Q125[0][iq][7];
        const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q125[0][iq][0] + coordinate_dofs[3] * FE8_C0_D001_Q125[0][iq][1] + coordinate_dofs[6] * FE8_C0_D001_Q125[0][iq][2] + coordinate_dofs[9] * FE8_C0_D001_Q125[0][iq][3] + coordinate_dofs[12] * FE8_C0_D001_Q125[0][iq][4] + coordinate_dofs[15] * FE8_C0_D001_Q125[0][iq][5] + coordinate_dofs[18] * FE8_C0_D001_Q125[0][iq][6] + coordinate_dofs[21] * FE8_C0_D001_Q125[0][iq][7];
        double w0_d1_c0 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_d1_c0 += w[0][ic] * FE12_C0_D010_Q125[0][iq][ic];
        double w0_d2_c0 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_d2_c0 += w[0][ic] * FE12_C0_D001_Q125[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_c1 += w[0][ic + 27] * FE12_C0_Q125[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_c2 += w[0][ic + 54] * FE12_C0_Q125[0][iq][ic];
        double w0_d0_c1 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_d0_c1 += w[0][ic + 27] * FE12_C0_D100_Q125[0][iq][ic];
        double w0_d1_c1 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_d1_c1 += w[0][ic + 27] * FE12_C0_D010_Q125[0][iq][ic];
        double w0_d2_c1 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_d2_c1 += w[0][ic + 27] * FE12_C0_D001_Q125[0][iq][ic];
        double w0_d0_c2 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_d0_c2 += w[0][ic + 54] * FE12_C0_D100_Q125[0][iq][ic];
        double w0_d1_c2 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_d1_c2 += w[0][ic + 54] * FE12_C0_D010_Q125[0][iq][ic];
        double w0_d2_c2 = 0.0;
        for (int ic = 0; ic < 27; ++ic)
            w0_d2_c2 += w[0][ic + 54] * FE12_C0_D001_Q125[0][iq][ic];
        alignas(32) double sv125[107];
        sv125[0] = J_c4 * J_c8;
        sv125[1] = J_c5 * J_c7;
        sv125[2] = sv125[0] + -1 * sv125[1];
        sv125[3] = J_c0 * sv125[2];
        sv125[4] = J_c5 * J_c6;
        sv125[5] = J_c3 * J_c8;
        sv125[6] = sv125[4] + -1 * sv125[5];
        sv125[7] = J_c1 * sv125[6];
        sv125[8] = sv125[3] + sv125[7];
        sv125[9] = J_c3 * J_c7;
        sv125[10] = J_c4 * J_c6;
        sv125[11] = sv125[9] + -1 * sv125[10];
        sv125[12] = J_c2 * sv125[11];
        sv125[13] = sv125[8] + sv125[12];
        sv125[14] = sv125[2] / sv125[13];
        sv125[15] = w0_d0_c0 * sv125[14];
        sv125[16] = J_c3 * (-1 * J_c8);
        sv125[17] = sv125[4] + sv125[16];
        sv125[18] = sv125[17] / sv125[13];
        sv125[19] = w0_d1_c0 * sv125[18];
        sv125[20] = sv125[15] + sv125[19];
        sv125[21] = sv125[11] / sv125[13];
        sv125[22] = w0_d2_c0 * sv125[21];
        sv125[23] = sv125[20] + sv125[22];
        sv125[24] = w0_c0 * sv125[23];
        sv125[25] = J_c2 * J_c7;
        sv125[26] = J_c8 * (-1 * J_c1);
        sv125[27] = sv125[25] + sv125[26];
        sv125[28] = sv125[27] / sv125[13];
        sv125[29] = w0_d0_c0 * sv125[28];
        sv125[30] = J_c0 * J_c8;
        sv125[31] = J_c6 * (-1 * J_c2);
        sv125[32] = sv125[30] + sv125[31];
        sv125[33] = sv125[32] / sv125[13];
        sv125[34] = w0_d1_c0 * sv125[33];
        sv125[35] = sv125[29] + sv125[34];
        sv125[36] = J_c1 * J_c6;
        sv125[37] = J_c0 * J_c7;
        sv125[38] = sv125[36] + -1 * sv125[37];
        sv125[39] = sv125[38] / sv125[13];
        sv125[40] = w0_d2_c0 * sv125[39];
        sv125[41] = sv125[35] + sv125[40];
        sv125[42] = w0_c1 * sv125[41];
        sv125[43] = sv125[24] + sv125[42];
        sv125[44] = J_c1 * J_c5;
        sv125[45] = J_c2 * J_c4;
        sv125[46] = sv125[44] + -1 * sv125[45];
        sv125[47] = sv125[46] / sv125[13];
        sv125[48] = w0_d0_c0 * sv125[47];
        sv125[49] = J_c2 * J_c3;
        sv125[50] = J_c0 * J_c5;
        sv125[51] = sv125[49] + -1 * sv125[50];
        sv125[52] = sv125[51] / sv125[13];
        sv125[53] = w0_d1_c0 * sv125[52];
        sv125[54] = sv125[48] + sv125[53];
        sv125[55] = J_c0 * J_c4;
        sv125[56] = J_c1 * J_c3;
        sv125[57] = sv125[55] + -1 * sv125[56];
        sv125[58] = sv125[57] / sv125[13];
        sv125[59] = w0_d2_c0 * sv125[58];
        sv125[60] = sv125[54] + sv125[59];
        sv125[61] = w0_c2 * sv125[60];
        sv125[62] = sv125[43] + sv125[61];
        sv125[63] = w0_d0_c1 * sv125[14];
        sv125[64] = w0_d1_c1 * sv125[18];
        sv125[65] = sv125[63] + sv125[64];
        sv125[66] = w0_d2_c1 * sv125[21];
        sv125[67] = sv125[65] + sv125[66];
        sv125[68] = w0_c0 * sv125[67];
        sv125[69] = w0_d0_c1 * sv125[28];
        sv125[70] = w0_d1_c1 * sv125[33];
        sv125[71] = sv125[69] + sv125[70];
        sv125[72] = w0_d2_c1 * sv125[39];
        sv125[73] = sv125[71] + sv125[72];
        sv125[74] = w0_c1 * sv125[73];
        sv125[75] = sv125[68] + sv125[74];
        sv125[76] = w0_d0_c1 * sv125[47];
        sv125[77] = w0_d1_c1 * sv125[52];
        sv125[78] = sv125[76] + sv125[77];
        sv125[79] = w0_d2_c1 * sv125[58];
        sv125[80] = sv125[78] + sv125[79];
        sv125[81] = w0_c2 * sv125[80];
        sv125[82] = sv125[75] + sv125[81];
        sv125[83] = w0_d0_c2 * sv125[14];
        sv125[84] = w0_d1_c2 * sv125[18];
        sv125[85] = sv125[83] + sv125[84];
        sv125[86] = w0_d2_c2 * sv125[21];
        sv125[87] = sv125[85] + sv125[86];
        sv125[88] = w0_c0 * sv125[87];
        sv125[89] = w0_d0_c2 * sv125[28];
        sv125[90] = w0_d1_c2 * sv125[33];
        sv125[91] = sv125[89] + sv125[90];
        sv125[92] = w0_d2_c2 * sv125[39];
        sv125[93] = sv125[91] + sv125[92];
        sv125[94] = w0_c1 * sv125[93];
        sv125[95] = sv125[88] + sv125[94];
        sv125[96] = w0_d0_c2 * sv125[47];
        sv125[97] = w0_d1_c2 * sv125[52];
        sv125[98] = sv125[96] + sv125[97];
        sv125[99] = w0_d2_c2 * sv125[58];
        sv125[100] = sv125[98] + sv125[99];
        sv125[101] = w0_c2 * sv125[100];
        sv125[102] = sv125[95] + sv125[101];
        sv125[103] = std::abs(sv125[13]);
        sv125[104] = -1 * sv125[62] * sv125[103];
        sv125[105] = -1 * sv125[82] * sv125[103];
        sv125[106] = -1 * sv125[102] * sv125[103];
        const double fw3 = sv125[104] * weights125[iq];
        for (int i = 0; i < 27; ++i)
            BF3[i] += fw3 * FE12_C0_Q125[0][iq][i];
        const double fw4 = sv125[105] * weights125[iq];
        for (int i = 0; i < 27; ++i)
            BF4[i] += fw4 * FE12_C0_Q125[0][iq][i];
        const double fw5 = sv125[106] * weights125[iq];
        for (int i = 0; i < 27; ++i)
            BF5[i] += fw5 * FE12_C0_Q125[0][iq][i];
    }
    std::fill_n(A, 89, 0.0);
    for (int i = 0; i < 27; ++i)
        A[i] += BF0[i] + BF3[i];
    for (int i = 0; i < 27; ++i)
        A[i + 27] += BF1[i] + BF4[i];
    for (int i = 0; i < 27; ++i)
        A[i + 54] += BF2[i] + BF5[i];
  }

};


class navierstokes_form_0: public ufc::form
{
public:

  navierstokes_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~navierstokes_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "6f8fcd424a8a0837359ad29bdbad6d383ff98286265c113f43493c010c6494112e45fc15951c44eb0434b47157ff2e07b828134b3ce26e67e1e0343e97cc0890";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 1;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new navierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new navierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new navierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_finite_element_4();
    case 1:
        return new navierstokes_finite_element_4();
    case 2:
        return new navierstokes_finite_element_5();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_dofmap_4();
    case 1:
        return new navierstokes_dofmap_4();
    case 2:
        return new navierstokes_dofmap_5();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new navierstokes_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class navierstokes_form_1: public ufc::form
{
public:

  navierstokes_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~navierstokes_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "b71d1a6b88912e972414940785b23bf3ca7ea54e62c3683f381d624618d772502037e50833d8d516f5be51ebc34143fd000999bdc4e262e733bfe47baedec014";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 3;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 3)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new navierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new navierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new navierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_finite_element_4();
    case 1:
        return new navierstokes_finite_element_3();
    case 2:
        return new navierstokes_finite_element_3();
    case 3:
        return new navierstokes_finite_element_5();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_dofmap_4();
    case 1:
        return new navierstokes_dofmap_3();
    case 2:
        return new navierstokes_dofmap_3();
    case 3:
        return new navierstokes_dofmap_5();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new navierstokes_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace NavierStokes
{

class CoefficientSpace_f: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_f(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_f(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_k: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_un: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_un(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_un(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_k Form_a_FunctionSpace_2;

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 1), k(*this, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const navierstokes_form_0>();
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k):
    dolfin::Form(2, 1), k(*this, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->k = k;

    _ufc_form = std::make_shared<const navierstokes_form_0>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_k;

  // Coefficients
  dolfin::CoefficientAssigner k;
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), k(*this, 0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k):
    dolfin::MultiMeshForm(V1, V0), k(*this, 0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->k = k;

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_k;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner k;
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_un Form_L_FunctionSpace_1;

typedef CoefficientSpace_f Form_L_FunctionSpace_2;

typedef CoefficientSpace_k Form_L_FunctionSpace_3;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 3), un(*this, 0), f(*this, 1), k(*this, 2)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const navierstokes_form_1>();
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> un, std::shared_ptr<const dolfin::GenericFunction> f, std::shared_ptr<const dolfin::GenericFunction> k):
    dolfin::Form(1, 3), un(*this, 0), f(*this, 1), k(*this, 2)
  {
    _function_spaces[0] = V0;

    this->un = un;
    this->f = f;
    this->k = k;

    _ufc_form = std::make_shared<const navierstokes_form_1>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "un")
      return 0;
    else if (name == "f")
      return 1;
    else if (name == "k")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "un";
    case 1:
      return "f";
    case 2:
      return "k";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_un;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_f;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_k;

  // Coefficients
  dolfin::CoefficientAssigner un;
  dolfin::CoefficientAssigner f;
  dolfin::CoefficientAssigner k;
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), un(*this, 0), f(*this, 1), k(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> un, std::shared_ptr<const dolfin::GenericFunction> f, std::shared_ptr<const dolfin::GenericFunction> k):
    dolfin::MultiMeshForm(V0), un(*this, 0), f(*this, 1), k(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->un = un;
    this->f = f;
    this->k = k;

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "un")
      return 0;
    else if (name == "f")
      return 1;
    else if (name == "k")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "un";
    case 1:
      return "f";
    case 2:
      return "k";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_un;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_f;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_k;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner un;
  dolfin::MultiMeshCoefficientAssigner f;
  dolfin::MultiMeshCoefficientAssigner k;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef MultiMeshForm_a MultiMeshBilinearForm;
typedef Form_a JacobianForm;
typedef MultiMeshForm_a MultiMeshJacobianForm;
typedef Form_L LinearForm;
typedef MultiMeshForm_L MultiMeshLinearForm;
typedef Form_L ResidualForm;
typedef MultiMeshForm_L MultiMeshResidualForm;
typedef Form_a::TestSpace FunctionSpace;
typedef Form_a::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
