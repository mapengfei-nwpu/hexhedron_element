// This code conforms with the UFC specification version 2018.1.0
// and was automatically generated by FFC version 2019.1.0.post0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __NAVIERSTOKES_H
#define __NAVIERSTOKES_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class navierstokes_finite_element_0: public ufc::finite_element
{
public:

  navierstokes_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 3] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 4 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[4] = {};
    const std::size_t num_components[4] = { 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 4; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[4 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 4 * num_derivatives, 0.0);
    const std::size_t reference_offsets[4] = {};
    const std::size_t physical_offsets[4] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 4; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[4 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[4 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[4];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[4];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 4, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes_finite_element_0();
  }

};


class navierstokes_finite_element_1: public ufc::finite_element
{
public:

  navierstokes_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 12 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 3, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[36];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[36];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[9] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[36] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_finite_element_0();
    case 1:
        return new navierstokes_finite_element_0();
    case 2:
        return new navierstokes_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes_finite_element_1();
  }

};


class navierstokes_finite_element_2: public ufc::finite_element
{
public:

  navierstokes_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 2)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 10;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][10] = { { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 } };
    static const double coefficients1[1][10] = { { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 } };
    static const double coefficients2[1][10] = { { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 } };
    static const double coefficients3[1][10] = { { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 } };
    static const double coefficients4[1][10] = { { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 } };
    static const double coefficients5[1][10] = { { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 } };
    static const double coefficients6[1][10] = { { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 } };
    static const double coefficients7[1][10] = { { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 } };
    static const double coefficients8[1][10] = { { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 } };
    static const double coefficients9[1][10] = { { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 } };
    for (std::size_t k = 0; k < num_points * 10; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[10] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues2[4] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp2_2 * basisvalues2[0];
        basisvalues2[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues2[0];
        basisvalues2[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues2[1];
        const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_2 = 0.5 * (1.0 - Y[2]);
        const double tmp5_2 = tmp4_2 * tmp4_2;
        basisvalues2[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues2[2] - 0.5555555555555556 * tmp5_2 * basisvalues2[0];
        basisvalues2[3] = (2.0 * Y[2] + 1.0) * basisvalues2[0];
        basisvalues2[8] = (3.0 * Y[2] + 2.0) * basisvalues2[2];
        basisvalues2[6] = (3.0 * Y[2] + 2.0) * basisvalues2[1];
        basisvalues2[9] = (0.3125 + 1.875 * Y[2]) * basisvalues2[3] - 0.5625 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.75);
        basisvalues2[3] *= std::sqrt(1.25);
        basisvalues2[9] *= std::sqrt(1.75);
        basisvalues2[2] *= std::sqrt(2.5);
        basisvalues2[8] *= std::sqrt(3.5);
        basisvalues2[7] *= std::sqrt(5.25);
        basisvalues2[1] *= std::sqrt(7.5);
        basisvalues2[6] *= std::sqrt(10.5);
        basisvalues2[5] *= std::sqrt(15.75);
        basisvalues2[4] *= std::sqrt(26.25);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 6] += coefficients6[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 7] += coefficients7[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 8] += coefficients8[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[10 * ip + 9] += coefficients9[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 10 * num_derivatives, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][10][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][10] = { { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 } };
    static const double coefficients1[1][10] = { { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 } };
    static const double coefficients2[1][10] = { { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 } };
    static const double coefficients3[1][10] = { { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 } };
    static const double coefficients4[1][10] = { { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 } };
    static const double coefficients5[1][10] = { { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 } };
    static const double coefficients6[1][10] = { { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 } };
    static const double coefficients7[1][10] = { { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 } };
    static const double coefficients8[1][10] = { { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 } };
    static const double coefficients9[1][10] = { { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 } };
    const std::size_t reference_offset[10] = {};
    const std::size_t num_components[10] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[10] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues2[4] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp2_2 * basisvalues2[0];
        basisvalues2[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues2[0];
        basisvalues2[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues2[1];
        const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_2 = 0.5 * (1.0 - Y[2]);
        const double tmp5_2 = tmp4_2 * tmp4_2;
        basisvalues2[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues2[2] - 0.5555555555555556 * tmp5_2 * basisvalues2[0];
        basisvalues2[3] = (2.0 * Y[2] + 1.0) * basisvalues2[0];
        basisvalues2[8] = (3.0 * Y[2] + 2.0) * basisvalues2[2];
        basisvalues2[6] = (3.0 * Y[2] + 2.0) * basisvalues2[1];
        basisvalues2[9] = (0.3125 + 1.875 * Y[2]) * basisvalues2[3] - 0.5625 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.75);
        basisvalues2[3] *= std::sqrt(1.25);
        basisvalues2[9] *= std::sqrt(1.75);
        basisvalues2[2] *= std::sqrt(2.5);
        basisvalues2[8] *= std::sqrt(3.5);
        basisvalues2[7] *= std::sqrt(5.25);
        basisvalues2[1] *= std::sqrt(7.5);
        basisvalues2[6] *= std::sqrt(10.5);
        basisvalues2[5] *= std::sqrt(15.75);
        basisvalues2[4] *= std::sqrt(26.25);
        // Loop over all dofs
        for (std::size_t i = 0; i < 10; ++i)
        {
            double derivatives[9] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[10 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    std::fill_n(values, num_points * 10 * num_derivatives, 0.0);
    const std::size_t reference_offsets[10] = {};
    const std::size_t physical_offsets[10] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[9][9];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 10; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[10 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[10 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[10];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[10];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 10; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    // Declare transformation matrix
    double transform[9][9] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 10, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[9] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 10; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 7] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 8 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 8 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 9] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[30] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0 };
    std::copy_n(dof_X, 30, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes_finite_element_2();
  }

};


class navierstokes_finite_element_3: public ufc::finite_element
{
public:

  navierstokes_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 2), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 30;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][10] = { { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 } };
    static const double coefficients1[1][10] = { { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 } };
    static const double coefficients2[1][10] = { { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 } };
    static const double coefficients3[1][10] = { { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 } };
    static const double coefficients4[1][10] = { { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 } };
    static const double coefficients5[1][10] = { { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 } };
    static const double coefficients6[1][10] = { { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 } };
    static const double coefficients7[1][10] = { { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 } };
    static const double coefficients8[1][10] = { { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 } };
    static const double coefficients9[1][10] = { { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 } };
    for (std::size_t k = 0; k < num_points * 30 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[10] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues2[4] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp2_2 * basisvalues2[0];
        basisvalues2[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues2[0];
        basisvalues2[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues2[1];
        const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_2 = 0.5 * (1.0 - Y[2]);
        const double tmp5_2 = tmp4_2 * tmp4_2;
        basisvalues2[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues2[2] - 0.5555555555555556 * tmp5_2 * basisvalues2[0];
        basisvalues2[3] = (2.0 * Y[2] + 1.0) * basisvalues2[0];
        basisvalues2[8] = (3.0 * Y[2] + 2.0) * basisvalues2[2];
        basisvalues2[6] = (3.0 * Y[2] + 2.0) * basisvalues2[1];
        basisvalues2[9] = (0.3125 + 1.875 * Y[2]) * basisvalues2[3] - 0.5625 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.75);
        basisvalues2[3] *= std::sqrt(1.25);
        basisvalues2[9] *= std::sqrt(1.75);
        basisvalues2[2] *= std::sqrt(2.5);
        basisvalues2[8] *= std::sqrt(3.5);
        basisvalues2[7] *= std::sqrt(5.25);
        basisvalues2[1] *= std::sqrt(7.5);
        basisvalues2[6] *= std::sqrt(10.5);
        basisvalues2[5] *= std::sqrt(15.75);
        basisvalues2[4] *= std::sqrt(26.25);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 6] += coefficients6[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 7] += coefficients7[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 8] += coefficients8[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 9] += coefficients9[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 10 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 11 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 12 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 13 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 14 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 15 + 1] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 16 + 1] += coefficients6[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 17 + 1] += coefficients7[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 18 + 1] += coefficients8[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 19 + 1] += coefficients9[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 20 + 2] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 21 + 2] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 22 + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 23 + 2] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 24 + 2] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 25 + 2] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 26 + 2] += coefficients6[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 27 + 2] += coefficients7[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 28 + 2] += coefficients8[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[30 * 3 * ip + 3 * 29 + 2] += coefficients9[0][r] * basisvalues2[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 30 * num_derivatives * 3, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][10][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][10] = { { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 } };
    static const double coefficients1[1][10] = { { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 } };
    static const double coefficients2[1][10] = { { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 } };
    static const double coefficients3[1][10] = { { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 } };
    static const double coefficients4[1][10] = { { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 } };
    static const double coefficients5[1][10] = { { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 } };
    static const double coefficients6[1][10] = { { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 } };
    static const double coefficients7[1][10] = { { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 } };
    static const double coefficients8[1][10] = { { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 } };
    static const double coefficients9[1][10] = { { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 } };
    const std::size_t reference_offset[30] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    const std::size_t num_components[30] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[10] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues2[4] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp2_2 * basisvalues2[0];
        basisvalues2[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues2[0];
        basisvalues2[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues2[1];
        const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_2 = 0.5 * (1.0 - Y[2]);
        const double tmp5_2 = tmp4_2 * tmp4_2;
        basisvalues2[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues2[2] - 0.5555555555555556 * tmp5_2 * basisvalues2[0];
        basisvalues2[3] = (2.0 * Y[2] + 1.0) * basisvalues2[0];
        basisvalues2[8] = (3.0 * Y[2] + 2.0) * basisvalues2[2];
        basisvalues2[6] = (3.0 * Y[2] + 2.0) * basisvalues2[1];
        basisvalues2[9] = (0.3125 + 1.875 * Y[2]) * basisvalues2[3] - 0.5625 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.75);
        basisvalues2[3] *= std::sqrt(1.25);
        basisvalues2[9] *= std::sqrt(1.75);
        basisvalues2[2] *= std::sqrt(2.5);
        basisvalues2[8] *= std::sqrt(3.5);
        basisvalues2[7] *= std::sqrt(5.25);
        basisvalues2[1] *= std::sqrt(7.5);
        basisvalues2[6] *= std::sqrt(10.5);
        basisvalues2[5] *= std::sqrt(15.75);
        basisvalues2[4] *= std::sqrt(26.25);
        // Loop over all dofs
        for (std::size_t i = 0; i < 30; ++i)
        {
            double derivatives[9] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 20:
                // Compute reference derivatives for dof 20.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 21:
                // Compute reference derivatives for dof 21.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 22:
                // Compute reference derivatives for dof 22.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 23:
                // Compute reference derivatives for dof 23.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 24:
                // Compute reference derivatives for dof 24.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 25:
                // Compute reference derivatives for dof 25.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 26:
                // Compute reference derivatives for dof 26.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 27:
                // Compute reference derivatives for dof 27.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 28:
                // Compute reference derivatives for dof 28.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 29:
                // Compute reference derivatives for dof 29.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[30 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    std::fill_n(values, num_points * 30 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[30] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    const std::size_t physical_offsets[30] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[9][9];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 30; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[30 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[30 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[90];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[90];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 30; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    // Declare transformation matrix
    double transform[9][9] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 20:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 21:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 22:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 23:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 24:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 25:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 26:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 27:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 28:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 29:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 30, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[27] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 30; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 14:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 15:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 16:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 17:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 18:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 19:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 20:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 21:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 22:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 23:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 24:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 25:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 26:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 27:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 28:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 29:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[12] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[13] = vals[1];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[14] = vals[1];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[15] = vals[1];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[16] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[17] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[18] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[19] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[20] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[21] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[22] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[23] = vals[2];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[24] = vals[2];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[25] = vals[2];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[26] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[27] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[28] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[29] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[10];
    vertex_values[4] = dof_values[11];
    vertex_values[7] = dof_values[12];
    vertex_values[10] = dof_values[13];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[20];
    vertex_values[5] = dof_values[21];
    vertex_values[8] = dof_values[22];
    vertex_values[11] = dof_values[23];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 7] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 8 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 8 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 9] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[0];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 11] = coordinate_dofs[3];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 12] = coordinate_dofs[6];
    dof_coordinates[3 * 12 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 12 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 13] = coordinate_dofs[9];
    dof_coordinates[3 * 13 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 13 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 14] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 14 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 14 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 15] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 15 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 15 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 16] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 16 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 16 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 17] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 17 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 17 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 18] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 18 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 18 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 19] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 19 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 19 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 20] = coordinate_dofs[0];
    dof_coordinates[3 * 20 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 20 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 21] = coordinate_dofs[3];
    dof_coordinates[3 * 21 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 21 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 22] = coordinate_dofs[6];
    dof_coordinates[3 * 22 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 22 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 23] = coordinate_dofs[9];
    dof_coordinates[3 * 23 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 23 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 24] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 24 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 24 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 25] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 25 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 25 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 26] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 26 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 26 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 27] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 27 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 27 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 28] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 28 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 28 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 29] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 29 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 29 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[90] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0 };
    std::copy_n(dof_X, 90, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_finite_element_2();
    case 1:
        return new navierstokes_finite_element_2();
    case 2:
        return new navierstokes_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes_finite_element_3();
  }

};


class navierstokes_finite_element_4: public ufc::finite_element
{
public:

  navierstokes_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(VectorElement(FiniteElement('Lagrange', tetrahedron, 2), dim=3), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 34;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 4 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 4;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 4 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 4;
  }

  std::size_t degree() const final override
  {
    return 2;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][10] = { { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 } };
    static const double coefficients1[1][10] = { { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 } };
    static const double coefficients2[1][10] = { { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 } };
    static const double coefficients3[1][10] = { { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 } };
    static const double coefficients4[1][10] = { { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 } };
    static const double coefficients5[1][10] = { { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 } };
    static const double coefficients6[1][10] = { { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 } };
    static const double coefficients7[1][10] = { { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 } };
    static const double coefficients8[1][10] = { { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 } };
    static const double coefficients9[1][10] = { { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 } };
    static const double coefficients30[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients31[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients32[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients33[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 34 * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[10] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues2[4] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp2_2 * basisvalues2[0];
        basisvalues2[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues2[0];
        basisvalues2[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues2[1];
        const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_2 = 0.5 * (1.0 - Y[2]);
        const double tmp5_2 = tmp4_2 * tmp4_2;
        basisvalues2[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues2[2] - 0.5555555555555556 * tmp5_2 * basisvalues2[0];
        basisvalues2[3] = (2.0 * Y[2] + 1.0) * basisvalues2[0];
        basisvalues2[8] = (3.0 * Y[2] + 2.0) * basisvalues2[2];
        basisvalues2[6] = (3.0 * Y[2] + 2.0) * basisvalues2[1];
        basisvalues2[9] = (0.3125 + 1.875 * Y[2]) * basisvalues2[3] - 0.5625 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.75);
        basisvalues2[3] *= std::sqrt(1.25);
        basisvalues2[9] *= std::sqrt(1.75);
        basisvalues2[2] *= std::sqrt(2.5);
        basisvalues2[8] *= std::sqrt(3.5);
        basisvalues2[7] *= std::sqrt(5.25);
        basisvalues2[1] *= std::sqrt(7.5);
        basisvalues2[6] *= std::sqrt(10.5);
        basisvalues2[5] *= std::sqrt(15.75);
        basisvalues2[4] *= std::sqrt(26.25);
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 3] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 4] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 5] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 6] += coefficients6[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 7] += coefficients7[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 8] += coefficients8[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 9] += coefficients9[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 10 + 1] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 11 + 1] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 12 + 1] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 13 + 1] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 14 + 1] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 15 + 1] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 16 + 1] += coefficients6[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 17 + 1] += coefficients7[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 18 + 1] += coefficients8[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 19 + 1] += coefficients9[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 20 + 2] += coefficients0[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 21 + 2] += coefficients1[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 22 + 2] += coefficients2[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 23 + 2] += coefficients3[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 24 + 2] += coefficients4[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 25 + 2] += coefficients5[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 26 + 2] += coefficients6[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 27 + 2] += coefficients7[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 28 + 2] += coefficients8[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 10; ++r)
            reference_values[34 * 4 * ip + 4 * 29 + 2] += coefficients9[0][r] * basisvalues2[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[34 * 4 * ip + 4 * 30 + 3] += coefficients30[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[34 * 4 * ip + 4 * 31 + 3] += coefficients31[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[34 * 4 * ip + 4 * 32 + 3] += coefficients32[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[34 * 4 * ip + 4 * 33 + 3] += coefficients33[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 34 * num_derivatives * 4, 0.0);
    if (order > 2)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][10][10] =
        { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
            { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } } };
    alignas(32) static const double dmats30[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505545, 0.0, 0.0, 0.0 },
            { 5.163977794943224, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][10] = { { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 } };
    static const double coefficients1[1][10] = { { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 } };
    static const double coefficients2[1][10] = { { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 } };
    static const double coefficients3[1][10] = { { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 } };
    static const double coefficients4[1][10] = { { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 } };
    static const double coefficients5[1][10] = { { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 } };
    static const double coefficients6[1][10] = { { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 } };
    static const double coefficients7[1][10] = { { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 } };
    static const double coefficients8[1][10] = { { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 } };
    static const double coefficients9[1][10] = { { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 } };
    static const double coefficients30[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients31[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients32[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients33[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[34] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3 };
    const std::size_t num_components[34] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues2[10] = {};
        basisvalues2[0] = 1.0;
        const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues2[1] = tmp1_2;
        const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
        basisvalues2[4] = 1.5 * tmp1_2 * basisvalues2[1] - 0.5 * tmp2_2 * basisvalues2[0];
        basisvalues2[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues2[0];
        basisvalues2[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues2[1];
        const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
        const double tmp4_2 = 0.5 * (1.0 - Y[2]);
        const double tmp5_2 = tmp4_2 * tmp4_2;
        basisvalues2[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues2[2] - 0.5555555555555556 * tmp5_2 * basisvalues2[0];
        basisvalues2[3] = (2.0 * Y[2] + 1.0) * basisvalues2[0];
        basisvalues2[8] = (3.0 * Y[2] + 2.0) * basisvalues2[2];
        basisvalues2[6] = (3.0 * Y[2] + 2.0) * basisvalues2[1];
        basisvalues2[9] = (0.3125 + 1.875 * Y[2]) * basisvalues2[3] - 0.5625 * basisvalues2[0];
        basisvalues2[0] *= std::sqrt(0.75);
        basisvalues2[3] *= std::sqrt(1.25);
        basisvalues2[9] *= std::sqrt(1.75);
        basisvalues2[2] *= std::sqrt(2.5);
        basisvalues2[8] *= std::sqrt(3.5);
        basisvalues2[7] *= std::sqrt(5.25);
        basisvalues2[1] *= std::sqrt(7.5);
        basisvalues2[6] *= std::sqrt(10.5);
        basisvalues2[5] *= std::sqrt(15.75);
        basisvalues2[4] *= std::sqrt(26.25);
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 34; ++i)
        {
            double derivatives[9] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 12:
                // Compute reference derivatives for dof 12.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 13:
                // Compute reference derivatives for dof 13.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 14:
                // Compute reference derivatives for dof 14.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 15:
                // Compute reference derivatives for dof 15.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 16:
                // Compute reference derivatives for dof 16.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 17:
                // Compute reference derivatives for dof 17.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 18:
                // Compute reference derivatives for dof 18.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 19:
                // Compute reference derivatives for dof 19.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 20:
                // Compute reference derivatives for dof 20.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 21:
                // Compute reference derivatives for dof 21.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 22:
                // Compute reference derivatives for dof 22.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 23:
                // Compute reference derivatives for dof 23.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 24:
                // Compute reference derivatives for dof 24.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients4[0][s] * aux[s];
                }
                break;
            case 25:
                // Compute reference derivatives for dof 25.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients5[0][s] * aux[s];
                }
                break;
            case 26:
                // Compute reference derivatives for dof 26.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients6[0][s] * aux[s];
                }
                break;
            case 27:
                // Compute reference derivatives for dof 27.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients7[0][s] * aux[s];
                }
                break;
            case 28:
                // Compute reference derivatives for dof 28.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients8[0][s] * aux[s];
                }
                break;
            case 29:
                // Compute reference derivatives for dof 29.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[10] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[10][10] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 100, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[10][10];
                        std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 100, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 10; ++s)
                        for (std::size_t t = 0; t < 10; ++t)
                            aux[s] += dmats[s][t] * basisvalues2[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 10; ++s)
                        derivatives[r] += coefficients9[0][s] * aux[s];
                }
                break;
            case 30:
                // Compute reference derivatives for dof 30.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats30[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats30[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients30[0][s] * aux[s];
                }
                break;
            case 31:
                // Compute reference derivatives for dof 31.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats30[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats30[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients31[0][s] * aux[s];
                }
                break;
            case 32:
                // Compute reference derivatives for dof 32.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats30[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats30[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients32[0][s] * aux[s];
                }
                break;
            case 33:
                // Compute reference derivatives for dof 33.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats30[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats30[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients33[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[34 * (num_derivatives * 4) * ip + num_derivatives * 4 * i + 4 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    std::fill_n(values, num_points * 34 * num_derivatives * 4, 0.0);
    const std::size_t reference_offsets[34] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3 };
    const std::size_t physical_offsets[34] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[9][9];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 34; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[34 * (num_derivatives * 4) * ip + num_derivatives * 4 * d + 4 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[34 * (num_derivatives * 4) * ip + num_derivatives * 4 * d + 4 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[136];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[136];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 4; ++k)
        values[k] = physical_values[4 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[4] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 34; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 4; ++s)
            values[r * 4 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 4 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[2][9][2] =
        { { { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 },
            { 0, 0 },
            { 1, 0 },
            { 2, 0 } },
          { { 0, 0 },
            { 0, 1 },
            { 0, 2 },
            { 1, 0 },
            { 1, 1 },
            { 1, 2 },
            { 2, 0 },
            { 2, 1 },
            { 2, 2 } } };
    // Declare transformation matrix
    double transform[9][9] =
        { { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 12:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 13:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 14:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 15:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 16:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 17:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 18:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 19:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 20:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.057735026918962505, -0.06085806194501846, -0.03513641844631533, -0.024845199749997673, 0.06506000486323554, 0.05039526306789696, 0.04114755998989117, 0.029095718698132315, 0.02375655483665995, 0.016798421022632327 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 21:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.06085806194501846, -0.03513641844631533, -0.02484519974999768, 0.06506000486323553, -0.050395263067896955, -0.04114755998989117, 0.029095718698132312, 0.023756554836659945, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 22:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896254, 0.0, 0.07027283689263066, -0.024845199749997698, 0.0, 0.0, 0.0, 0.08728715609439693, -0.04751310967331989, 0.01679842102263232 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 23:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { -0.05773502691896259, 0.0, 0.0, 0.07453559924999299, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10079052613579392 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 24:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.0, 0.1405456737852613, 0.09938079899999064, 0.0, 0.0, 0.0, 0.0, 0.11878277418329974, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 25:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.2309401076758504, 0.12171612389003694, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, 0.10286889997472796, 0.0, -0.05939138709164987, -0.0671936840905293 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 26:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585033, 0.12171612389003691, 0.07027283689263064, -0.09938079899999064, 0.0, 0.10079052613579391, -0.02057377999494557, -0.08728715609439694, -0.01187827741832998, 0.016798421022632317 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 27:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585046, -0.12171612389003691, -0.07027283689263064, 0.09938079899999065, 0.0, 0.0, -0.10286889997472794, 0.0, -0.05939138709164985, -0.06719368409052928 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 28:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585021, -0.12171612389003696, 0.07027283689263064, -0.09938079899999064, 0.0, -0.10079052613579395, 0.020573779994945588, -0.08728715609439693, -0.01187827741832997, 0.016798421022632324 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 29:
        {
            double basisvalues[10] = {};
            basisvalues[0] = 1.0;
            const double tmp1_2 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_2;
            const double tmp2_2 = 0.25 * (Y[1] + Y[2]) * (Y[1] + Y[2]);
            basisvalues[4] = 1.5 * tmp1_2 * basisvalues[1] - 0.5 * tmp2_2 * basisvalues[0];
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[5] = (0.5 * (2.0 + 3.0 * Y[1] + Y[2]) + (1.0 + Y[1])) * basisvalues[1];
            const double tmp3_2 = 0.5 * (1.0 + 2.0 * Y[1] + Y[2]);
            const double tmp4_2 = 0.5 * (1.0 - Y[2]);
            const double tmp5_2 = tmp4_2 * tmp4_2;
            basisvalues[7] = (1.6666666666666667 * tmp3_2 + 0.1111111111111111 * tmp4_2) * basisvalues[2] - 0.5555555555555556 * tmp5_2 * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[8] = (3.0 * Y[2] + 2.0) * basisvalues[2];
            basisvalues[6] = (3.0 * Y[2] + 2.0) * basisvalues[1];
            basisvalues[9] = (0.3125 + 1.875 * Y[2]) * basisvalues[3] - 0.5625 * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[9] *= std::sqrt(1.75);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[8] *= std::sqrt(3.5);
            basisvalues[7] *= std::sqrt(5.25);
            basisvalues[1] *= std::sqrt(7.5);
            basisvalues[6] *= std::sqrt(10.5);
            basisvalues[5] *= std::sqrt(15.75);
            basisvalues[4] *= std::sqrt(26.25);
            // Table(s) of coefficients
            static const double coefficients0[10] = { 0.23094010767585038, 0.0, -0.14054567378526128, -0.09938079899999064, -0.1301200097264711, 0.0, 0.0, 0.029095718698132305, 0.023756554836659945, 0.016798421022632314 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336757, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 11.224972160321823, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 4.582575694955855, 0.0, 8.366600265340765, -1.183215956619928, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.7416573867739538, 0.0, 0.0, 8.69482604771367, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.477225575051662, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.2912878474779608, 7.245688373094726, 4.1833001326703805, -0.5916079783099695, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933869769, 0.0, 0.0, 4.347413023856835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -2.6457513110646236, 0.0, 9.660917830792958, 0.6831300510639817, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.240370349203942, 0.0, 0.0, 7.5299402388066845, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[10][10] =
                { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 3.1622776601683786, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8257418583505536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 5.1639777949432215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.95803989154981, 5.612486080160912, -1.080123449734643, -0.7637626158259727, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 2.291287847477916, 1.4491376746189433, 4.183300132670374, -0.5916079783099613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.8708286933870129, 7.099295739719547, 0.0, 4.347413023856836, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.3228756555323067, 0.0, 3.864367132317191, -0.34156502553198986, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 1.0801234497346337, 0.0, 7.099295739719544, 2.5099800796022134, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { -3.8188130791299084, 0.0, 0.0, 8.874119674649432, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[10][10] =
                { { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 100, 0.0);
                for (std::size_t t = 0; t < 10; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 100, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 100, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 10; ++t)
                            for (std::size_t u = 0; u < 10; ++u)
                                for (std::size_t tu = 0; tu < 10; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 10; ++s)
                    for (std::size_t t = 0; t < 10; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 30:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 31:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 32:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 33:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505545, 0.0, 0.0, 0.0 },
                  { 5.163977794943224, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[9] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[3 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 4 * num_derivatives * 34, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 2)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[36] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 34; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 4 * num_derivatives; ++s)
            values[4 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[4];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 5:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 6:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 7:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 8:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 9:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 12:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 13:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 14:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 15:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 16:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 17:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 18:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 19:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 20:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 21:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 22:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 23:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 24:
        {
            y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 25:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 26:
        {
            y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 27:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 28:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 29:
        {
            y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
            y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
            y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 30:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 31:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 32:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    case 33:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[3];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[4];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[10] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[11] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[12] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[13] = vals[1];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[14] = vals[1];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[15] = vals[1];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[16] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[17] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[18] = vals[1];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[19] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[20] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[21] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[22] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[23] = vals[2];
    y[0] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[24] = vals[2];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[25] = vals[2];
    y[0] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[26] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[27] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[28] = vals[2];
    y[0] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    y[1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    y[2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[29] = vals[2];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[30] = vals[3];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[31] = vals[3];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[32] = vals[3];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[33] = vals[3];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[4] = dof_values[1];
    vertex_values[8] = dof_values[2];
    vertex_values[12] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[10];
    vertex_values[5] = dof_values[11];
    vertex_values[9] = dof_values[12];
    vertex_values[13] = dof_values[13];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[20];
    vertex_values[6] = dof_values[21];
    vertex_values[10] = dof_values[22];
    vertex_values[14] = dof_values[23];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[30];
    vertex_values[7] = dof_values[31];
    vertex_values[11] = dof_values[32];
    vertex_values[15] = dof_values[33];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 4 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 4 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 5] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 5 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 5 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 6] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 7] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 8] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 8 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 8 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 9] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[0];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 11] = coordinate_dofs[3];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 12] = coordinate_dofs[6];
    dof_coordinates[3 * 12 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 12 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 13] = coordinate_dofs[9];
    dof_coordinates[3 * 13 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 13 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 14] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 14 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 14 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 15] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 15 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 15 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 16] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 16 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 16 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 17] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 17 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 17 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 18] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 18 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 18 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 19] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 19 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 19 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 20] = coordinate_dofs[0];
    dof_coordinates[3 * 20 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 20 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 21] = coordinate_dofs[3];
    dof_coordinates[3 * 21 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 21 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 22] = coordinate_dofs[6];
    dof_coordinates[3 * 22 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 22 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 23] = coordinate_dofs[9];
    dof_coordinates[3 * 23 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 23 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 24] = 0.5 * coordinate_dofs[6] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 24 + 1] = 0.5 * coordinate_dofs[7] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 24 + 2] = 0.5 * coordinate_dofs[8] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 25] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 25 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 25 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 26] = 0.5 * coordinate_dofs[3] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 26 + 1] = 0.5 * coordinate_dofs[4] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 26 + 2] = 0.5 * coordinate_dofs[5] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 27] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[9];
    dof_coordinates[3 * 27 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[10];
    dof_coordinates[3 * 27 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[11];
    dof_coordinates[3 * 28] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[6];
    dof_coordinates[3 * 28 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[7];
    dof_coordinates[3 * 28 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[8];
    dof_coordinates[3 * 29] = 0.5 * coordinate_dofs[0] + 0.5 * coordinate_dofs[3];
    dof_coordinates[3 * 29 + 1] = 0.5 * coordinate_dofs[1] + 0.5 * coordinate_dofs[4];
    dof_coordinates[3 * 29 + 2] = 0.5 * coordinate_dofs[2] + 0.5 * coordinate_dofs[5];
    dof_coordinates[3 * 30] = coordinate_dofs[0];
    dof_coordinates[3 * 30 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 30 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 31] = coordinate_dofs[3];
    dof_coordinates[3 * 31 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 31 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 32] = coordinate_dofs[6];
    dof_coordinates[3 * 32 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 32 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 33] = coordinate_dofs[9];
    dof_coordinates[3 * 33 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 33 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[102] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 102, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 2;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_finite_element_3();
    case 1:
        return new navierstokes_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes_finite_element_4();
  }

};


class navierstokes_finite_element_5: public ufc::finite_element
{
public:

  navierstokes_finite_element_5() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes_finite_element_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[3] = { 0.25, 0.25, 0.25 };
    std::copy_n(dof_X, 3, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes_finite_element_5();
  }

};


class navierstokes_dofmap_0: public ufc::dofmap
{
public:

  navierstokes_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 4;
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 2, 3, 4 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes_dofmap_0();
  }

};


class navierstokes_dofmap_1: public ufc::dofmap
{
public:

  navierstokes_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 6, 9, 12 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 9;
            dofs[5] = 10;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 9;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 11;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 10;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_dofmap_0();
    case 1:
        return new navierstokes_dofmap_0();
    case 2:
        return new navierstokes_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes_dofmap_1();
  }

};


class navierstokes_dofmap_2: public ufc::dofmap
{
public:

  navierstokes_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 2)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0] + num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 10;
  }

  std::size_t num_element_dofs() const final override
  {
    return 10;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 6;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 1, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 3, 6, 10 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[6] = offset + entity_indices[1][2];
    dofs[7] = offset + entity_indices[1][3];
    dofs[8] = offset + entity_indices[1][4];
    dofs[9] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 7;
        dofs[5] = 8;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 7;
        dofs[5] = 9;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 9;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            break;
        case 1:
            dofs[0] = 5;
            break;
        case 2:
            dofs[0] = 6;
            break;
        case 3:
            dofs[0] = 7;
            break;
        case 4:
            dofs[0] = 8;
            break;
        case 5:
            dofs[0] = 9;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 6;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 7;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 8;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 7;
            dofs[5] = 8;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 7;
            dofs[5] = 9;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes_dofmap_2();
  }

};


class navierstokes_dofmap_3: public ufc::dofmap
{
public:

  navierstokes_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 2), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0] + 3 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 30;
  }

  std::size_t num_element_dofs() const final override
  {
    return 30;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 18;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 3, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 9, 18, 30 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[6] = offset + entity_indices[1][2];
    dofs[7] = offset + entity_indices[1][3];
    dofs[8] = offset + entity_indices[1][4];
    dofs[9] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
    dofs[10] = offset + entity_indices[0][0];
    dofs[11] = offset + entity_indices[0][1];
    dofs[12] = offset + entity_indices[0][2];
    dofs[13] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[14] = offset + entity_indices[1][0];
    dofs[15] = offset + entity_indices[1][1];
    dofs[16] = offset + entity_indices[1][2];
    dofs[17] = offset + entity_indices[1][3];
    dofs[18] = offset + entity_indices[1][4];
    dofs[19] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
    dofs[20] = offset + entity_indices[0][0];
    dofs[21] = offset + entity_indices[0][1];
    dofs[22] = offset + entity_indices[0][2];
    dofs[23] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[24] = offset + entity_indices[1][0];
    dofs[25] = offset + entity_indices[1][1];
    dofs[26] = offset + entity_indices[1][2];
    dofs[27] = offset + entity_indices[1][3];
    dofs[28] = offset + entity_indices[1][4];
    dofs[29] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 11;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 14;
        dofs[10] = 15;
        dofs[11] = 16;
        dofs[12] = 21;
        dofs[13] = 22;
        dofs[14] = 23;
        dofs[15] = 24;
        dofs[16] = 25;
        dofs[17] = 26;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 7;
        dofs[5] = 8;
        dofs[6] = 10;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 14;
        dofs[10] = 17;
        dofs[11] = 18;
        dofs[12] = 20;
        dofs[13] = 22;
        dofs[14] = 23;
        dofs[15] = 24;
        dofs[16] = 27;
        dofs[17] = 28;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 7;
        dofs[5] = 9;
        dofs[6] = 10;
        dofs[7] = 11;
        dofs[8] = 13;
        dofs[9] = 15;
        dofs[10] = 17;
        dofs[11] = 19;
        dofs[12] = 20;
        dofs[13] = 21;
        dofs[14] = 23;
        dofs[15] = 25;
        dofs[16] = 27;
        dofs[17] = 29;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 10;
        dofs[7] = 11;
        dofs[8] = 12;
        dofs[9] = 16;
        dofs[10] = 18;
        dofs[11] = 19;
        dofs[12] = 20;
        dofs[13] = 21;
        dofs[14] = 22;
        dofs[15] = 26;
        dofs[16] = 28;
        dofs[17] = 29;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 10;
            dofs[2] = 20;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 11;
            dofs[2] = 21;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 12;
            dofs[2] = 22;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 13;
            dofs[2] = 23;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            dofs[1] = 14;
            dofs[2] = 24;
            break;
        case 1:
            dofs[0] = 5;
            dofs[1] = 15;
            dofs[2] = 25;
            break;
        case 2:
            dofs[0] = 6;
            dofs[1] = 16;
            dofs[2] = 26;
            break;
        case 3:
            dofs[0] = 7;
            dofs[1] = 17;
            dofs[2] = 27;
            break;
        case 4:
            dofs[0] = 8;
            dofs[1] = 18;
            dofs[2] = 28;
            break;
        case 5:
            dofs[0] = 9;
            dofs[1] = 19;
            dofs[2] = 29;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 10;
            dofs[2] = 20;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 11;
            dofs[2] = 21;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 12;
            dofs[2] = 22;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 13;
            dofs[2] = 23;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            dofs[6] = 22;
            dofs[7] = 23;
            dofs[8] = 24;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 11;
            dofs[4] = 13;
            dofs[5] = 15;
            dofs[6] = 21;
            dofs[7] = 23;
            dofs[8] = 25;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 6;
            dofs[3] = 11;
            dofs[4] = 12;
            dofs[5] = 16;
            dofs[6] = 21;
            dofs[7] = 22;
            dofs[8] = 26;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 7;
            dofs[3] = 10;
            dofs[4] = 13;
            dofs[5] = 17;
            dofs[6] = 20;
            dofs[7] = 23;
            dofs[8] = 27;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 8;
            dofs[3] = 10;
            dofs[4] = 12;
            dofs[5] = 18;
            dofs[6] = 20;
            dofs[7] = 22;
            dofs[8] = 28;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 9;
            dofs[3] = 10;
            dofs[4] = 11;
            dofs[5] = 19;
            dofs[6] = 20;
            dofs[7] = 21;
            dofs[8] = 29;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 11;
            dofs[7] = 12;
            dofs[8] = 13;
            dofs[9] = 14;
            dofs[10] = 15;
            dofs[11] = 16;
            dofs[12] = 21;
            dofs[13] = 22;
            dofs[14] = 23;
            dofs[15] = 24;
            dofs[16] = 25;
            dofs[17] = 26;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 7;
            dofs[5] = 8;
            dofs[6] = 10;
            dofs[7] = 12;
            dofs[8] = 13;
            dofs[9] = 14;
            dofs[10] = 17;
            dofs[11] = 18;
            dofs[12] = 20;
            dofs[13] = 22;
            dofs[14] = 23;
            dofs[15] = 24;
            dofs[16] = 27;
            dofs[17] = 28;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 7;
            dofs[5] = 9;
            dofs[6] = 10;
            dofs[7] = 11;
            dofs[8] = 13;
            dofs[9] = 15;
            dofs[10] = 17;
            dofs[11] = 19;
            dofs[12] = 20;
            dofs[13] = 21;
            dofs[14] = 23;
            dofs[15] = 25;
            dofs[16] = 27;
            dofs[17] = 29;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 10;
            dofs[7] = 11;
            dofs[8] = 12;
            dofs[9] = 16;
            dofs[10] = 18;
            dofs[11] = 19;
            dofs[12] = 20;
            dofs[13] = 21;
            dofs[14] = 22;
            dofs[15] = 26;
            dofs[16] = 28;
            dofs[17] = 29;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            dofs[24] = 24;
            dofs[25] = 25;
            dofs[26] = 26;
            dofs[27] = 27;
            dofs[28] = 28;
            dofs[29] = 29;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_dofmap_2();
    case 1:
        return new navierstokes_dofmap_2();
    case 2:
        return new navierstokes_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes_dofmap_3();
  }

};


class navierstokes_dofmap_4: public ufc::dofmap
{
public:

  navierstokes_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(VectorElement(FiniteElement('Lagrange', tetrahedron, 2), dim=3), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, true, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 4 * num_global_entities[0] + 3 * num_global_entities[1];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 34;
  }

  std::size_t num_element_dofs() const final override
  {
    return 34;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 21;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 4, 3, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 4, 11, 21, 34 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[1][0];
    dofs[5] = offset + entity_indices[1][1];
    dofs[6] = offset + entity_indices[1][2];
    dofs[7] = offset + entity_indices[1][3];
    dofs[8] = offset + entity_indices[1][4];
    dofs[9] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
    dofs[10] = offset + entity_indices[0][0];
    dofs[11] = offset + entity_indices[0][1];
    dofs[12] = offset + entity_indices[0][2];
    dofs[13] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[14] = offset + entity_indices[1][0];
    dofs[15] = offset + entity_indices[1][1];
    dofs[16] = offset + entity_indices[1][2];
    dofs[17] = offset + entity_indices[1][3];
    dofs[18] = offset + entity_indices[1][4];
    dofs[19] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
    dofs[20] = offset + entity_indices[0][0];
    dofs[21] = offset + entity_indices[0][1];
    dofs[22] = offset + entity_indices[0][2];
    dofs[23] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[24] = offset + entity_indices[1][0];
    dofs[25] = offset + entity_indices[1][1];
    dofs[26] = offset + entity_indices[1][2];
    dofs[27] = offset + entity_indices[1][3];
    dofs[28] = offset + entity_indices[1][4];
    dofs[29] = offset + entity_indices[1][5];
    offset += num_global_entities[1];
    dofs[30] = offset + entity_indices[0][0];
    dofs[31] = offset + entity_indices[0][1];
    dofs[32] = offset + entity_indices[0][2];
    dofs[33] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 11;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 14;
        dofs[10] = 15;
        dofs[11] = 16;
        dofs[12] = 21;
        dofs[13] = 22;
        dofs[14] = 23;
        dofs[15] = 24;
        dofs[16] = 25;
        dofs[17] = 26;
        dofs[18] = 31;
        dofs[19] = 32;
        dofs[20] = 33;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 7;
        dofs[5] = 8;
        dofs[6] = 10;
        dofs[7] = 12;
        dofs[8] = 13;
        dofs[9] = 14;
        dofs[10] = 17;
        dofs[11] = 18;
        dofs[12] = 20;
        dofs[13] = 22;
        dofs[14] = 23;
        dofs[15] = 24;
        dofs[16] = 27;
        dofs[17] = 28;
        dofs[18] = 30;
        dofs[19] = 32;
        dofs[20] = 33;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 7;
        dofs[5] = 9;
        dofs[6] = 10;
        dofs[7] = 11;
        dofs[8] = 13;
        dofs[9] = 15;
        dofs[10] = 17;
        dofs[11] = 19;
        dofs[12] = 20;
        dofs[13] = 21;
        dofs[14] = 23;
        dofs[15] = 25;
        dofs[16] = 27;
        dofs[17] = 29;
        dofs[18] = 30;
        dofs[19] = 31;
        dofs[20] = 33;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 9;
        dofs[6] = 10;
        dofs[7] = 11;
        dofs[8] = 12;
        dofs[9] = 16;
        dofs[10] = 18;
        dofs[11] = 19;
        dofs[12] = 20;
        dofs[13] = 21;
        dofs[14] = 22;
        dofs[15] = 26;
        dofs[16] = 28;
        dofs[17] = 29;
        dofs[18] = 30;
        dofs[19] = 31;
        dofs[20] = 32;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 10;
            dofs[2] = 20;
            dofs[3] = 30;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 11;
            dofs[2] = 21;
            dofs[3] = 31;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 12;
            dofs[2] = 22;
            dofs[3] = 32;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 13;
            dofs[2] = 23;
            dofs[3] = 33;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 4;
            dofs[1] = 14;
            dofs[2] = 24;
            break;
        case 1:
            dofs[0] = 5;
            dofs[1] = 15;
            dofs[2] = 25;
            break;
        case 2:
            dofs[0] = 6;
            dofs[1] = 16;
            dofs[2] = 26;
            break;
        case 3:
            dofs[0] = 7;
            dofs[1] = 17;
            dofs[2] = 27;
            break;
        case 4:
            dofs[0] = 8;
            dofs[1] = 18;
            dofs[2] = 28;
            break;
        case 5:
            dofs[0] = 9;
            dofs[1] = 19;
            dofs[2] = 29;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 10;
            dofs[2] = 20;
            dofs[3] = 30;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 11;
            dofs[2] = 21;
            dofs[3] = 31;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 12;
            dofs[2] = 22;
            dofs[3] = 32;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 13;
            dofs[2] = 23;
            dofs[3] = 33;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 12;
            dofs[4] = 13;
            dofs[5] = 14;
            dofs[6] = 22;
            dofs[7] = 23;
            dofs[8] = 24;
            dofs[9] = 32;
            dofs[10] = 33;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 11;
            dofs[4] = 13;
            dofs[5] = 15;
            dofs[6] = 21;
            dofs[7] = 23;
            dofs[8] = 25;
            dofs[9] = 31;
            dofs[10] = 33;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 6;
            dofs[3] = 11;
            dofs[4] = 12;
            dofs[5] = 16;
            dofs[6] = 21;
            dofs[7] = 22;
            dofs[8] = 26;
            dofs[9] = 31;
            dofs[10] = 32;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 7;
            dofs[3] = 10;
            dofs[4] = 13;
            dofs[5] = 17;
            dofs[6] = 20;
            dofs[7] = 23;
            dofs[8] = 27;
            dofs[9] = 30;
            dofs[10] = 33;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 8;
            dofs[3] = 10;
            dofs[4] = 12;
            dofs[5] = 18;
            dofs[6] = 20;
            dofs[7] = 22;
            dofs[8] = 28;
            dofs[9] = 30;
            dofs[10] = 32;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 9;
            dofs[3] = 10;
            dofs[4] = 11;
            dofs[5] = 19;
            dofs[6] = 20;
            dofs[7] = 21;
            dofs[8] = 29;
            dofs[9] = 30;
            dofs[10] = 31;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 11;
            dofs[7] = 12;
            dofs[8] = 13;
            dofs[9] = 14;
            dofs[10] = 15;
            dofs[11] = 16;
            dofs[12] = 21;
            dofs[13] = 22;
            dofs[14] = 23;
            dofs[15] = 24;
            dofs[16] = 25;
            dofs[17] = 26;
            dofs[18] = 31;
            dofs[19] = 32;
            dofs[20] = 33;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 7;
            dofs[5] = 8;
            dofs[6] = 10;
            dofs[7] = 12;
            dofs[8] = 13;
            dofs[9] = 14;
            dofs[10] = 17;
            dofs[11] = 18;
            dofs[12] = 20;
            dofs[13] = 22;
            dofs[14] = 23;
            dofs[15] = 24;
            dofs[16] = 27;
            dofs[17] = 28;
            dofs[18] = 30;
            dofs[19] = 32;
            dofs[20] = 33;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 7;
            dofs[5] = 9;
            dofs[6] = 10;
            dofs[7] = 11;
            dofs[8] = 13;
            dofs[9] = 15;
            dofs[10] = 17;
            dofs[11] = 19;
            dofs[12] = 20;
            dofs[13] = 21;
            dofs[14] = 23;
            dofs[15] = 25;
            dofs[16] = 27;
            dofs[17] = 29;
            dofs[18] = 30;
            dofs[19] = 31;
            dofs[20] = 33;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 9;
            dofs[6] = 10;
            dofs[7] = 11;
            dofs[8] = 12;
            dofs[9] = 16;
            dofs[10] = 18;
            dofs[11] = 19;
            dofs[12] = 20;
            dofs[13] = 21;
            dofs[14] = 22;
            dofs[15] = 26;
            dofs[16] = 28;
            dofs[17] = 29;
            dofs[18] = 30;
            dofs[19] = 31;
            dofs[20] = 32;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            dofs[12] = 12;
            dofs[13] = 13;
            dofs[14] = 14;
            dofs[15] = 15;
            dofs[16] = 16;
            dofs[17] = 17;
            dofs[18] = 18;
            dofs[19] = 19;
            dofs[20] = 20;
            dofs[21] = 21;
            dofs[22] = 22;
            dofs[23] = 23;
            dofs[24] = 24;
            dofs[25] = 25;
            dofs[26] = 26;
            dofs[27] = 27;
            dofs[28] = 28;
            dofs[29] = 29;
            dofs[30] = 30;
            dofs[31] = 31;
            dofs[32] = 32;
            dofs[33] = 33;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 2;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_dofmap_3();
    case 1:
        return new navierstokes_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes_dofmap_4();
  }

};


class navierstokes_dofmap_5: public ufc::dofmap
{
public:

  navierstokes_dofmap_5() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes_dofmap_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = {};
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes_dofmap_5();
  }

};


class navierstokes_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  navierstokes_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~navierstokes_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new navierstokes_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new navierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new navierstokes_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    navierstokes_finite_element_0 xelement;
    double phi[4];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[3 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t d = 0; d < 4; ++d)
                x[3 * ip + i] += coordinate_dofs[3 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double J[9];
    double detJ[1];
    double K[9];
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    navierstokes_finite_element_0 xelement;
    double dphi[12];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[3 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t j = 0; j < 3; ++j)
                for (std::size_t d = 0; d < 4; ++d)
                    J[3 * 3 * ip + 3 * i + j] += coordinate_dofs[3 * d + i] * dphi[3 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[3 * 3 * ip] * (J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2 + 2] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) + J[3 * 3 * ip + 1] * (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 2]) + J[3 * 3 * ip + 2] * (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2]);
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[3 * 3 * ip] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 1] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2 + 2]) / detJ[ip];
        K[3 * 3 * ip + 2] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 + 2] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3] = (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3]) / detJ[ip];
        K[3 * 3 * ip + 3 + 1] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2]) / detJ[ip];
        K[3 * 3 * ip + 3 + 2] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2] = (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 * 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 1] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 2] = (J[3 * 3 * ip] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3]) / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[4] = { 0.25000000000000006, 0.24999999999999997, 0.25, 0.25 };
    const double dphi_Xm[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t d = 0; d < 4; ++d)
            x[i] += coordinate_dofs[3 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t d = 0; d < 4; ++d)
                J[3 * i + j] += coordinate_dofs[3 * d + i] * dphi_Xm[j][d];
  }

};


class navierstokes_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  navierstokes_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~navierstokes_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 4
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 4
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           4
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE37_C3_D001_Q14[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE37_C3_D001_Q14[0][0][0] + coordinate_dofs[7] * FE37_C3_D001_Q14[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE37_C3_D001_Q14[0][0][0] + coordinate_dofs[11] * FE37_C3_D001_Q14[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE37_C3_D001_Q14[0][0][0] + coordinate_dofs[10] * FE37_C3_D001_Q14[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE37_C3_D001_Q14[0][0][0] + coordinate_dofs[8] * FE37_C3_D001_Q14[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE37_C3_D001_Q14[0][0][0] + coordinate_dofs[3] * FE37_C3_D001_Q14[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE37_C3_D001_Q14[0][0][0] + coordinate_dofs[6] * FE37_C3_D001_Q14[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE37_C3_D001_Q14[0][0][0] + coordinate_dofs[5] * FE37_C3_D001_Q14[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE37_C3_D001_Q14[0][0][0] + coordinate_dofs[4] * FE37_C3_D001_Q14[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE37_C3_D001_Q14[0][0][0] + coordinate_dofs[9] * FE37_C3_D001_Q14[0][0][1];
    alignas(32) double sp[99];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = sp[14] * sp[14];
    sp[44] = sp[14] * sp[17];
    sp[45] = sp[18] * sp[14];
    sp[46] = sp[17] * sp[17];
    sp[47] = sp[18] * sp[17];
    sp[48] = sp[18] * sp[18];
    sp[49] = sp[22] * sp[22];
    sp[50] = sp[22] * sp[26];
    sp[51] = sp[22] * sp[30];
    sp[52] = sp[26] * sp[26];
    sp[53] = sp[26] * sp[30];
    sp[54] = sp[30] * sp[30];
    sp[55] = sp[49] + sp[43];
    sp[56] = sp[50] + sp[44];
    sp[57] = sp[51] + sp[45];
    sp[58] = sp[52] + sp[46];
    sp[59] = sp[53] + sp[47];
    sp[60] = sp[48] + sp[54];
    sp[61] = sp[34] * sp[34];
    sp[62] = sp[34] * sp[38];
    sp[63] = sp[42] * sp[34];
    sp[64] = sp[38] * sp[38];
    sp[65] = sp[42] * sp[38];
    sp[66] = sp[42] * sp[42];
    sp[67] = sp[55] + sp[61];
    sp[68] = sp[56] + sp[62];
    sp[69] = sp[57] + sp[63];
    sp[70] = sp[58] + sp[64];
    sp[71] = sp[59] + sp[65];
    sp[72] = sp[60] + sp[66];
    sp[73] = std::abs(sp[13]);
    sp[74] = sp[14] * sp[73];
    sp[75] = sp[17] * sp[73];
    sp[76] = sp[18] * sp[73];
    sp[77] = sp[22] * sp[73];
    sp[78] = sp[26] * sp[73];
    sp[79] = sp[30] * sp[73];
    sp[80] = sp[34] * sp[73];
    sp[81] = sp[38] * sp[73];
    sp[82] = sp[42] * sp[73];
    sp[83] = 0.01 * sp[67] * sp[73];
    sp[84] = 0.01 * sp[68] * sp[73];
    sp[85] = 0.01 * sp[69] * sp[73];
    sp[86] = 0.01 * sp[70] * sp[73];
    sp[87] = 0.01 * sp[71] * sp[73];
    sp[88] = 0.01 * sp[72] * sp[73];
    sp[89] = -1 * sp[14] * sp[73];
    sp[90] = -1 * sp[17] * sp[73];
    sp[91] = -1 * sp[18] * sp[73];
    sp[92] = -1 * sp[22] * sp[73];
    sp[93] = -1 * sp[26] * sp[73];
    sp[94] = -1 * sp[30] * sp[73];
    sp[95] = -1 * sp[34] * sp[73];
    sp[96] = -1 * sp[38] * sp[73];
    sp[97] = -1 * sp[42] * sp[73];
    sp[98] = 1.0 / w[0][0] * sp[73];
    A[0] = 0.002380952380952379 * sp[98] + 0.09999999999999996 * sp[83] + 0.1 * sp[84] + 0.09999999999999998 * sp[85] + 0.1 * sp[84] + 0.1 * sp[86] + 0.1 * sp[87] + 0.09999999999999998 * sp[85] + 0.1 * sp[87] + 0.1 * sp[88];
    A[1] = 0.0003968253968253956 * sp[98] + 0.03333333333333327 * sp[83] + 0.03333333333333329 * sp[84] + 0.03333333333333328 * sp[85];
    A[2] = 0.0003968253968253955 * sp[98] + 0.03333333333333333 * sp[84] + 0.03333333333333332 * sp[86] + 0.03333333333333333 * sp[87];
    A[3] = 0.0003968253968253959 * sp[98] + 0.03333333333333334 * sp[85] + 0.03333333333333337 * sp[87] + 0.03333333333333335 * sp[88];
    A[4] = -0.002380952380952378 * sp[98] + 0.03333333333333357 * sp[84] + 0.03333333333333351 * sp[85] + 0.03333333333333359 * sp[86] + 0.03333333333333349 * sp[87] + 0.03333333333333347 * sp[87] + 0.03333333333333342 * sp[88];
    A[5] = -0.002380952380952379 * sp[98] + 0.03333333333333357 * sp[83] + 0.03333333333333363 * sp[85] + 0.0333333333333336 * sp[84] + 0.03333333333333366 * sp[87] + 0.03333333333333348 * sp[85] + 0.03333333333333355 * sp[88];
    A[6] = -0.002380952380952378 * sp[98] + 0.03333333333333355 * sp[83] + 0.03333333333333356 * sp[84] + 0.03333333333333355 * sp[84] + 0.03333333333333359 * sp[86] + 0.03333333333333346 * sp[85] + 0.03333333333333349 * sp[87];
    A[7] = -0.001587301587301584 * sp[98] + -0.03333333333333355 * sp[83] + -0.03333333333333355 * sp[84] + -0.1333333333333333 * sp[85] + -0.03333333333333358 * sp[84] + -0.03333333333333358 * sp[86] + -0.1333333333333334 * sp[87] + -0.03333333333333347 * sp[85] + -0.03333333333333347 * sp[87] + -0.1333333333333334 * sp[88];
    A[8] = -0.001587301587301583 * sp[98] + -0.03333333333333356 * sp[83] + -0.1333333333333333 * sp[84] + -0.03333333333333351 * sp[85] + -0.03333333333333355 * sp[84] + -0.1333333333333334 * sp[86] + -0.0333333333333335 * sp[87] + -0.03333333333333348 * sp[85] + -0.1333333333333333 * sp[87] + -0.03333333333333342 * sp[88];
    A[9] = -0.001587301587301586 * sp[98] + -0.1333333333333332 * sp[83] + -0.03333333333333353 * sp[84] + -0.03333333333333352 * sp[85] + -0.1333333333333333 * sp[84] + -0.03333333333333355 * sp[86] + -0.03333333333333355 * sp[87] + -0.1333333333333333 * sp[85] + -0.03333333333333345 * sp[87] + -0.03333333333333344 * sp[88];
    std::fill(A + 10, A + 30, 0.0);
    A[30] = -0.02499999999999993 * sp[89] + -0.02499999999999994 * sp[90] + -0.02499999999999996 * sp[91];
    A[31] = 0.008333333333333382 * sp[89] + 0.008333333333333392 * sp[90] + 0.008333333333333364 * sp[91];
    A[32] = 0.008333333333333385 * sp[89] + 0.008333333333333384 * sp[90] + 0.008333333333333363 * sp[91];
    A[33] = 0.008333333333333385 * sp[89] + 0.008333333333333392 * sp[90] + 0.008333333333333366 * sp[91];
    A[34] = 0.0003968253968253956 * sp[98] + 0.03333333333333327 * sp[83] + 0.03333333333333329 * sp[84] + 0.03333333333333328 * sp[85];
    A[35] = 0.002380952380952379 * sp[98] + 0.09999999999999995 * sp[83];
    A[36] = 0.0003968253968253958 * sp[98] + -0.03333333333333335 * sp[84];
    A[37] = 0.000396825396825396 * sp[98] + -0.03333333333333332 * sp[85];
    A[38] = -0.002380952380952379 * sp[98] + -0.03333333333333346 * sp[84] + -0.03333333333333346 * sp[85];
    A[39] = -0.001587301587301586 * sp[98] + -0.03333333333333348 * sp[83] + 0.09999999999999995 * sp[85];
    A[40] = -0.001587301587301585 * sp[98] + -0.03333333333333352 * sp[83] + 0.09999999999999994 * sp[84];
    A[41] = -0.002380952380952379 * sp[98] + 0.03333333333333346 * sp[83] + 0.03333333333333345 * sp[84];
    A[42] = -0.002380952380952377 * sp[98] + 0.03333333333333354 * sp[83] + 0.0333333333333335 * sp[85];
    A[43] = -0.001587301587301586 * sp[98] + -0.1333333333333332 * sp[83] + -0.09999999999999984 * sp[84] + -0.09999999999999983 * sp[85];
    std::fill(A + 44, A + 64, 0.0);
    A[64] = -0.008333333333333351 * sp[89];
    A[65] = 0.02499999999999995 * sp[89];
    A[66] = -0.008333333333333371 * sp[89];
    A[67] = -0.008333333333333354 * sp[89];
    A[68] = 0.0003968253968253955 * sp[98] + 0.03333333333333333 * sp[84] + 0.03333333333333332 * sp[86] + 0.03333333333333333 * sp[87];
    A[69] = 0.0003968253968253958 * sp[98] + -0.03333333333333335 * sp[84];
    A[70] = 0.002380952380952379 * sp[98] + 0.09999999999999984 * sp[86];
    A[71] = 0.0003968253968253958 * sp[98] + -0.0333333333333333 * sp[87];
    A[72] = -0.001587301587301586 * sp[98] + -0.03333333333333369 * sp[86] + 0.09999999999999962 * sp[87];
    A[73] = -0.002380952380952379 * sp[98] + -0.03333333333333371 * sp[84] + -0.0333333333333338 * sp[87];
    A[74] = -0.001587301587301585 * sp[98] + 0.09999999999999959 * sp[84] + -0.03333333333333362 * sp[86];
    A[75] = -0.00238095238095238 * sp[98] + 0.03333333333333369 * sp[84] + 0.03333333333333369 * sp[86];
    A[76] = -0.001587301587301585 * sp[98] + -0.09999999999999962 * sp[84] + -0.1333333333333332 * sp[86] + -0.09999999999999956 * sp[87];
    A[77] = -0.002380952380952379 * sp[98] + 0.03333333333333368 * sp[86] + 0.03333333333333374 * sp[87];
    std::fill(A + 78, A + 98, 0.0);
    A[98] = -0.008333333333333427 * sp[90];
    A[99] = -0.008333333333333423 * sp[90];
    A[100] = 0.02499999999999987 * sp[90];
    A[101] = -0.008333333333333416 * sp[90];
    A[102] = 0.0003968253968253959 * sp[98] + 0.03333333333333334 * sp[85] + 0.03333333333333337 * sp[87] + 0.03333333333333335 * sp[88];
    A[103] = 0.000396825396825396 * sp[98] + -0.03333333333333332 * sp[85];
    A[104] = 0.0003968253968253958 * sp[98] + -0.0333333333333333 * sp[87];
    A[105] = 0.00238095238095238 * sp[98] + 0.1000000000000001 * sp[88];
    A[106] = -0.001587301587301587 * sp[98] + 0.09999999999999952 * sp[87] + -0.03333333333333409 * sp[88];
    A[107] = -0.001587301587301587 * sp[98] + 0.09999999999999956 * sp[85] + -0.03333333333333379 * sp[88];
    A[108] = -0.00238095238095238 * sp[98] + -0.03333333333333392 * sp[85] + -0.03333333333333403 * sp[87];
    A[109] = -0.001587301587301588 * sp[98] + -0.09999999999999955 * sp[85] + -0.09999999999999952 * sp[87] + -0.1333333333333334 * sp[88];
    A[110] = -0.002380952380952379 * sp[98] + 0.03333333333333394 * sp[85] + 0.03333333333333395 * sp[88];
    A[111] = -0.002380952380952379 * sp[98] + 0.03333333333333388 * sp[87] + 0.03333333333333383 * sp[88];
    std::fill(A + 112, A + 132, 0.0);
    A[132] = -0.008333333333333467 * sp[91];
    A[133] = -0.008333333333333463 * sp[91];
    A[134] = -0.008333333333333467 * sp[91];
    A[135] = 0.02499999999999987 * sp[91];
    A[136] = -0.002380952380952378 * sp[98] + 0.03333333333333357 * sp[84] + 0.03333333333333359 * sp[86] + 0.03333333333333347 * sp[87] + 0.03333333333333351 * sp[85] + 0.03333333333333349 * sp[87] + 0.03333333333333342 * sp[88];
    A[137] = -0.002380952380952379 * sp[98] + -0.03333333333333346 * sp[84] + -0.03333333333333346 * sp[85];
    A[138] = -0.001587301587301586 * sp[98] + -0.03333333333333369 * sp[86] + 0.09999999999999962 * sp[87];
    A[139] = -0.001587301587301587 * sp[98] + 0.09999999999999952 * sp[87] + -0.03333333333333409 * sp[88];
    A[140] = 0.01269841269841269 * sp[98] + 0.2666666666666671 * sp[86] + 0.1333333333333335 * sp[87] + 0.1333333333333335 * sp[87] + 0.2666666666666672 * sp[88];
    A[141] = 0.006349206349206351 * sp[98] + 0.2666666666666672 * sp[84] + 0.1333333333333345 * sp[87] + 0.1333333333333334 * sp[85] + 0.1333333333333344 * sp[88];
    A[142] = 0.006349206349206347 * sp[98] + 0.1333333333333336 * sp[84] + 0.1333333333333341 * sp[86] + 0.2666666666666671 * sp[85] + 0.1333333333333344 * sp[87];
    A[143] = 0.006349206349206351 * sp[98] + -0.2666666666666671 * sp[84] + -0.266666666666667 * sp[86] + -0.1333333333333335 * sp[87] + -0.1333333333333334 * sp[85] + -0.1333333333333334 * sp[87];
    A[144] = 0.006349206349206343 * sp[98] + -0.1333333333333336 * sp[84] + -0.1333333333333334 * sp[87] + -0.2666666666666672 * sp[85] + -0.1333333333333335 * sp[87] + -0.2666666666666669 * sp[88];
    A[145] = 0.003174603174603175 * sp[98] + -0.1333333333333335 * sp[86] + -0.1333333333333336 * sp[87] + -0.1333333333333336 * sp[87] + -0.1333333333333335 * sp[88];
    std::fill(A + 146, A + 166, 0.0);
    A[166] = 0.03333333333333337 * sp[90] + 0.03333333333333339 * sp[91];
    A[167] = 0.03333333333333337 * sp[90] + 0.03333333333333337 * sp[91];
    A[168] = 0.03333333333333337 * sp[90] + 0.06666666666666672 * sp[91];
    A[169] = 0.06666666666666671 * sp[90] + 0.03333333333333332 * sp[91];
    A[170] = -0.002380952380952379 * sp[98] + 0.03333333333333357 * sp[83] + 0.0333333333333336 * sp[84] + 0.03333333333333348 * sp[85] + 0.03333333333333363 * sp[85] + 0.03333333333333366 * sp[87] + 0.03333333333333355 * sp[88];
    A[171] = -0.001587301587301586 * sp[98] + -0.03333333333333348 * sp[83] + 0.09999999999999995 * sp[85];
    A[172] = -0.002380952380952379 * sp[98] + -0.03333333333333371 * sp[84] + -0.0333333333333338 * sp[87];
    A[173] = -0.001587301587301587 * sp[98] + 0.09999999999999956 * sp[85] + -0.03333333333333379 * sp[88];
    A[174] = 0.006349206349206351 * sp[98] + 0.2666666666666672 * sp[84] + 0.1333333333333334 * sp[85] + 0.1333333333333345 * sp[87] + 0.1333333333333344 * sp[88];
    A[175] = 0.01269841269841269 * sp[98] + 0.2666666666666671 * sp[83] + 0.1333333333333345 * sp[85] + 0.1333333333333345 * sp[85] + 0.2666666666666688 * sp[88];
    A[176] = 0.006349206349206351 * sp[98] + 0.1333333333333335 * sp[83] + 0.1333333333333341 * sp[84] + 0.1333333333333343 * sp[85] + 0.2666666666666686 * sp[87];
    A[177] = 0.006349206349206349 * sp[98] + -0.2666666666666671 * sp[83] + -0.2666666666666671 * sp[84] + -0.1333333333333335 * sp[85] + -0.1333333333333345 * sp[85] + -0.1333333333333345 * sp[87];
    A[178] = 0.00317460317460317 * sp[98] + -0.1333333333333336 * sp[83] + -0.1333333333333334 * sp[85] + -0.1333333333333343 * sp[85] + -0.1333333333333342 * sp[88];
    A[179] = 0.006349206349206349 * sp[98] + -0.1333333333333335 * sp[84] + -0.1333333333333335 * sp[85] + -0.1333333333333336 * sp[85] + -0.2666666666666678 * sp[87] + -0.2666666666666677 * sp[88];
    std::fill(A + 180, A + 200, 0.0);
    A[200] = 0.03333333333333337 * sp[89] + 0.03333333333333355 * sp[91];
    A[201] = 0.03333333333333335 * sp[89] + 0.0666666666666669 * sp[91];
    A[202] = 0.03333333333333335 * sp[89] + 0.03333333333333354 * sp[91];
    A[203] = 0.06666666666666671 * sp[89] + 0.03333333333333359 * sp[91];
    A[204] = -0.002380952380952378 * sp[98] + 0.03333333333333355 * sp[83] + 0.03333333333333355 * sp[84] + 0.03333333333333346 * sp[85] + 0.03333333333333356 * sp[84] + 0.03333333333333359 * sp[86] + 0.03333333333333349 * sp[87];
    A[205] = -0.001587301587301585 * sp[98] + -0.03333333333333352 * sp[83] + 0.09999999999999994 * sp[84];
    A[206] = -0.001587301587301585 * sp[98] + 0.09999999999999959 * sp[84] + -0.03333333333333362 * sp[86];
    A[207] = -0.00238095238095238 * sp[98] + -0.03333333333333392 * sp[85] + -0.03333333333333403 * sp[87];
    A[208] = 0.006349206349206347 * sp[98] + 0.1333333333333336 * sp[84] + 0.2666666666666671 * sp[85] + 0.1333333333333341 * sp[86] + 0.1333333333333344 * sp[87];
    A[209] = 0.006349206349206351 * sp[98] + 0.1333333333333335 * sp[83] + 0.1333333333333343 * sp[85] + 0.1333333333333341 * sp[84] + 0.2666666666666686 * sp[87];
    A[210] = 0.01269841269841269 * sp[98] + 0.2666666666666669 * sp[83] + 0.1333333333333343 * sp[84] + 0.1333333333333343 * sp[84] + 0.2666666666666685 * sp[86];
    A[211] = 0.003174603174603176 * sp[98] + -0.1333333333333335 * sp[83] + -0.1333333333333335 * sp[84] + -0.1333333333333341 * sp[84] + -0.1333333333333341 * sp[86];
    A[212] = 0.006349206349206343 * sp[98] + -0.2666666666666671 * sp[83] + -0.1333333333333335 * sp[84] + -0.2666666666666668 * sp[85] + -0.1333333333333344 * sp[84] + -0.1333333333333342 * sp[87];
    A[213] = 0.006349206349206349 * sp[98] + -0.1333333333333335 * sp[84] + -0.1333333333333334 * sp[85] + -0.1333333333333335 * sp[84] + -0.2666666666666676 * sp[86] + -0.2666666666666676 * sp[87];
    std::fill(A + 214, A + 234, 0.0);
    A[234] = 0.03333333333333336 * sp[89] + 0.03333333333333353 * sp[90];
    A[235] = 0.03333333333333334 * sp[89] + 0.06666666666666687 * sp[90];
    A[236] = 0.06666666666666668 * sp[89] + 0.03333333333333355 * sp[90];
    A[237] = 0.03333333333333335 * sp[89] + 0.03333333333333349 * sp[90];
    A[238] = -0.001587301587301584 * sp[98] + -0.03333333333333355 * sp[83] + -0.03333333333333358 * sp[84] + -0.03333333333333347 * sp[85] + -0.03333333333333355 * sp[84] + -0.03333333333333358 * sp[86] + -0.03333333333333347 * sp[87] + -0.1333333333333333 * sp[85] + -0.1333333333333334 * sp[87] + -0.1333333333333334 * sp[88];
    A[239] = -0.002380952380952379 * sp[98] + 0.03333333333333346 * sp[83] + 0.03333333333333345 * sp[84];
    A[240] = -0.00238095238095238 * sp[98] + 0.03333333333333369 * sp[84] + 0.03333333333333369 * sp[86];
    A[241] = -0.001587301587301588 * sp[98] + -0.09999999999999955 * sp[85] + -0.09999999999999952 * sp[87] + -0.1333333333333334 * sp[88];
    A[242] = 0.006349206349206351 * sp[98] + -0.2666666666666671 * sp[84] + -0.1333333333333334 * sp[85] + -0.266666666666667 * sp[86] + -0.1333333333333334 * sp[87] + -0.1333333333333335 * sp[87];
    A[243] = 0.006349206349206349 * sp[98] + -0.2666666666666671 * sp[83] + -0.1333333333333345 * sp[85] + -0.2666666666666671 * sp[84] + -0.1333333333333345 * sp[87] + -0.1333333333333335 * sp[85];
    A[244] = 0.003174603174603176 * sp[98] + -0.1333333333333335 * sp[83] + -0.1333333333333341 * sp[84] + -0.1333333333333335 * sp[84] + -0.1333333333333341 * sp[86];
    A[245] = 0.01269841269841269 * sp[98] + 0.266666666666667 * sp[83] + 0.266666666666667 * sp[84] + 0.1333333333333335 * sp[85] + 0.266666666666667 * sp[84] + 0.2666666666666669 * sp[86] + 0.1333333333333335 * sp[87] + 0.1333333333333335 * sp[85] + 0.1333333333333335 * sp[87] + 0.2666666666666667 * sp[88];
    A[246] = 0.006349206349206348 * sp[98] + 0.1333333333333335 * sp[83] + 0.1333333333333333 * sp[85] + 0.1333333333333335 * sp[84] + 0.1333333333333334 * sp[87] + 0.1333333333333333 * sp[87];
    A[247] = 0.006349206349206349 * sp[98] + 0.1333333333333335 * sp[84] + 0.1333333333333335 * sp[85] + 0.1333333333333335 * sp[86] + 0.1333333333333335 * sp[87] + 0.1333333333333332 * sp[85];
    std::fill(A + 248, A + 268, 0.0);
    A[268] = -0.03333333333333337 * sp[89] + -0.03333333333333336 * sp[90] + 0.03333333333333331 * sp[91];
    A[269] = -0.03333333333333334 * sp[89] + -0.03333333333333335 * sp[90];
    A[270] = -0.03333333333333335 * sp[89] + -0.03333333333333336 * sp[90];
    A[271] = -0.06666666666666669 * sp[89] + -0.06666666666666669 * sp[90] + -0.03333333333333334 * sp[91];
    A[272] = -0.001587301587301583 * sp[98] + -0.03333333333333356 * sp[83] + -0.03333333333333355 * sp[84] + -0.03333333333333348 * sp[85] + -0.1333333333333333 * sp[84] + -0.1333333333333334 * sp[86] + -0.1333333333333333 * sp[87] + -0.03333333333333351 * sp[85] + -0.0333333333333335 * sp[87] + -0.03333333333333342 * sp[88];
    A[273] = -0.002380952380952377 * sp[98] + 0.03333333333333354 * sp[83] + 0.0333333333333335 * sp[85];
    A[274] = -0.001587301587301585 * sp[98] + -0.09999999999999962 * sp[84] + -0.1333333333333332 * sp[86] + -0.09999999999999956 * sp[87];
    A[275] = -0.002380952380952379 * sp[98] + 0.03333333333333394 * sp[85] + 0.03333333333333395 * sp[88];
    A[276] = 0.006349206349206343 * sp[98] + -0.1333333333333336 * sp[84] + -0.2666666666666672 * sp[85] + -0.1333333333333335 * sp[87] + -0.1333333333333334 * sp[87] + -0.2666666666666669 * sp[88];
    A[277] = 0.00317460317460317 * sp[98] + -0.1333333333333336 * sp[83] + -0.1333333333333343 * sp[85] + -0.1333333333333334 * sp[85] + -0.1333333333333342 * sp[88];
    A[278] = 0.006349206349206343 * sp[98] + -0.2666666666666671 * sp[83] + -0.1333333333333344 * sp[84] + -0.1333333333333335 * sp[84] + -0.2666666666666668 * sp[85] + -0.1333333333333342 * sp[87];
    A[279] = 0.006349206349206348 * sp[98] + 0.1333333333333335 * sp[83] + 0.1333333333333335 * sp[84] + 0.1333333333333333 * sp[87] + 0.1333333333333333 * sp[85] + 0.1333333333333334 * sp[87];
    A[280] = 0.01269841269841268 * sp[98] + 0.2666666666666672 * sp[83] + 0.1333333333333335 * sp[84] + 0.2666666666666669 * sp[85] + 0.1333333333333335 * sp[84] + 0.2666666666666667 * sp[86] + 0.1333333333333334 * sp[87] + 0.2666666666666669 * sp[85] + 0.1333333333333334 * sp[87] + 0.2666666666666667 * sp[88];
    A[281] = 0.006349206349206346 * sp[98] + 0.1333333333333335 * sp[84] + 0.1333333333333334 * sp[85] + 0.1333333333333332 * sp[84] + 0.1333333333333334 * sp[87] + 0.1333333333333333 * sp[88];
    std::fill(A + 282, A + 302, 0.0);
    A[302] = -0.03333333333333337 * sp[89] + 0.03333333333333329 * sp[90] + -0.03333333333333335 * sp[91];
    A[303] = -0.03333333333333335 * sp[89] + -0.03333333333333331 * sp[91];
    A[304] = -0.06666666666666671 * sp[89] + -0.03333333333333334 * sp[90] + -0.06666666666666665 * sp[91];
    A[305] = -0.03333333333333335 * sp[89] + -0.03333333333333331 * sp[91];
    A[306] = -0.001587301587301586 * sp[98] + -0.1333333333333332 * sp[83] + -0.1333333333333333 * sp[84] + -0.1333333333333333 * sp[85] + -0.03333333333333353 * sp[84] + -0.03333333333333355 * sp[86] + -0.03333333333333345 * sp[87] + -0.03333333333333352 * sp[85] + -0.03333333333333355 * sp[87] + -0.03333333333333344 * sp[88];
    A[307] = -0.001587301587301586 * sp[98] + -0.1333333333333332 * sp[83] + -0.09999999999999984 * sp[84] + -0.09999999999999983 * sp[85];
    A[308] = -0.002380952380952379 * sp[98] + 0.03333333333333368 * sp[86] + 0.03333333333333374 * sp[87];
    A[309] = -0.002380952380952379 * sp[98] + 0.03333333333333388 * sp[87] + 0.03333333333333383 * sp[88];
    A[310] = 0.003174603174603175 * sp[98] + -0.1333333333333335 * sp[86] + -0.1333333333333336 * sp[87] + -0.1333333333333336 * sp[87] + -0.1333333333333335 * sp[88];
    A[311] = 0.006349206349206349 * sp[98] + -0.1333333333333336 * sp[85] + -0.1333333333333335 * sp[84] + -0.2666666666666678 * sp[87] + -0.1333333333333335 * sp[85] + -0.2666666666666677 * sp[88];
    A[312] = 0.006349206349206349 * sp[98] + -0.1333333333333335 * sp[84] + -0.1333333333333335 * sp[84] + -0.2666666666666676 * sp[86] + -0.1333333333333334 * sp[85] + -0.2666666666666676 * sp[87];
    A[313] = 0.006349206349206349 * sp[98] + 0.1333333333333332 * sp[85] + 0.1333333333333335 * sp[84] + 0.1333333333333335 * sp[86] + 0.1333333333333335 * sp[85] + 0.1333333333333335 * sp[87];
    A[314] = 0.006349206349206346 * sp[98] + 0.1333333333333332 * sp[84] + 0.1333333333333335 * sp[84] + 0.1333333333333334 * sp[87] + 0.1333333333333334 * sp[85] + 0.1333333333333333 * sp[88];
    A[315] = 0.01269841269841269 * sp[98] + 0.2666666666666665 * sp[83] + 0.1333333333333334 * sp[84] + 0.1333333333333334 * sp[85] + 0.1333333333333334 * sp[84] + 0.2666666666666667 * sp[86] + 0.2666666666666667 * sp[87] + 0.1333333333333334 * sp[85] + 0.2666666666666667 * sp[87] + 0.2666666666666666 * sp[88];
    std::fill(A + 316, A + 336, 0.0);
    A[336] = 0.03333333333333328 * sp[89] + -0.03333333333333335 * sp[90] + -0.03333333333333334 * sp[91];
    A[337] = -0.03333333333333334 * sp[89] + -0.06666666666666664 * sp[90] + -0.06666666666666664 * sp[91];
    A[338] = -0.03333333333333335 * sp[90] + -0.03333333333333332 * sp[91];
    A[339] = -0.03333333333333334 * sp[90] + -0.03333333333333335 * sp[91];
    std::fill(A + 340, A + 350, 0.0);
    A[350] = 0.002380952380952379 * sp[98] + 0.09999999999999996 * sp[83] + 0.1 * sp[84] + 0.09999999999999998 * sp[85] + 0.1 * sp[84] + 0.1 * sp[86] + 0.1 * sp[87] + 0.09999999999999998 * sp[85] + 0.1 * sp[87] + 0.1 * sp[88];
    A[351] = 0.0003968253968253956 * sp[98] + 0.03333333333333327 * sp[83] + 0.03333333333333329 * sp[84] + 0.03333333333333328 * sp[85];
    A[352] = 0.0003968253968253955 * sp[98] + 0.03333333333333333 * sp[84] + 0.03333333333333332 * sp[86] + 0.03333333333333333 * sp[87];
    A[353] = 0.0003968253968253959 * sp[98] + 0.03333333333333334 * sp[85] + 0.03333333333333337 * sp[87] + 0.03333333333333335 * sp[88];
    A[354] = -0.002380952380952378 * sp[98] + 0.03333333333333357 * sp[84] + 0.03333333333333351 * sp[85] + 0.03333333333333359 * sp[86] + 0.03333333333333349 * sp[87] + 0.03333333333333347 * sp[87] + 0.03333333333333342 * sp[88];
    A[355] = -0.002380952380952379 * sp[98] + 0.03333333333333357 * sp[83] + 0.03333333333333363 * sp[85] + 0.0333333333333336 * sp[84] + 0.03333333333333366 * sp[87] + 0.03333333333333348 * sp[85] + 0.03333333333333355 * sp[88];
    A[356] = -0.002380952380952378 * sp[98] + 0.03333333333333355 * sp[83] + 0.03333333333333356 * sp[84] + 0.03333333333333355 * sp[84] + 0.03333333333333359 * sp[86] + 0.03333333333333346 * sp[85] + 0.03333333333333349 * sp[87];
    A[357] = -0.001587301587301584 * sp[98] + -0.03333333333333355 * sp[83] + -0.03333333333333355 * sp[84] + -0.1333333333333333 * sp[85] + -0.03333333333333358 * sp[84] + -0.03333333333333358 * sp[86] + -0.1333333333333334 * sp[87] + -0.03333333333333347 * sp[85] + -0.03333333333333347 * sp[87] + -0.1333333333333334 * sp[88];
    A[358] = -0.001587301587301583 * sp[98] + -0.03333333333333356 * sp[83] + -0.1333333333333333 * sp[84] + -0.03333333333333351 * sp[85] + -0.03333333333333355 * sp[84] + -0.1333333333333334 * sp[86] + -0.0333333333333335 * sp[87] + -0.03333333333333348 * sp[85] + -0.1333333333333333 * sp[87] + -0.03333333333333342 * sp[88];
    A[359] = -0.001587301587301586 * sp[98] + -0.1333333333333332 * sp[83] + -0.03333333333333353 * sp[84] + -0.03333333333333352 * sp[85] + -0.1333333333333333 * sp[84] + -0.03333333333333355 * sp[86] + -0.03333333333333355 * sp[87] + -0.1333333333333333 * sp[85] + -0.03333333333333345 * sp[87] + -0.03333333333333344 * sp[88];
    std::fill(A + 360, A + 370, 0.0);
    A[370] = -0.02499999999999993 * sp[92] + -0.02499999999999994 * sp[93] + -0.02499999999999996 * sp[94];
    A[371] = 0.008333333333333382 * sp[92] + 0.008333333333333392 * sp[93] + 0.008333333333333364 * sp[94];
    A[372] = 0.008333333333333385 * sp[92] + 0.008333333333333384 * sp[93] + 0.008333333333333363 * sp[94];
    A[373] = 0.008333333333333385 * sp[92] + 0.008333333333333392 * sp[93] + 0.008333333333333366 * sp[94];
    std::fill(A + 374, A + 384, 0.0);
    A[384] = 0.0003968253968253956 * sp[98] + 0.03333333333333327 * sp[83] + 0.03333333333333329 * sp[84] + 0.03333333333333328 * sp[85];
    A[385] = 0.002380952380952379 * sp[98] + 0.09999999999999995 * sp[83];
    A[386] = 0.0003968253968253958 * sp[98] + -0.03333333333333335 * sp[84];
    A[387] = 0.000396825396825396 * sp[98] + -0.03333333333333332 * sp[85];
    A[388] = -0.002380952380952379 * sp[98] + -0.03333333333333346 * sp[84] + -0.03333333333333346 * sp[85];
    A[389] = -0.001587301587301586 * sp[98] + -0.03333333333333348 * sp[83] + 0.09999999999999995 * sp[85];
    A[390] = -0.001587301587301585 * sp[98] + -0.03333333333333352 * sp[83] + 0.09999999999999994 * sp[84];
    A[391] = -0.002380952380952379 * sp[98] + 0.03333333333333346 * sp[83] + 0.03333333333333345 * sp[84];
    A[392] = -0.002380952380952377 * sp[98] + 0.03333333333333354 * sp[83] + 0.0333333333333335 * sp[85];
    A[393] = -0.001587301587301586 * sp[98] + -0.1333333333333332 * sp[83] + -0.09999999999999984 * sp[84] + -0.09999999999999983 * sp[85];
    std::fill(A + 394, A + 404, 0.0);
    A[404] = -0.008333333333333351 * sp[92];
    A[405] = 0.02499999999999995 * sp[92];
    A[406] = -0.008333333333333371 * sp[92];
    A[407] = -0.008333333333333354 * sp[92];
    std::fill(A + 408, A + 418, 0.0);
    A[418] = 0.0003968253968253955 * sp[98] + 0.03333333333333333 * sp[84] + 0.03333333333333332 * sp[86] + 0.03333333333333333 * sp[87];
    A[419] = 0.0003968253968253958 * sp[98] + -0.03333333333333335 * sp[84];
    A[420] = 0.002380952380952379 * sp[98] + 0.09999999999999984 * sp[86];
    A[421] = 0.0003968253968253958 * sp[98] + -0.0333333333333333 * sp[87];
    A[422] = -0.001587301587301586 * sp[98] + -0.03333333333333369 * sp[86] + 0.09999999999999962 * sp[87];
    A[423] = -0.002380952380952379 * sp[98] + -0.03333333333333371 * sp[84] + -0.0333333333333338 * sp[87];
    A[424] = -0.001587301587301585 * sp[98] + 0.09999999999999959 * sp[84] + -0.03333333333333362 * sp[86];
    A[425] = -0.00238095238095238 * sp[98] + 0.03333333333333369 * sp[84] + 0.03333333333333369 * sp[86];
    A[426] = -0.001587301587301585 * sp[98] + -0.09999999999999962 * sp[84] + -0.1333333333333332 * sp[86] + -0.09999999999999956 * sp[87];
    A[427] = -0.002380952380952379 * sp[98] + 0.03333333333333368 * sp[86] + 0.03333333333333374 * sp[87];
    std::fill(A + 428, A + 438, 0.0);
    A[438] = -0.008333333333333427 * sp[93];
    A[439] = -0.008333333333333423 * sp[93];
    A[440] = 0.02499999999999987 * sp[93];
    A[441] = -0.008333333333333416 * sp[93];
    std::fill(A + 442, A + 452, 0.0);
    A[452] = 0.0003968253968253959 * sp[98] + 0.03333333333333334 * sp[85] + 0.03333333333333337 * sp[87] + 0.03333333333333335 * sp[88];
    A[453] = 0.000396825396825396 * sp[98] + -0.03333333333333332 * sp[85];
    A[454] = 0.0003968253968253958 * sp[98] + -0.0333333333333333 * sp[87];
    A[455] = 0.00238095238095238 * sp[98] + 0.1000000000000001 * sp[88];
    A[456] = -0.001587301587301587 * sp[98] + 0.09999999999999952 * sp[87] + -0.03333333333333409 * sp[88];
    A[457] = -0.001587301587301587 * sp[98] + 0.09999999999999956 * sp[85] + -0.03333333333333379 * sp[88];
    A[458] = -0.00238095238095238 * sp[98] + -0.03333333333333392 * sp[85] + -0.03333333333333403 * sp[87];
    A[459] = -0.001587301587301588 * sp[98] + -0.09999999999999955 * sp[85] + -0.09999999999999952 * sp[87] + -0.1333333333333334 * sp[88];
    A[460] = -0.002380952380952379 * sp[98] + 0.03333333333333394 * sp[85] + 0.03333333333333395 * sp[88];
    A[461] = -0.002380952380952379 * sp[98] + 0.03333333333333388 * sp[87] + 0.03333333333333383 * sp[88];
    std::fill(A + 462, A + 472, 0.0);
    A[472] = -0.008333333333333467 * sp[94];
    A[473] = -0.008333333333333463 * sp[94];
    A[474] = -0.008333333333333467 * sp[94];
    A[475] = 0.02499999999999987 * sp[94];
    std::fill(A + 476, A + 486, 0.0);
    A[486] = -0.002380952380952378 * sp[98] + 0.03333333333333357 * sp[84] + 0.03333333333333359 * sp[86] + 0.03333333333333347 * sp[87] + 0.03333333333333351 * sp[85] + 0.03333333333333349 * sp[87] + 0.03333333333333342 * sp[88];
    A[487] = -0.002380952380952379 * sp[98] + -0.03333333333333346 * sp[84] + -0.03333333333333346 * sp[85];
    A[488] = -0.001587301587301586 * sp[98] + -0.03333333333333369 * sp[86] + 0.09999999999999962 * sp[87];
    A[489] = -0.001587301587301587 * sp[98] + 0.09999999999999952 * sp[87] + -0.03333333333333409 * sp[88];
    A[490] = 0.01269841269841269 * sp[98] + 0.2666666666666671 * sp[86] + 0.1333333333333335 * sp[87] + 0.1333333333333335 * sp[87] + 0.2666666666666672 * sp[88];
    A[491] = 0.006349206349206351 * sp[98] + 0.2666666666666672 * sp[84] + 0.1333333333333345 * sp[87] + 0.1333333333333334 * sp[85] + 0.1333333333333344 * sp[88];
    A[492] = 0.006349206349206347 * sp[98] + 0.1333333333333336 * sp[84] + 0.1333333333333341 * sp[86] + 0.2666666666666671 * sp[85] + 0.1333333333333344 * sp[87];
    A[493] = 0.006349206349206351 * sp[98] + -0.2666666666666671 * sp[84] + -0.266666666666667 * sp[86] + -0.1333333333333335 * sp[87] + -0.1333333333333334 * sp[85] + -0.1333333333333334 * sp[87];
    A[494] = 0.006349206349206343 * sp[98] + -0.1333333333333336 * sp[84] + -0.1333333333333334 * sp[87] + -0.2666666666666672 * sp[85] + -0.1333333333333335 * sp[87] + -0.2666666666666669 * sp[88];
    A[495] = 0.003174603174603175 * sp[98] + -0.1333333333333335 * sp[86] + -0.1333333333333336 * sp[87] + -0.1333333333333336 * sp[87] + -0.1333333333333335 * sp[88];
    std::fill(A + 496, A + 506, 0.0);
    A[506] = 0.03333333333333337 * sp[93] + 0.03333333333333339 * sp[94];
    A[507] = 0.03333333333333337 * sp[93] + 0.03333333333333337 * sp[94];
    A[508] = 0.03333333333333337 * sp[93] + 0.06666666666666672 * sp[94];
    A[509] = 0.06666666666666671 * sp[93] + 0.03333333333333332 * sp[94];
    std::fill(A + 510, A + 520, 0.0);
    A[520] = -0.002380952380952379 * sp[98] + 0.03333333333333357 * sp[83] + 0.0333333333333336 * sp[84] + 0.03333333333333348 * sp[85] + 0.03333333333333363 * sp[85] + 0.03333333333333366 * sp[87] + 0.03333333333333355 * sp[88];
    A[521] = -0.001587301587301586 * sp[98] + -0.03333333333333348 * sp[83] + 0.09999999999999995 * sp[85];
    A[522] = -0.002380952380952379 * sp[98] + -0.03333333333333371 * sp[84] + -0.0333333333333338 * sp[87];
    A[523] = -0.001587301587301587 * sp[98] + 0.09999999999999956 * sp[85] + -0.03333333333333379 * sp[88];
    A[524] = 0.006349206349206351 * sp[98] + 0.2666666666666672 * sp[84] + 0.1333333333333334 * sp[85] + 0.1333333333333345 * sp[87] + 0.1333333333333344 * sp[88];
    A[525] = 0.01269841269841269 * sp[98] + 0.2666666666666671 * sp[83] + 0.1333333333333345 * sp[85] + 0.1333333333333345 * sp[85] + 0.2666666666666688 * sp[88];
    A[526] = 0.006349206349206351 * sp[98] + 0.1333333333333335 * sp[83] + 0.1333333333333341 * sp[84] + 0.1333333333333343 * sp[85] + 0.2666666666666686 * sp[87];
    A[527] = 0.006349206349206349 * sp[98] + -0.2666666666666671 * sp[83] + -0.2666666666666671 * sp[84] + -0.1333333333333335 * sp[85] + -0.1333333333333345 * sp[85] + -0.1333333333333345 * sp[87];
    A[528] = 0.00317460317460317 * sp[98] + -0.1333333333333336 * sp[83] + -0.1333333333333334 * sp[85] + -0.1333333333333343 * sp[85] + -0.1333333333333342 * sp[88];
    A[529] = 0.006349206349206349 * sp[98] + -0.1333333333333335 * sp[84] + -0.1333333333333335 * sp[85] + -0.1333333333333336 * sp[85] + -0.2666666666666678 * sp[87] + -0.2666666666666677 * sp[88];
    std::fill(A + 530, A + 540, 0.0);
    A[540] = 0.03333333333333337 * sp[92] + 0.03333333333333355 * sp[94];
    A[541] = 0.03333333333333335 * sp[92] + 0.0666666666666669 * sp[94];
    A[542] = 0.03333333333333335 * sp[92] + 0.03333333333333354 * sp[94];
    A[543] = 0.06666666666666671 * sp[92] + 0.03333333333333359 * sp[94];
    std::fill(A + 544, A + 554, 0.0);
    A[554] = -0.002380952380952378 * sp[98] + 0.03333333333333355 * sp[83] + 0.03333333333333355 * sp[84] + 0.03333333333333346 * sp[85] + 0.03333333333333356 * sp[84] + 0.03333333333333359 * sp[86] + 0.03333333333333349 * sp[87];
    A[555] = -0.001587301587301585 * sp[98] + -0.03333333333333352 * sp[83] + 0.09999999999999994 * sp[84];
    A[556] = -0.001587301587301585 * sp[98] + 0.09999999999999959 * sp[84] + -0.03333333333333362 * sp[86];
    A[557] = -0.00238095238095238 * sp[98] + -0.03333333333333392 * sp[85] + -0.03333333333333403 * sp[87];
    A[558] = 0.006349206349206347 * sp[98] + 0.1333333333333336 * sp[84] + 0.2666666666666671 * sp[85] + 0.1333333333333341 * sp[86] + 0.1333333333333344 * sp[87];
    A[559] = 0.006349206349206351 * sp[98] + 0.1333333333333335 * sp[83] + 0.1333333333333343 * sp[85] + 0.1333333333333341 * sp[84] + 0.2666666666666686 * sp[87];
    A[560] = 0.01269841269841269 * sp[98] + 0.2666666666666669 * sp[83] + 0.1333333333333343 * sp[84] + 0.1333333333333343 * sp[84] + 0.2666666666666685 * sp[86];
    A[561] = 0.003174603174603176 * sp[98] + -0.1333333333333335 * sp[83] + -0.1333333333333335 * sp[84] + -0.1333333333333341 * sp[84] + -0.1333333333333341 * sp[86];
    A[562] = 0.006349206349206343 * sp[98] + -0.2666666666666671 * sp[83] + -0.1333333333333335 * sp[84] + -0.2666666666666668 * sp[85] + -0.1333333333333344 * sp[84] + -0.1333333333333342 * sp[87];
    A[563] = 0.006349206349206349 * sp[98] + -0.1333333333333335 * sp[84] + -0.1333333333333334 * sp[85] + -0.1333333333333335 * sp[84] + -0.2666666666666676 * sp[86] + -0.2666666666666676 * sp[87];
    std::fill(A + 564, A + 574, 0.0);
    A[574] = 0.03333333333333336 * sp[92] + 0.03333333333333353 * sp[93];
    A[575] = 0.03333333333333334 * sp[92] + 0.06666666666666687 * sp[93];
    A[576] = 0.06666666666666668 * sp[92] + 0.03333333333333355 * sp[93];
    A[577] = 0.03333333333333335 * sp[92] + 0.03333333333333349 * sp[93];
    std::fill(A + 578, A + 588, 0.0);
    A[588] = -0.001587301587301584 * sp[98] + -0.03333333333333355 * sp[83] + -0.03333333333333358 * sp[84] + -0.03333333333333347 * sp[85] + -0.03333333333333355 * sp[84] + -0.03333333333333358 * sp[86] + -0.03333333333333347 * sp[87] + -0.1333333333333333 * sp[85] + -0.1333333333333334 * sp[87] + -0.1333333333333334 * sp[88];
    A[589] = -0.002380952380952379 * sp[98] + 0.03333333333333346 * sp[83] + 0.03333333333333345 * sp[84];
    A[590] = -0.00238095238095238 * sp[98] + 0.03333333333333369 * sp[84] + 0.03333333333333369 * sp[86];
    A[591] = -0.001587301587301588 * sp[98] + -0.09999999999999955 * sp[85] + -0.09999999999999952 * sp[87] + -0.1333333333333334 * sp[88];
    A[592] = 0.006349206349206351 * sp[98] + -0.2666666666666671 * sp[84] + -0.1333333333333334 * sp[85] + -0.266666666666667 * sp[86] + -0.1333333333333334 * sp[87] + -0.1333333333333335 * sp[87];
    A[593] = 0.006349206349206349 * sp[98] + -0.2666666666666671 * sp[83] + -0.1333333333333345 * sp[85] + -0.2666666666666671 * sp[84] + -0.1333333333333345 * sp[87] + -0.1333333333333335 * sp[85];
    A[594] = 0.003174603174603176 * sp[98] + -0.1333333333333335 * sp[83] + -0.1333333333333341 * sp[84] + -0.1333333333333335 * sp[84] + -0.1333333333333341 * sp[86];
    A[595] = 0.01269841269841269 * sp[98] + 0.266666666666667 * sp[83] + 0.266666666666667 * sp[84] + 0.1333333333333335 * sp[85] + 0.266666666666667 * sp[84] + 0.2666666666666669 * sp[86] + 0.1333333333333335 * sp[87] + 0.1333333333333335 * sp[85] + 0.1333333333333335 * sp[87] + 0.2666666666666667 * sp[88];
    A[596] = 0.006349206349206348 * sp[98] + 0.1333333333333335 * sp[83] + 0.1333333333333333 * sp[85] + 0.1333333333333335 * sp[84] + 0.1333333333333334 * sp[87] + 0.1333333333333333 * sp[87];
    A[597] = 0.006349206349206349 * sp[98] + 0.1333333333333335 * sp[84] + 0.1333333333333335 * sp[85] + 0.1333333333333335 * sp[86] + 0.1333333333333335 * sp[87] + 0.1333333333333332 * sp[85];
    std::fill(A + 598, A + 608, 0.0);
    A[608] = -0.03333333333333337 * sp[92] + -0.03333333333333336 * sp[93] + 0.03333333333333331 * sp[94];
    A[609] = -0.03333333333333334 * sp[92] + -0.03333333333333335 * sp[93];
    A[610] = -0.03333333333333335 * sp[92] + -0.03333333333333336 * sp[93];
    A[611] = -0.06666666666666669 * sp[92] + -0.06666666666666669 * sp[93] + -0.03333333333333334 * sp[94];
    std::fill(A + 612, A + 622, 0.0);
    A[622] = -0.001587301587301583 * sp[98] + -0.03333333333333356 * sp[83] + -0.03333333333333355 * sp[84] + -0.03333333333333348 * sp[85] + -0.1333333333333333 * sp[84] + -0.1333333333333334 * sp[86] + -0.1333333333333333 * sp[87] + -0.03333333333333351 * sp[85] + -0.0333333333333335 * sp[87] + -0.03333333333333342 * sp[88];
    A[623] = -0.002380952380952377 * sp[98] + 0.03333333333333354 * sp[83] + 0.0333333333333335 * sp[85];
    A[624] = -0.001587301587301585 * sp[98] + -0.09999999999999962 * sp[84] + -0.1333333333333332 * sp[86] + -0.09999999999999956 * sp[87];
    A[625] = -0.002380952380952379 * sp[98] + 0.03333333333333394 * sp[85] + 0.03333333333333395 * sp[88];
    A[626] = 0.006349206349206343 * sp[98] + -0.1333333333333336 * sp[84] + -0.2666666666666672 * sp[85] + -0.1333333333333335 * sp[87] + -0.1333333333333334 * sp[87] + -0.2666666666666669 * sp[88];
    A[627] = 0.00317460317460317 * sp[98] + -0.1333333333333336 * sp[83] + -0.1333333333333343 * sp[85] + -0.1333333333333334 * sp[85] + -0.1333333333333342 * sp[88];
    A[628] = 0.006349206349206343 * sp[98] + -0.2666666666666671 * sp[83] + -0.1333333333333344 * sp[84] + -0.1333333333333335 * sp[84] + -0.2666666666666668 * sp[85] + -0.1333333333333342 * sp[87];
    A[629] = 0.006349206349206348 * sp[98] + 0.1333333333333335 * sp[83] + 0.1333333333333335 * sp[84] + 0.1333333333333333 * sp[87] + 0.1333333333333333 * sp[85] + 0.1333333333333334 * sp[87];
    A[630] = 0.01269841269841268 * sp[98] + 0.2666666666666672 * sp[83] + 0.1333333333333335 * sp[84] + 0.2666666666666669 * sp[85] + 0.1333333333333335 * sp[84] + 0.2666666666666667 * sp[86] + 0.1333333333333334 * sp[87] + 0.2666666666666669 * sp[85] + 0.1333333333333334 * sp[87] + 0.2666666666666667 * sp[88];
    A[631] = 0.006349206349206346 * sp[98] + 0.1333333333333335 * sp[84] + 0.1333333333333334 * sp[85] + 0.1333333333333332 * sp[84] + 0.1333333333333334 * sp[87] + 0.1333333333333333 * sp[88];
    std::fill(A + 632, A + 642, 0.0);
    A[642] = -0.03333333333333337 * sp[92] + 0.03333333333333329 * sp[93] + -0.03333333333333335 * sp[94];
    A[643] = -0.03333333333333335 * sp[92] + -0.03333333333333331 * sp[94];
    A[644] = -0.06666666666666671 * sp[92] + -0.03333333333333334 * sp[93] + -0.06666666666666665 * sp[94];
    A[645] = -0.03333333333333335 * sp[92] + -0.03333333333333331 * sp[94];
    std::fill(A + 646, A + 656, 0.0);
    A[656] = -0.001587301587301586 * sp[98] + -0.1333333333333332 * sp[83] + -0.1333333333333333 * sp[84] + -0.1333333333333333 * sp[85] + -0.03333333333333353 * sp[84] + -0.03333333333333355 * sp[86] + -0.03333333333333345 * sp[87] + -0.03333333333333352 * sp[85] + -0.03333333333333355 * sp[87] + -0.03333333333333344 * sp[88];
    A[657] = -0.001587301587301586 * sp[98] + -0.1333333333333332 * sp[83] + -0.09999999999999984 * sp[84] + -0.09999999999999983 * sp[85];
    A[658] = -0.002380952380952379 * sp[98] + 0.03333333333333368 * sp[86] + 0.03333333333333374 * sp[87];
    A[659] = -0.002380952380952379 * sp[98] + 0.03333333333333388 * sp[87] + 0.03333333333333383 * sp[88];
    A[660] = 0.003174603174603175 * sp[98] + -0.1333333333333335 * sp[86] + -0.1333333333333336 * sp[87] + -0.1333333333333336 * sp[87] + -0.1333333333333335 * sp[88];
    A[661] = 0.006349206349206349 * sp[98] + -0.1333333333333336 * sp[85] + -0.1333333333333335 * sp[84] + -0.2666666666666678 * sp[87] + -0.1333333333333335 * sp[85] + -0.2666666666666677 * sp[88];
    A[662] = 0.006349206349206349 * sp[98] + -0.1333333333333335 * sp[84] + -0.1333333333333335 * sp[84] + -0.2666666666666676 * sp[86] + -0.1333333333333334 * sp[85] + -0.2666666666666676 * sp[87];
    A[663] = 0.006349206349206349 * sp[98] + 0.1333333333333332 * sp[85] + 0.1333333333333335 * sp[84] + 0.1333333333333335 * sp[86] + 0.1333333333333335 * sp[85] + 0.1333333333333335 * sp[87];
    A[664] = 0.006349206349206346 * sp[98] + 0.1333333333333332 * sp[84] + 0.1333333333333335 * sp[84] + 0.1333333333333334 * sp[87] + 0.1333333333333334 * sp[85] + 0.1333333333333333 * sp[88];
    A[665] = 0.01269841269841269 * sp[98] + 0.2666666666666665 * sp[83] + 0.1333333333333334 * sp[84] + 0.1333333333333334 * sp[85] + 0.1333333333333334 * sp[84] + 0.2666666666666667 * sp[86] + 0.2666666666666667 * sp[87] + 0.1333333333333334 * sp[85] + 0.2666666666666667 * sp[87] + 0.2666666666666666 * sp[88];
    std::fill(A + 666, A + 676, 0.0);
    A[676] = 0.03333333333333328 * sp[92] + -0.03333333333333335 * sp[93] + -0.03333333333333334 * sp[94];
    A[677] = -0.03333333333333334 * sp[92] + -0.06666666666666664 * sp[93] + -0.06666666666666664 * sp[94];
    A[678] = -0.03333333333333335 * sp[93] + -0.03333333333333332 * sp[94];
    A[679] = -0.03333333333333334 * sp[93] + -0.03333333333333335 * sp[94];
    std::fill(A + 680, A + 700, 0.0);
    A[700] = 0.002380952380952379 * sp[98] + 0.09999999999999996 * sp[83] + 0.1 * sp[84] + 0.09999999999999998 * sp[85] + 0.1 * sp[84] + 0.1 * sp[86] + 0.1 * sp[87] + 0.09999999999999998 * sp[85] + 0.1 * sp[87] + 0.1 * sp[88];
    A[701] = 0.0003968253968253956 * sp[98] + 0.03333333333333327 * sp[83] + 0.03333333333333329 * sp[84] + 0.03333333333333328 * sp[85];
    A[702] = 0.0003968253968253955 * sp[98] + 0.03333333333333333 * sp[84] + 0.03333333333333332 * sp[86] + 0.03333333333333333 * sp[87];
    A[703] = 0.0003968253968253959 * sp[98] + 0.03333333333333334 * sp[85] + 0.03333333333333337 * sp[87] + 0.03333333333333335 * sp[88];
    A[704] = -0.002380952380952378 * sp[98] + 0.03333333333333357 * sp[84] + 0.03333333333333351 * sp[85] + 0.03333333333333359 * sp[86] + 0.03333333333333349 * sp[87] + 0.03333333333333347 * sp[87] + 0.03333333333333342 * sp[88];
    A[705] = -0.002380952380952379 * sp[98] + 0.03333333333333357 * sp[83] + 0.03333333333333363 * sp[85] + 0.0333333333333336 * sp[84] + 0.03333333333333366 * sp[87] + 0.03333333333333348 * sp[85] + 0.03333333333333355 * sp[88];
    A[706] = -0.002380952380952378 * sp[98] + 0.03333333333333355 * sp[83] + 0.03333333333333356 * sp[84] + 0.03333333333333355 * sp[84] + 0.03333333333333359 * sp[86] + 0.03333333333333346 * sp[85] + 0.03333333333333349 * sp[87];
    A[707] = -0.001587301587301584 * sp[98] + -0.03333333333333355 * sp[83] + -0.03333333333333355 * sp[84] + -0.1333333333333333 * sp[85] + -0.03333333333333358 * sp[84] + -0.03333333333333358 * sp[86] + -0.1333333333333334 * sp[87] + -0.03333333333333347 * sp[85] + -0.03333333333333347 * sp[87] + -0.1333333333333334 * sp[88];
    A[708] = -0.001587301587301583 * sp[98] + -0.03333333333333356 * sp[83] + -0.1333333333333333 * sp[84] + -0.03333333333333351 * sp[85] + -0.03333333333333355 * sp[84] + -0.1333333333333334 * sp[86] + -0.0333333333333335 * sp[87] + -0.03333333333333348 * sp[85] + -0.1333333333333333 * sp[87] + -0.03333333333333342 * sp[88];
    A[709] = -0.001587301587301586 * sp[98] + -0.1333333333333332 * sp[83] + -0.03333333333333353 * sp[84] + -0.03333333333333352 * sp[85] + -0.1333333333333333 * sp[84] + -0.03333333333333355 * sp[86] + -0.03333333333333355 * sp[87] + -0.1333333333333333 * sp[85] + -0.03333333333333345 * sp[87] + -0.03333333333333344 * sp[88];
    A[710] = -0.02499999999999993 * sp[95] + -0.02499999999999994 * sp[96] + -0.02499999999999996 * sp[97];
    A[711] = 0.008333333333333382 * sp[95] + 0.008333333333333392 * sp[96] + 0.008333333333333364 * sp[97];
    A[712] = 0.008333333333333385 * sp[95] + 0.008333333333333384 * sp[96] + 0.008333333333333363 * sp[97];
    A[713] = 0.008333333333333385 * sp[95] + 0.008333333333333392 * sp[96] + 0.008333333333333366 * sp[97];
    std::fill(A + 714, A + 734, 0.0);
    A[734] = 0.0003968253968253956 * sp[98] + 0.03333333333333327 * sp[83] + 0.03333333333333329 * sp[84] + 0.03333333333333328 * sp[85];
    A[735] = 0.002380952380952379 * sp[98] + 0.09999999999999995 * sp[83];
    A[736] = 0.0003968253968253958 * sp[98] + -0.03333333333333335 * sp[84];
    A[737] = 0.000396825396825396 * sp[98] + -0.03333333333333332 * sp[85];
    A[738] = -0.002380952380952379 * sp[98] + -0.03333333333333346 * sp[84] + -0.03333333333333346 * sp[85];
    A[739] = -0.001587301587301586 * sp[98] + -0.03333333333333348 * sp[83] + 0.09999999999999995 * sp[85];
    A[740] = -0.001587301587301585 * sp[98] + -0.03333333333333352 * sp[83] + 0.09999999999999994 * sp[84];
    A[741] = -0.002380952380952379 * sp[98] + 0.03333333333333346 * sp[83] + 0.03333333333333345 * sp[84];
    A[742] = -0.002380952380952377 * sp[98] + 0.03333333333333354 * sp[83] + 0.0333333333333335 * sp[85];
    A[743] = -0.001587301587301586 * sp[98] + -0.1333333333333332 * sp[83] + -0.09999999999999984 * sp[84] + -0.09999999999999983 * sp[85];
    A[744] = -0.008333333333333351 * sp[95];
    A[745] = 0.02499999999999995 * sp[95];
    A[746] = -0.008333333333333371 * sp[95];
    A[747] = -0.008333333333333354 * sp[95];
    std::fill(A + 748, A + 768, 0.0);
    A[768] = 0.0003968253968253955 * sp[98] + 0.03333333333333333 * sp[84] + 0.03333333333333332 * sp[86] + 0.03333333333333333 * sp[87];
    A[769] = 0.0003968253968253958 * sp[98] + -0.03333333333333335 * sp[84];
    A[770] = 0.002380952380952379 * sp[98] + 0.09999999999999984 * sp[86];
    A[771] = 0.0003968253968253958 * sp[98] + -0.0333333333333333 * sp[87];
    A[772] = -0.001587301587301586 * sp[98] + -0.03333333333333369 * sp[86] + 0.09999999999999962 * sp[87];
    A[773] = -0.002380952380952379 * sp[98] + -0.03333333333333371 * sp[84] + -0.0333333333333338 * sp[87];
    A[774] = -0.001587301587301585 * sp[98] + 0.09999999999999959 * sp[84] + -0.03333333333333362 * sp[86];
    A[775] = -0.00238095238095238 * sp[98] + 0.03333333333333369 * sp[84] + 0.03333333333333369 * sp[86];
    A[776] = -0.001587301587301585 * sp[98] + -0.09999999999999962 * sp[84] + -0.1333333333333332 * sp[86] + -0.09999999999999956 * sp[87];
    A[777] = -0.002380952380952379 * sp[98] + 0.03333333333333368 * sp[86] + 0.03333333333333374 * sp[87];
    A[778] = -0.008333333333333427 * sp[96];
    A[779] = -0.008333333333333423 * sp[96];
    A[780] = 0.02499999999999987 * sp[96];
    A[781] = -0.008333333333333416 * sp[96];
    std::fill(A + 782, A + 802, 0.0);
    A[802] = 0.0003968253968253959 * sp[98] + 0.03333333333333334 * sp[85] + 0.03333333333333337 * sp[87] + 0.03333333333333335 * sp[88];
    A[803] = 0.000396825396825396 * sp[98] + -0.03333333333333332 * sp[85];
    A[804] = 0.0003968253968253958 * sp[98] + -0.0333333333333333 * sp[87];
    A[805] = 0.00238095238095238 * sp[98] + 0.1000000000000001 * sp[88];
    A[806] = -0.001587301587301587 * sp[98] + 0.09999999999999952 * sp[87] + -0.03333333333333409 * sp[88];
    A[807] = -0.001587301587301587 * sp[98] + 0.09999999999999956 * sp[85] + -0.03333333333333379 * sp[88];
    A[808] = -0.00238095238095238 * sp[98] + -0.03333333333333392 * sp[85] + -0.03333333333333403 * sp[87];
    A[809] = -0.001587301587301588 * sp[98] + -0.09999999999999955 * sp[85] + -0.09999999999999952 * sp[87] + -0.1333333333333334 * sp[88];
    A[810] = -0.002380952380952379 * sp[98] + 0.03333333333333394 * sp[85] + 0.03333333333333395 * sp[88];
    A[811] = -0.002380952380952379 * sp[98] + 0.03333333333333388 * sp[87] + 0.03333333333333383 * sp[88];
    A[812] = -0.008333333333333467 * sp[97];
    A[813] = -0.008333333333333463 * sp[97];
    A[814] = -0.008333333333333467 * sp[97];
    A[815] = 0.02499999999999987 * sp[97];
    std::fill(A + 816, A + 836, 0.0);
    A[836] = -0.002380952380952378 * sp[98] + 0.03333333333333357 * sp[84] + 0.03333333333333359 * sp[86] + 0.03333333333333347 * sp[87] + 0.03333333333333351 * sp[85] + 0.03333333333333349 * sp[87] + 0.03333333333333342 * sp[88];
    A[837] = -0.002380952380952379 * sp[98] + -0.03333333333333346 * sp[84] + -0.03333333333333346 * sp[85];
    A[838] = -0.001587301587301586 * sp[98] + -0.03333333333333369 * sp[86] + 0.09999999999999962 * sp[87];
    A[839] = -0.001587301587301587 * sp[98] + 0.09999999999999952 * sp[87] + -0.03333333333333409 * sp[88];
    A[840] = 0.01269841269841269 * sp[98] + 0.2666666666666671 * sp[86] + 0.1333333333333335 * sp[87] + 0.1333333333333335 * sp[87] + 0.2666666666666672 * sp[88];
    A[841] = 0.006349206349206351 * sp[98] + 0.2666666666666672 * sp[84] + 0.1333333333333345 * sp[87] + 0.1333333333333334 * sp[85] + 0.1333333333333344 * sp[88];
    A[842] = 0.006349206349206347 * sp[98] + 0.1333333333333336 * sp[84] + 0.1333333333333341 * sp[86] + 0.2666666666666671 * sp[85] + 0.1333333333333344 * sp[87];
    A[843] = 0.006349206349206351 * sp[98] + -0.2666666666666671 * sp[84] + -0.266666666666667 * sp[86] + -0.1333333333333335 * sp[87] + -0.1333333333333334 * sp[85] + -0.1333333333333334 * sp[87];
    A[844] = 0.006349206349206343 * sp[98] + -0.1333333333333336 * sp[84] + -0.1333333333333334 * sp[87] + -0.2666666666666672 * sp[85] + -0.1333333333333335 * sp[87] + -0.2666666666666669 * sp[88];
    A[845] = 0.003174603174603175 * sp[98] + -0.1333333333333335 * sp[86] + -0.1333333333333336 * sp[87] + -0.1333333333333336 * sp[87] + -0.1333333333333335 * sp[88];
    A[846] = 0.03333333333333337 * sp[96] + 0.03333333333333339 * sp[97];
    A[847] = 0.03333333333333337 * sp[96] + 0.03333333333333337 * sp[97];
    A[848] = 0.03333333333333337 * sp[96] + 0.06666666666666672 * sp[97];
    A[849] = 0.06666666666666671 * sp[96] + 0.03333333333333332 * sp[97];
    std::fill(A + 850, A + 870, 0.0);
    A[870] = -0.002380952380952379 * sp[98] + 0.03333333333333357 * sp[83] + 0.0333333333333336 * sp[84] + 0.03333333333333348 * sp[85] + 0.03333333333333363 * sp[85] + 0.03333333333333366 * sp[87] + 0.03333333333333355 * sp[88];
    A[871] = -0.001587301587301586 * sp[98] + -0.03333333333333348 * sp[83] + 0.09999999999999995 * sp[85];
    A[872] = -0.002380952380952379 * sp[98] + -0.03333333333333371 * sp[84] + -0.0333333333333338 * sp[87];
    A[873] = -0.001587301587301587 * sp[98] + 0.09999999999999956 * sp[85] + -0.03333333333333379 * sp[88];
    A[874] = 0.006349206349206351 * sp[98] + 0.2666666666666672 * sp[84] + 0.1333333333333334 * sp[85] + 0.1333333333333345 * sp[87] + 0.1333333333333344 * sp[88];
    A[875] = 0.01269841269841269 * sp[98] + 0.2666666666666671 * sp[83] + 0.1333333333333345 * sp[85] + 0.1333333333333345 * sp[85] + 0.2666666666666688 * sp[88];
    A[876] = 0.006349206349206351 * sp[98] + 0.1333333333333335 * sp[83] + 0.1333333333333341 * sp[84] + 0.1333333333333343 * sp[85] + 0.2666666666666686 * sp[87];
    A[877] = 0.006349206349206349 * sp[98] + -0.2666666666666671 * sp[83] + -0.2666666666666671 * sp[84] + -0.1333333333333335 * sp[85] + -0.1333333333333345 * sp[85] + -0.1333333333333345 * sp[87];
    A[878] = 0.00317460317460317 * sp[98] + -0.1333333333333336 * sp[83] + -0.1333333333333334 * sp[85] + -0.1333333333333343 * sp[85] + -0.1333333333333342 * sp[88];
    A[879] = 0.006349206349206349 * sp[98] + -0.1333333333333335 * sp[84] + -0.1333333333333335 * sp[85] + -0.1333333333333336 * sp[85] + -0.2666666666666678 * sp[87] + -0.2666666666666677 * sp[88];
    A[880] = 0.03333333333333337 * sp[95] + 0.03333333333333355 * sp[97];
    A[881] = 0.03333333333333335 * sp[95] + 0.0666666666666669 * sp[97];
    A[882] = 0.03333333333333335 * sp[95] + 0.03333333333333354 * sp[97];
    A[883] = 0.06666666666666671 * sp[95] + 0.03333333333333359 * sp[97];
    std::fill(A + 884, A + 904, 0.0);
    A[904] = -0.002380952380952378 * sp[98] + 0.03333333333333355 * sp[83] + 0.03333333333333355 * sp[84] + 0.03333333333333346 * sp[85] + 0.03333333333333356 * sp[84] + 0.03333333333333359 * sp[86] + 0.03333333333333349 * sp[87];
    A[905] = -0.001587301587301585 * sp[98] + -0.03333333333333352 * sp[83] + 0.09999999999999994 * sp[84];
    A[906] = -0.001587301587301585 * sp[98] + 0.09999999999999959 * sp[84] + -0.03333333333333362 * sp[86];
    A[907] = -0.00238095238095238 * sp[98] + -0.03333333333333392 * sp[85] + -0.03333333333333403 * sp[87];
    A[908] = 0.006349206349206347 * sp[98] + 0.1333333333333336 * sp[84] + 0.2666666666666671 * sp[85] + 0.1333333333333341 * sp[86] + 0.1333333333333344 * sp[87];
    A[909] = 0.006349206349206351 * sp[98] + 0.1333333333333335 * sp[83] + 0.1333333333333343 * sp[85] + 0.1333333333333341 * sp[84] + 0.2666666666666686 * sp[87];
    A[910] = 0.01269841269841269 * sp[98] + 0.2666666666666669 * sp[83] + 0.1333333333333343 * sp[84] + 0.1333333333333343 * sp[84] + 0.2666666666666685 * sp[86];
    A[911] = 0.003174603174603176 * sp[98] + -0.1333333333333335 * sp[83] + -0.1333333333333335 * sp[84] + -0.1333333333333341 * sp[84] + -0.1333333333333341 * sp[86];
    A[912] = 0.006349206349206343 * sp[98] + -0.2666666666666671 * sp[83] + -0.1333333333333335 * sp[84] + -0.2666666666666668 * sp[85] + -0.1333333333333344 * sp[84] + -0.1333333333333342 * sp[87];
    A[913] = 0.006349206349206349 * sp[98] + -0.1333333333333335 * sp[84] + -0.1333333333333334 * sp[85] + -0.1333333333333335 * sp[84] + -0.2666666666666676 * sp[86] + -0.2666666666666676 * sp[87];
    A[914] = 0.03333333333333336 * sp[95] + 0.03333333333333353 * sp[96];
    A[915] = 0.03333333333333334 * sp[95] + 0.06666666666666687 * sp[96];
    A[916] = 0.06666666666666668 * sp[95] + 0.03333333333333355 * sp[96];
    A[917] = 0.03333333333333335 * sp[95] + 0.03333333333333349 * sp[96];
    std::fill(A + 918, A + 938, 0.0);
    A[938] = -0.001587301587301584 * sp[98] + -0.03333333333333355 * sp[83] + -0.03333333333333358 * sp[84] + -0.03333333333333347 * sp[85] + -0.03333333333333355 * sp[84] + -0.03333333333333358 * sp[86] + -0.03333333333333347 * sp[87] + -0.1333333333333333 * sp[85] + -0.1333333333333334 * sp[87] + -0.1333333333333334 * sp[88];
    A[939] = -0.002380952380952379 * sp[98] + 0.03333333333333346 * sp[83] + 0.03333333333333345 * sp[84];
    A[940] = -0.00238095238095238 * sp[98] + 0.03333333333333369 * sp[84] + 0.03333333333333369 * sp[86];
    A[941] = -0.001587301587301588 * sp[98] + -0.09999999999999955 * sp[85] + -0.09999999999999952 * sp[87] + -0.1333333333333334 * sp[88];
    A[942] = 0.006349206349206351 * sp[98] + -0.2666666666666671 * sp[84] + -0.1333333333333334 * sp[85] + -0.266666666666667 * sp[86] + -0.1333333333333334 * sp[87] + -0.1333333333333335 * sp[87];
    A[943] = 0.006349206349206349 * sp[98] + -0.2666666666666671 * sp[83] + -0.1333333333333345 * sp[85] + -0.2666666666666671 * sp[84] + -0.1333333333333345 * sp[87] + -0.1333333333333335 * sp[85];
    A[944] = 0.003174603174603176 * sp[98] + -0.1333333333333335 * sp[83] + -0.1333333333333341 * sp[84] + -0.1333333333333335 * sp[84] + -0.1333333333333341 * sp[86];
    A[945] = 0.01269841269841269 * sp[98] + 0.266666666666667 * sp[83] + 0.266666666666667 * sp[84] + 0.1333333333333335 * sp[85] + 0.266666666666667 * sp[84] + 0.2666666666666669 * sp[86] + 0.1333333333333335 * sp[87] + 0.1333333333333335 * sp[85] + 0.1333333333333335 * sp[87] + 0.2666666666666667 * sp[88];
    A[946] = 0.006349206349206348 * sp[98] + 0.1333333333333335 * sp[83] + 0.1333333333333333 * sp[85] + 0.1333333333333335 * sp[84] + 0.1333333333333334 * sp[87] + 0.1333333333333333 * sp[87];
    A[947] = 0.006349206349206349 * sp[98] + 0.1333333333333335 * sp[84] + 0.1333333333333335 * sp[85] + 0.1333333333333335 * sp[86] + 0.1333333333333335 * sp[87] + 0.1333333333333332 * sp[85];
    A[948] = -0.03333333333333337 * sp[95] + -0.03333333333333336 * sp[96] + 0.03333333333333331 * sp[97];
    A[949] = -0.03333333333333334 * sp[95] + -0.03333333333333335 * sp[96];
    A[950] = -0.03333333333333335 * sp[95] + -0.03333333333333336 * sp[96];
    A[951] = -0.06666666666666669 * sp[95] + -0.06666666666666669 * sp[96] + -0.03333333333333334 * sp[97];
    std::fill(A + 952, A + 972, 0.0);
    A[972] = -0.001587301587301583 * sp[98] + -0.03333333333333356 * sp[83] + -0.03333333333333355 * sp[84] + -0.03333333333333348 * sp[85] + -0.1333333333333333 * sp[84] + -0.1333333333333334 * sp[86] + -0.1333333333333333 * sp[87] + -0.03333333333333351 * sp[85] + -0.0333333333333335 * sp[87] + -0.03333333333333342 * sp[88];
    A[973] = -0.002380952380952377 * sp[98] + 0.03333333333333354 * sp[83] + 0.0333333333333335 * sp[85];
    A[974] = -0.001587301587301585 * sp[98] + -0.09999999999999962 * sp[84] + -0.1333333333333332 * sp[86] + -0.09999999999999956 * sp[87];
    A[975] = -0.002380952380952379 * sp[98] + 0.03333333333333394 * sp[85] + 0.03333333333333395 * sp[88];
    A[976] = 0.006349206349206343 * sp[98] + -0.1333333333333336 * sp[84] + -0.2666666666666672 * sp[85] + -0.1333333333333335 * sp[87] + -0.1333333333333334 * sp[87] + -0.2666666666666669 * sp[88];
    A[977] = 0.00317460317460317 * sp[98] + -0.1333333333333336 * sp[83] + -0.1333333333333343 * sp[85] + -0.1333333333333334 * sp[85] + -0.1333333333333342 * sp[88];
    A[978] = 0.006349206349206343 * sp[98] + -0.2666666666666671 * sp[83] + -0.1333333333333344 * sp[84] + -0.1333333333333335 * sp[84] + -0.2666666666666668 * sp[85] + -0.1333333333333342 * sp[87];
    A[979] = 0.006349206349206348 * sp[98] + 0.1333333333333335 * sp[83] + 0.1333333333333335 * sp[84] + 0.1333333333333333 * sp[87] + 0.1333333333333333 * sp[85] + 0.1333333333333334 * sp[87];
    A[980] = 0.01269841269841268 * sp[98] + 0.2666666666666672 * sp[83] + 0.1333333333333335 * sp[84] + 0.2666666666666669 * sp[85] + 0.1333333333333335 * sp[84] + 0.2666666666666667 * sp[86] + 0.1333333333333334 * sp[87] + 0.2666666666666669 * sp[85] + 0.1333333333333334 * sp[87] + 0.2666666666666667 * sp[88];
    A[981] = 0.006349206349206346 * sp[98] + 0.1333333333333335 * sp[84] + 0.1333333333333334 * sp[85] + 0.1333333333333332 * sp[84] + 0.1333333333333334 * sp[87] + 0.1333333333333333 * sp[88];
    A[982] = -0.03333333333333337 * sp[95] + 0.03333333333333329 * sp[96] + -0.03333333333333335 * sp[97];
    A[983] = -0.03333333333333335 * sp[95] + -0.03333333333333331 * sp[97];
    A[984] = -0.06666666666666671 * sp[95] + -0.03333333333333334 * sp[96] + -0.06666666666666665 * sp[97];
    A[985] = -0.03333333333333335 * sp[95] + -0.03333333333333331 * sp[97];
    std::fill(A + 986, A + 1006, 0.0);
    A[1006] = -0.001587301587301586 * sp[98] + -0.1333333333333332 * sp[83] + -0.1333333333333333 * sp[84] + -0.1333333333333333 * sp[85] + -0.03333333333333353 * sp[84] + -0.03333333333333355 * sp[86] + -0.03333333333333345 * sp[87] + -0.03333333333333352 * sp[85] + -0.03333333333333355 * sp[87] + -0.03333333333333344 * sp[88];
    A[1007] = -0.001587301587301586 * sp[98] + -0.1333333333333332 * sp[83] + -0.09999999999999984 * sp[84] + -0.09999999999999983 * sp[85];
    A[1008] = -0.002380952380952379 * sp[98] + 0.03333333333333368 * sp[86] + 0.03333333333333374 * sp[87];
    A[1009] = -0.002380952380952379 * sp[98] + 0.03333333333333388 * sp[87] + 0.03333333333333383 * sp[88];
    A[1010] = 0.003174603174603175 * sp[98] + -0.1333333333333335 * sp[86] + -0.1333333333333336 * sp[87] + -0.1333333333333336 * sp[87] + -0.1333333333333335 * sp[88];
    A[1011] = 0.006349206349206349 * sp[98] + -0.1333333333333336 * sp[85] + -0.1333333333333335 * sp[84] + -0.2666666666666678 * sp[87] + -0.1333333333333335 * sp[85] + -0.2666666666666677 * sp[88];
    A[1012] = 0.006349206349206349 * sp[98] + -0.1333333333333335 * sp[84] + -0.1333333333333335 * sp[84] + -0.2666666666666676 * sp[86] + -0.1333333333333334 * sp[85] + -0.2666666666666676 * sp[87];
    A[1013] = 0.006349206349206349 * sp[98] + 0.1333333333333332 * sp[85] + 0.1333333333333335 * sp[84] + 0.1333333333333335 * sp[86] + 0.1333333333333335 * sp[85] + 0.1333333333333335 * sp[87];
    A[1014] = 0.006349206349206346 * sp[98] + 0.1333333333333332 * sp[84] + 0.1333333333333335 * sp[84] + 0.1333333333333334 * sp[87] + 0.1333333333333334 * sp[85] + 0.1333333333333333 * sp[88];
    A[1015] = 0.01269841269841269 * sp[98] + 0.2666666666666665 * sp[83] + 0.1333333333333334 * sp[84] + 0.1333333333333334 * sp[85] + 0.1333333333333334 * sp[84] + 0.2666666666666667 * sp[86] + 0.2666666666666667 * sp[87] + 0.1333333333333334 * sp[85] + 0.2666666666666667 * sp[87] + 0.2666666666666666 * sp[88];
    A[1016] = 0.03333333333333328 * sp[95] + -0.03333333333333335 * sp[96] + -0.03333333333333334 * sp[97];
    A[1017] = -0.03333333333333334 * sp[95] + -0.06666666666666664 * sp[96] + -0.06666666666666664 * sp[97];
    A[1018] = -0.03333333333333335 * sp[96] + -0.03333333333333332 * sp[97];
    A[1019] = -0.03333333333333334 * sp[96] + -0.03333333333333335 * sp[97];
    A[1020] = -0.02499999999999993 * sp[74] + -0.02499999999999994 * sp[75] + -0.02499999999999996 * sp[76];
    A[1021] = -0.008333333333333351 * sp[74];
    A[1022] = -0.008333333333333427 * sp[75];
    A[1023] = -0.008333333333333467 * sp[76];
    A[1024] = 0.03333333333333337 * sp[75] + 0.03333333333333339 * sp[76];
    A[1025] = 0.03333333333333337 * sp[74] + 0.03333333333333355 * sp[76];
    A[1026] = 0.03333333333333336 * sp[74] + 0.03333333333333353 * sp[75];
    A[1027] = -0.03333333333333337 * sp[74] + -0.03333333333333336 * sp[75] + 0.03333333333333331 * sp[76];
    A[1028] = -0.03333333333333337 * sp[74] + 0.03333333333333329 * sp[75] + -0.03333333333333335 * sp[76];
    A[1029] = 0.03333333333333328 * sp[74] + -0.03333333333333335 * sp[75] + -0.03333333333333334 * sp[76];
    A[1030] = -0.02499999999999993 * sp[77] + -0.02499999999999994 * sp[78] + -0.02499999999999996 * sp[79];
    A[1031] = -0.008333333333333351 * sp[77];
    A[1032] = -0.008333333333333427 * sp[78];
    A[1033] = -0.008333333333333467 * sp[79];
    A[1034] = 0.03333333333333337 * sp[78] + 0.03333333333333339 * sp[79];
    A[1035] = 0.03333333333333337 * sp[77] + 0.03333333333333355 * sp[79];
    A[1036] = 0.03333333333333336 * sp[77] + 0.03333333333333353 * sp[78];
    A[1037] = -0.03333333333333337 * sp[77] + -0.03333333333333336 * sp[78] + 0.03333333333333331 * sp[79];
    A[1038] = -0.03333333333333337 * sp[77] + 0.03333333333333329 * sp[78] + -0.03333333333333335 * sp[79];
    A[1039] = 0.03333333333333328 * sp[77] + -0.03333333333333335 * sp[78] + -0.03333333333333334 * sp[79];
    A[1040] = -0.02499999999999993 * sp[80] + -0.02499999999999994 * sp[81] + -0.02499999999999996 * sp[82];
    A[1041] = -0.008333333333333351 * sp[80];
    A[1042] = -0.008333333333333427 * sp[81];
    A[1043] = -0.008333333333333467 * sp[82];
    A[1044] = 0.03333333333333337 * sp[81] + 0.03333333333333339 * sp[82];
    A[1045] = 0.03333333333333337 * sp[80] + 0.03333333333333355 * sp[82];
    A[1046] = 0.03333333333333336 * sp[80] + 0.03333333333333353 * sp[81];
    A[1047] = -0.03333333333333337 * sp[80] + -0.03333333333333336 * sp[81] + 0.03333333333333331 * sp[82];
    A[1048] = -0.03333333333333337 * sp[80] + 0.03333333333333329 * sp[81] + -0.03333333333333335 * sp[82];
    A[1049] = 0.03333333333333328 * sp[80] + -0.03333333333333335 * sp[81] + -0.03333333333333334 * sp[82];
    std::fill(A + 1050, A + 1054, 0.0);
    A[1054] = 0.008333333333333382 * sp[74] + 0.008333333333333392 * sp[75] + 0.008333333333333364 * sp[76];
    A[1055] = 0.02499999999999995 * sp[74];
    A[1056] = -0.008333333333333423 * sp[75];
    A[1057] = -0.008333333333333463 * sp[76];
    A[1058] = 0.03333333333333337 * sp[75] + 0.03333333333333337 * sp[76];
    A[1059] = 0.03333333333333335 * sp[74] + 0.0666666666666669 * sp[76];
    A[1060] = 0.03333333333333334 * sp[74] + 0.06666666666666687 * sp[75];
    A[1061] = -0.03333333333333334 * sp[74] + -0.03333333333333335 * sp[75];
    A[1062] = -0.03333333333333335 * sp[74] + -0.03333333333333331 * sp[76];
    A[1063] = -0.03333333333333334 * sp[74] + -0.06666666666666664 * sp[75] + -0.06666666666666664 * sp[76];
    A[1064] = 0.008333333333333382 * sp[77] + 0.008333333333333392 * sp[78] + 0.008333333333333364 * sp[79];
    A[1065] = 0.02499999999999995 * sp[77];
    A[1066] = -0.008333333333333423 * sp[78];
    A[1067] = -0.008333333333333463 * sp[79];
    A[1068] = 0.03333333333333337 * sp[78] + 0.03333333333333337 * sp[79];
    A[1069] = 0.03333333333333335 * sp[77] + 0.0666666666666669 * sp[79];
    A[1070] = 0.03333333333333334 * sp[77] + 0.06666666666666687 * sp[78];
    A[1071] = -0.03333333333333334 * sp[77] + -0.03333333333333335 * sp[78];
    A[1072] = -0.03333333333333335 * sp[77] + -0.03333333333333331 * sp[79];
    A[1073] = -0.03333333333333334 * sp[77] + -0.06666666666666664 * sp[78] + -0.06666666666666664 * sp[79];
    A[1074] = 0.008333333333333382 * sp[80] + 0.008333333333333392 * sp[81] + 0.008333333333333364 * sp[82];
    A[1075] = 0.02499999999999995 * sp[80];
    A[1076] = -0.008333333333333423 * sp[81];
    A[1077] = -0.008333333333333463 * sp[82];
    A[1078] = 0.03333333333333337 * sp[81] + 0.03333333333333337 * sp[82];
    A[1079] = 0.03333333333333335 * sp[80] + 0.0666666666666669 * sp[82];
    A[1080] = 0.03333333333333334 * sp[80] + 0.06666666666666687 * sp[81];
    A[1081] = -0.03333333333333334 * sp[80] + -0.03333333333333335 * sp[81];
    A[1082] = -0.03333333333333335 * sp[80] + -0.03333333333333331 * sp[82];
    A[1083] = -0.03333333333333334 * sp[80] + -0.06666666666666664 * sp[81] + -0.06666666666666664 * sp[82];
    std::fill(A + 1084, A + 1088, 0.0);
    A[1088] = 0.008333333333333385 * sp[74] + 0.008333333333333384 * sp[75] + 0.008333333333333363 * sp[76];
    A[1089] = -0.008333333333333371 * sp[74];
    A[1090] = 0.02499999999999987 * sp[75];
    A[1091] = -0.008333333333333467 * sp[76];
    A[1092] = 0.03333333333333337 * sp[75] + 0.06666666666666672 * sp[76];
    A[1093] = 0.03333333333333335 * sp[74] + 0.03333333333333354 * sp[76];
    A[1094] = 0.06666666666666668 * sp[74] + 0.03333333333333355 * sp[75];
    A[1095] = -0.03333333333333335 * sp[74] + -0.03333333333333336 * sp[75];
    A[1096] = -0.06666666666666671 * sp[74] + -0.03333333333333334 * sp[75] + -0.06666666666666665 * sp[76];
    A[1097] = -0.03333333333333335 * sp[75] + -0.03333333333333332 * sp[76];
    A[1098] = 0.008333333333333385 * sp[77] + 0.008333333333333384 * sp[78] + 0.008333333333333363 * sp[79];
    A[1099] = -0.008333333333333371 * sp[77];
    A[1100] = 0.02499999999999987 * sp[78];
    A[1101] = -0.008333333333333467 * sp[79];
    A[1102] = 0.03333333333333337 * sp[78] + 0.06666666666666672 * sp[79];
    A[1103] = 0.03333333333333335 * sp[77] + 0.03333333333333354 * sp[79];
    A[1104] = 0.06666666666666668 * sp[77] + 0.03333333333333355 * sp[78];
    A[1105] = -0.03333333333333335 * sp[77] + -0.03333333333333336 * sp[78];
    A[1106] = -0.06666666666666671 * sp[77] + -0.03333333333333334 * sp[78] + -0.06666666666666665 * sp[79];
    A[1107] = -0.03333333333333335 * sp[78] + -0.03333333333333332 * sp[79];
    A[1108] = 0.008333333333333385 * sp[80] + 0.008333333333333384 * sp[81] + 0.008333333333333363 * sp[82];
    A[1109] = -0.008333333333333371 * sp[80];
    A[1110] = 0.02499999999999987 * sp[81];
    A[1111] = -0.008333333333333467 * sp[82];
    A[1112] = 0.03333333333333337 * sp[81] + 0.06666666666666672 * sp[82];
    A[1113] = 0.03333333333333335 * sp[80] + 0.03333333333333354 * sp[82];
    A[1114] = 0.06666666666666668 * sp[80] + 0.03333333333333355 * sp[81];
    A[1115] = -0.03333333333333335 * sp[80] + -0.03333333333333336 * sp[81];
    A[1116] = -0.06666666666666671 * sp[80] + -0.03333333333333334 * sp[81] + -0.06666666666666665 * sp[82];
    A[1117] = -0.03333333333333335 * sp[81] + -0.03333333333333332 * sp[82];
    std::fill(A + 1118, A + 1122, 0.0);
    A[1122] = 0.008333333333333385 * sp[74] + 0.008333333333333392 * sp[75] + 0.008333333333333366 * sp[76];
    A[1123] = -0.008333333333333354 * sp[74];
    A[1124] = -0.008333333333333416 * sp[75];
    A[1125] = 0.02499999999999987 * sp[76];
    A[1126] = 0.06666666666666671 * sp[75] + 0.03333333333333332 * sp[76];
    A[1127] = 0.06666666666666671 * sp[74] + 0.03333333333333359 * sp[76];
    A[1128] = 0.03333333333333335 * sp[74] + 0.03333333333333349 * sp[75];
    A[1129] = -0.06666666666666669 * sp[74] + -0.06666666666666669 * sp[75] + -0.03333333333333334 * sp[76];
    A[1130] = -0.03333333333333335 * sp[74] + -0.03333333333333331 * sp[76];
    A[1131] = -0.03333333333333334 * sp[75] + -0.03333333333333335 * sp[76];
    A[1132] = 0.008333333333333385 * sp[77] + 0.008333333333333392 * sp[78] + 0.008333333333333366 * sp[79];
    A[1133] = -0.008333333333333354 * sp[77];
    A[1134] = -0.008333333333333416 * sp[78];
    A[1135] = 0.02499999999999987 * sp[79];
    A[1136] = 0.06666666666666671 * sp[78] + 0.03333333333333332 * sp[79];
    A[1137] = 0.06666666666666671 * sp[77] + 0.03333333333333359 * sp[79];
    A[1138] = 0.03333333333333335 * sp[77] + 0.03333333333333349 * sp[78];
    A[1139] = -0.06666666666666669 * sp[77] + -0.06666666666666669 * sp[78] + -0.03333333333333334 * sp[79];
    A[1140] = -0.03333333333333335 * sp[77] + -0.03333333333333331 * sp[79];
    A[1141] = -0.03333333333333334 * sp[78] + -0.03333333333333335 * sp[79];
    A[1142] = 0.008333333333333385 * sp[80] + 0.008333333333333392 * sp[81] + 0.008333333333333366 * sp[82];
    A[1143] = -0.008333333333333354 * sp[80];
    A[1144] = -0.008333333333333416 * sp[81];
    A[1145] = 0.02499999999999987 * sp[82];
    A[1146] = 0.06666666666666671 * sp[81] + 0.03333333333333332 * sp[82];
    A[1147] = 0.06666666666666671 * sp[80] + 0.03333333333333359 * sp[82];
    A[1148] = 0.03333333333333335 * sp[80] + 0.03333333333333349 * sp[81];
    A[1149] = -0.06666666666666669 * sp[80] + -0.06666666666666669 * sp[81] + -0.03333333333333334 * sp[82];
    A[1150] = -0.03333333333333335 * sp[80] + -0.03333333333333331 * sp[82];
    A[1151] = -0.03333333333333334 * sp[81] + -0.03333333333333335 * sp[82];
    std::fill(A + 1152, A + 1156, 0.0);
  }

};


class navierstokes_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  navierstokes_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~navierstokes_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 5
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 5
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           5
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights15[15] = { 0.03028367809708918, 0.006026785714285717, 0.006026785714285717, 0.006026785714285717, 0.006026785714285717, 0.01164524908602897, 0.01164524908602897, 0.01164524908602897, 0.01164524908602897, 0.01094914156138645, 0.01094914156138645, 0.01094914156138645, 0.01094914156138645, 0.01094914156138645, 0.01094914156138645 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE12_C0_D001_Q15[1][15][7] =
        { { { 0.0, 0.0, 1.0, 1.0, 0.0, -1.0, -1.0 },
            { -0.3333333333333323, 0.3333333333333297, 1.333333333333334, 0.0, 0.0, -1.333333333333334, 0.0 },
            { 1.0, 0.33333333333333, 1.333333333333333, 1.333333333333339, -1.333333333333334, -1.333333333333333, -1.333333333333332 },
            { -0.3333333333333324, -1.0, 1.333333333333337, 1.333333333333339, 1.333333333333332, -1.333333333333334, -1.333333333333333 },
            { -0.3333333333333331, 0.3333333333333301, 0.0, 1.33333333333334, 0.0, 0.0, -1.333333333333335 },
            { 0.636363636363638, -0.6363636363636402, 0.3636363636363659, 2.909090909090918, 0.0, -0.3636363636363634, -2.90909090909091 },
            { -1.909090909090909, -0.6363636363636406, 0.3636363636363657, 0.3636363636363679, 2.545454545454546, -0.3636363636363639, -0.363636363636363 },
            { 0.6363636363636377, 1.909090909090906, 0.3636363636363606, 0.3636363636363719, -2.545454545454547, -0.3636363636363619, -0.363636363636365 },
            { 0.6363636363636371, -0.6363636363636406, 2.909090909090912, 0.3636363636363675, 0.0, -2.90909090909091, -0.3636363636363634 },
            { -0.733799385705342, -0.733799385705347, 0.2662006142946598, 1.733799385705349, 1.467598771410686, -0.2662006142946579, -1.733799385705344 },
            { -0.7337993857053416, -0.7337993857053474, 1.733799385705347, 0.2662006142946641, 1.467598771410685, -1.733799385705344, -0.2662006142946577 },
            { -0.7337993857053421, 0.7337993857053398, 0.2662006142946555, 0.2662006142946637, 0.0, -0.2662006142946558, -0.2662006142946578 },
            { 0.7337993857053441, 0.7337993857053396, 1.733799385705343, 0.2662006142946631, -1.467598771410687, -1.733799385705343, -0.2662006142946569 },
            { 0.7337993857053433, 0.7337993857053399, 0.2662006142946556, 1.733799385705351, -1.467598771410686, -0.2662006142946563, -1.733799385705344 },
            { 0.733799385705344, -0.733799385705347, 1.733799385705346, 1.733799385705349, 0.0, -1.733799385705343, -1.733799385705342 } } };
    alignas(32) static const double FE12_C0_D010_Q15[1][15][7] =
        { { { 0.0, 0.0, 1.0, 1.0, -1.0, 0.0, -1.0 },
            { -0.3333333333333323, 0.3333333333333303, 1.333333333333335, 0.0, -1.333333333333334, 0.0, 0.0 },
            { 1.0, 0.3333333333333308, 1.333333333333335, 1.333333333333338, -1.333333333333334, -1.333333333333335, -1.333333333333332 },
            { -0.3333333333333318, 0.3333333333333297, 0.0, 1.333333333333341, 0.0, 0.0, -1.333333333333335 },
            { -0.333333333333332, -1.0, 1.333333333333335, 1.333333333333337, -1.333333333333334, 1.333333333333333, -1.333333333333334 },
            { 0.6363636363636381, -0.636363636363639, 0.3636363636363646, 2.909090909090917, -0.3636363636363643, 0.0, -2.90909090909091 },
            { -1.909090909090909, -0.6363636363636395, 0.3636363636363646, 0.3636363636363688, -0.3636363636363643, 2.545454545454546, -0.3636363636363638 },
            { 0.6363636363636389, -0.6363636363636382, 2.909090909090912, 0.3636363636363661, -2.909090909090911, 0.0, -0.3636363636363639 },
            { 0.6363636363636382, 1.909090909090905, 0.3636363636363644, 0.363636363636371, -0.3636363636363639, -2.545454545454546, -0.363636363636365 },
            { -0.733799385705341, -0.733799385705346, 0.2662006142946577, 1.73379938570535, -0.2662006142946579, 1.467598771410684, -1.733799385705344 },
            { -0.7337993857053419, 0.7337993857053393, 0.2662006142946585, 0.2662006142946649, -0.2662006142946584, 0.0, -0.2662006142946591 },
            { -0.7337993857053415, -0.7337993857053451, 1.733799385705345, 0.2662006142946603, -1.733799385705344, 1.467598771410686, -0.2662006142946574 },
            { 0.7337993857053446, 0.7337993857053398, 1.733799385705345, 0.2662006142946619, -1.733799385705344, -1.467598771410687, -0.2662006142946572 },
            { 0.7337993857053442, -0.733799385705345, 1.733799385705345, 1.733799385705347, -1.733799385705344, 0.0, -1.733799385705343 },
            { 0.7337993857053449, 0.7337993857053399, 0.2662006142946575, 1.73379938570535, -0.2662006142946576, -1.467598771410688, -1.733799385705343 } } };
    alignas(32) static const double FE12_C0_D100_Q15[1][15][7] =
        { { { 0.0, 0.0, 1.0, 1.0, -1.0, -1.0, 0.0 },
            { -0.3333333333333313, -1.0, 1.333333333333335, 1.333333333333334, -1.333333333333334, -1.333333333333335, 1.333333333333332 },
            { 1.0, 0.3333333333333314, 1.333333333333334, 1.333333333333334, -1.333333333333334, -1.333333333333335, -1.333333333333333 },
            { -0.3333333333333321, 0.3333333333333326, 0.0, 1.333333333333335, 0.0, -1.333333333333335, 0.0 },
            { -0.3333333333333334, 0.3333333333333318, 1.333333333333335, 0.0, -1.333333333333334, 0.0, 0.0 },
            { 0.6363636363636385, 1.909090909090909, 0.3636363636363639, 0.3636363636363637, -0.3636363636363637, -0.363636363636364, -2.545454545454548 },
            { -1.909090909090908, -0.636363636363636, 0.3636363636363643, 0.3636363636363641, -0.3636363636363641, -0.3636363636363644, 2.545454545454544 },
            { 0.6363636363636384, -0.6363636363636366, 2.909090909090912, 0.3636363636363634, -2.909090909090911, -0.3636363636363633, 0.0 },
            { 0.6363636363636377, -0.6363636363636391, 0.3636363636363636, 2.909090909090911, -0.3636363636363636, -2.909090909090912, 0.0 },
            { -0.7337993857053419, 0.7337993857053424, 0.2662006142946576, 0.2662006142946575, -0.2662006142946575, -0.2662006142946577, 0.0 },
            { -0.7337993857053416, -0.7337993857053436, 0.2662006142946584, 1.733799385705345, -0.2662006142946583, -1.733799385705346, 1.467598771410686 },
            { -0.7337993857053405, -0.7337993857053428, 1.733799385705344, 0.2662006142946568, -1.733799385705344, -0.2662006142946568, 1.467598771410684 },
            { 0.7337993857053454, -0.7337993857053438, 1.733799385705345, 1.733799385705344, -1.733799385705344, -1.733799385705344, 0.0 },
            { 0.7337993857053424, 0.7337993857053403, 1.733799385705345, 0.2662006142946571, -1.733799385705344, -0.2662006142946572, -1.467598771410683 },
            { 0.7337993857053453, 0.7337993857053422, 0.2662006142946575, 1.733799385705344, -0.2662006142946574, -1.733799385705345, -1.467598771410688 } } };
    alignas(32) static const double FE12_C0_Q15[1][15][10] =
        { { { -0.1249999999999999, -0.1249999999999999, -0.1249999999999999, -0.125, 0.25, 0.2500000000000001, 0.25, 0.2500000000000001, 0.2499999999999999, 0.2500000000000001 },
            { -0.111111111111111, 0.0, -0.1111111111111111, -0.1111111111111112, 0.4444444444444445, 0.0, 0.0, 0.4444444444444446, 0.4444444444444445, 0.0 },
            { 0.0, -0.1111111111111111, -0.1111111111111111, -0.1111111111111111, 0.4444444444444445, 0.4444444444444445, 0.4444444444444444, 0.0, 0.0, 0.0 },
            { -0.111111111111111, -0.111111111111111, -0.111111111111111, 0.0, 0.0, 0.0, 0.4444444444444444, 0.0, 0.4444444444444444, 0.4444444444444445 },
            { -0.111111111111111, -0.1111111111111111, 0.0, -0.1111111111111111, 0.0, 0.4444444444444445, 0.0, 0.4444444444444446, 0.0, 0.4444444444444445 },
            { -0.07438016528925619, 0.3305785123966941, -0.07438016528925616, -0.07438016528925616, 0.03305785123966937, 0.2644628099173554, 0.2644628099173553, 0.03305785123966953, 0.03305785123966934, 0.2644628099173556 },
            { 0.3305785123966944, -0.07438016528925614, -0.07438016528925619, -0.07438016528925617, 0.03305785123966941, 0.03305785123966942, 0.03305785123966944, 0.2644628099173554, 0.2644628099173553, 0.2644628099173553 },
            { -0.07438016528925614, -0.07438016528925617, -0.07438016528925623, 0.3305785123966942, 0.2644628099173553, 0.2644628099173553, 0.03305785123966939, 0.2644628099173555, 0.03305785123966933, 0.03305785123966946 },
            { -0.07438016528925614, -0.07438016528925612, 0.3305785123966941, -0.07438016528925617, 0.2644628099173553, 0.03305785123966944, 0.2644628099173552, 0.03305785123966952, 0.2644628099173553, 0.03305785123966947 },
            { -0.05769230769230758, -0.05769230769230758, -0.05769230769230762, -0.0576923076923077, 0.01771569176271325, 0.1153846153846154, 0.1153846153846153, 0.1153846153846155, 0.1153846153846153, 0.7515150774680561 },
            { -0.0576923076923076, -0.05769230769230763, -0.05769230769230763, -0.05769230769230771, 0.1153846153846154, 0.01771569176271329, 0.1153846153846154, 0.1153846153846155, 0.751515077468056, 0.1153846153846154 },
            { -0.05769230769230762, -0.05769230769230768, -0.0576923076923077, -0.0576923076923077, 0.1153846153846153, 0.1153846153846154, 0.01771569176271323, 0.7515150774680562, 0.1153846153846153, 0.1153846153846155 },
            { -0.05769230769230762, -0.05769230769230766, -0.05769230769230768, -0.05769230769230772, 0.7515150774680562, 0.1153846153846155, 0.1153846153846154, 0.1153846153846155, 0.1153846153846153, 0.01771569176271329 },
            { -0.05769230769230764, -0.05769230769230765, -0.0576923076923077, -0.05769230769230763, 0.1153846153846153, 0.7515150774680562, 0.1153846153846154, 0.1153846153846155, 0.01771569176271311, 0.1153846153846154 },
            { -0.05769230769230761, -0.0576923076923076, -0.05769230769230749, -0.05769230769230771, 0.1153846153846154, 0.1153846153846155, 0.751515077468056, 0.01771569176271333, 0.1153846153846151, 0.1153846153846154 } } };
    alignas(32) static const double FE8_C0_D001_Q15[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE8_C0_D001_Q15[0][0][0] + coordinate_dofs[7] * FE8_C0_D001_Q15[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE8_C0_D001_Q15[0][0][0] + coordinate_dofs[11] * FE8_C0_D001_Q15[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE8_C0_D001_Q15[0][0][0] + coordinate_dofs[10] * FE8_C0_D001_Q15[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE8_C0_D001_Q15[0][0][0] + coordinate_dofs[8] * FE8_C0_D001_Q15[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE8_C0_D001_Q15[0][0][0] + coordinate_dofs[3] * FE8_C0_D001_Q15[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE8_C0_D001_Q15[0][0][0] + coordinate_dofs[6] * FE8_C0_D001_Q15[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE8_C0_D001_Q15[0][0][0] + coordinate_dofs[5] * FE8_C0_D001_Q15[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE8_C0_D001_Q15[0][0][0] + coordinate_dofs[4] * FE8_C0_D001_Q15[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE8_C0_D001_Q15[0][0][0] + coordinate_dofs[9] * FE8_C0_D001_Q15[0][0][1];
    alignas(32) double sp[44];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = J_c2 * J_c7;
    sp[20] = J_c8 * (-1 * J_c1);
    sp[21] = sp[19] + sp[20];
    sp[22] = sp[21] / sp[13];
    sp[23] = J_c0 * J_c8;
    sp[24] = J_c6 * (-1 * J_c2);
    sp[25] = sp[23] + sp[24];
    sp[26] = sp[25] / sp[13];
    sp[27] = J_c1 * J_c6;
    sp[28] = J_c0 * J_c7;
    sp[29] = sp[27] + -1 * sp[28];
    sp[30] = sp[29] / sp[13];
    sp[31] = J_c1 * J_c5;
    sp[32] = J_c2 * J_c4;
    sp[33] = sp[31] + -1 * sp[32];
    sp[34] = sp[33] / sp[13];
    sp[35] = J_c2 * J_c3;
    sp[36] = J_c0 * J_c5;
    sp[37] = sp[35] + -1 * sp[36];
    sp[38] = sp[37] / sp[13];
    sp[39] = J_c0 * J_c4;
    sp[40] = J_c1 * J_c3;
    sp[41] = sp[39] + -1 * sp[40];
    sp[42] = sp[41] / sp[13];
    sp[43] = std::abs(sp[13]);
    alignas(32) double BF0[10] = {};
    alignas(32) double BF1[10] = {};
    alignas(32) double BF2[10] = {};
    for (int iq = 0; iq < 15; ++iq)
    {
        // Quadrature loop body setup (num_points=15)
        // Unstructured varying computations for num_points=15
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c0 += w[0][ic] * FE12_C0_Q15[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c1 += w[0][ic + 10] * FE12_C0_Q15[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w0_c2 += w[0][ic + 20] * FE12_C0_Q15[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w1_c0 += w[1][ic] * FE12_C0_Q15[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w1_c1 += w[1][ic + 10] * FE12_C0_Q15[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 10; ++ic)
            w1_c2 += w[1][ic + 20] * FE12_C0_Q15[0][iq][ic];
        const double w0_d0_c0 = w[0][0] * FE12_C0_D100_Q15[0][iq][0] + w[0][1] * FE12_C0_D100_Q15[0][iq][1] + w[0][5] * FE12_C0_D100_Q15[0][iq][2] + w[0][6] * FE12_C0_D100_Q15[0][iq][3] + w[0][7] * FE12_C0_D100_Q15[0][iq][4] + w[0][8] * FE12_C0_D100_Q15[0][iq][5] + w[0][9] * FE12_C0_D100_Q15[0][iq][6];
        const double w0_d1_c0 = w[0][0] * FE12_C0_D010_Q15[0][iq][0] + w[0][2] * FE12_C0_D010_Q15[0][iq][1] + w[0][4] * FE12_C0_D010_Q15[0][iq][2] + w[0][6] * FE12_C0_D010_Q15[0][iq][3] + w[0][7] * FE12_C0_D010_Q15[0][iq][4] + w[0][8] * FE12_C0_D010_Q15[0][iq][5] + w[0][9] * FE12_C0_D010_Q15[0][iq][6];
        const double w0_d2_c0 = w[0][0] * FE12_C0_D001_Q15[0][iq][0] + w[0][3] * FE12_C0_D001_Q15[0][iq][1] + w[0][4] * FE12_C0_D001_Q15[0][iq][2] + w[0][5] * FE12_C0_D001_Q15[0][iq][3] + w[0][7] * FE12_C0_D001_Q15[0][iq][4] + w[0][8] * FE12_C0_D001_Q15[0][iq][5] + w[0][9] * FE12_C0_D001_Q15[0][iq][6];
        const double w0_d0_c1 = w[0][10] * FE12_C0_D100_Q15[0][iq][0] + w[0][11] * FE12_C0_D100_Q15[0][iq][1] + w[0][15] * FE12_C0_D100_Q15[0][iq][2] + w[0][16] * FE12_C0_D100_Q15[0][iq][3] + w[0][17] * FE12_C0_D100_Q15[0][iq][4] + w[0][18] * FE12_C0_D100_Q15[0][iq][5] + w[0][19] * FE12_C0_D100_Q15[0][iq][6];
        const double w0_d1_c1 = w[0][10] * FE12_C0_D010_Q15[0][iq][0] + w[0][12] * FE12_C0_D010_Q15[0][iq][1] + w[0][14] * FE12_C0_D010_Q15[0][iq][2] + w[0][16] * FE12_C0_D010_Q15[0][iq][3] + w[0][17] * FE12_C0_D010_Q15[0][iq][4] + w[0][18] * FE12_C0_D010_Q15[0][iq][5] + w[0][19] * FE12_C0_D010_Q15[0][iq][6];
        const double w0_d2_c1 = w[0][10] * FE12_C0_D001_Q15[0][iq][0] + w[0][13] * FE12_C0_D001_Q15[0][iq][1] + w[0][14] * FE12_C0_D001_Q15[0][iq][2] + w[0][15] * FE12_C0_D001_Q15[0][iq][3] + w[0][17] * FE12_C0_D001_Q15[0][iq][4] + w[0][18] * FE12_C0_D001_Q15[0][iq][5] + w[0][19] * FE12_C0_D001_Q15[0][iq][6];
        const double w0_d0_c2 = w[0][20] * FE12_C0_D100_Q15[0][iq][0] + w[0][21] * FE12_C0_D100_Q15[0][iq][1] + w[0][25] * FE12_C0_D100_Q15[0][iq][2] + w[0][26] * FE12_C0_D100_Q15[0][iq][3] + w[0][27] * FE12_C0_D100_Q15[0][iq][4] + w[0][28] * FE12_C0_D100_Q15[0][iq][5] + w[0][29] * FE12_C0_D100_Q15[0][iq][6];
        const double w0_d1_c2 = w[0][20] * FE12_C0_D010_Q15[0][iq][0] + w[0][22] * FE12_C0_D010_Q15[0][iq][1] + w[0][24] * FE12_C0_D010_Q15[0][iq][2] + w[0][26] * FE12_C0_D010_Q15[0][iq][3] + w[0][27] * FE12_C0_D010_Q15[0][iq][4] + w[0][28] * FE12_C0_D010_Q15[0][iq][5] + w[0][29] * FE12_C0_D010_Q15[0][iq][6];
        const double w0_d2_c2 = w[0][20] * FE12_C0_D001_Q15[0][iq][0] + w[0][23] * FE12_C0_D001_Q15[0][iq][1] + w[0][24] * FE12_C0_D001_Q15[0][iq][2] + w[0][25] * FE12_C0_D001_Q15[0][iq][3] + w[0][27] * FE12_C0_D001_Q15[0][iq][4] + w[0][28] * FE12_C0_D001_Q15[0][iq][5] + w[0][29] * FE12_C0_D001_Q15[0][iq][6];
        alignas(32) double sv15[72];
        sv15[0] = -1 * w0_c0 / w[2][0];
        sv15[1] = -1 * w0_c1 / w[2][0];
        sv15[2] = -1 * w0_c2 / w[2][0];
        sv15[3] = -1 * (-1 * w1_c0) + -1 * sv15[0];
        sv15[4] = -1 * (-1 * w1_c1) + -1 * sv15[1];
        sv15[5] = -1 * (-1 * w1_c2) + -1 * sv15[2];
        sv15[6] = w0_d0_c0 * sp[14];
        sv15[7] = w0_d1_c0 * sp[17];
        sv15[8] = sv15[6] + sv15[7];
        sv15[9] = w0_d2_c0 * sp[18];
        sv15[10] = sv15[8] + sv15[9];
        sv15[11] = w0_c0 * sv15[10];
        sv15[12] = w0_d0_c0 * sp[22];
        sv15[13] = w0_d1_c0 * sp[26];
        sv15[14] = sv15[12] + sv15[13];
        sv15[15] = w0_d2_c0 * sp[30];
        sv15[16] = sv15[14] + sv15[15];
        sv15[17] = w0_c1 * sv15[16];
        sv15[18] = sv15[11] + sv15[17];
        sv15[19] = w0_d0_c0 * sp[34];
        sv15[20] = w0_d1_c0 * sp[38];
        sv15[21] = sv15[19] + sv15[20];
        sv15[22] = w0_d2_c0 * sp[42];
        sv15[23] = sv15[21] + sv15[22];
        sv15[24] = w0_c2 * sv15[23];
        sv15[25] = sv15[18] + sv15[24];
        sv15[26] = w0_d0_c1 * sp[14];
        sv15[27] = w0_d1_c1 * sp[17];
        sv15[28] = sv15[26] + sv15[27];
        sv15[29] = w0_d2_c1 * sp[18];
        sv15[30] = sv15[28] + sv15[29];
        sv15[31] = w0_c0 * sv15[30];
        sv15[32] = w0_d0_c1 * sp[22];
        sv15[33] = w0_d1_c1 * sp[26];
        sv15[34] = sv15[32] + sv15[33];
        sv15[35] = w0_d2_c1 * sp[30];
        sv15[36] = sv15[34] + sv15[35];
        sv15[37] = w0_c1 * sv15[36];
        sv15[38] = sv15[31] + sv15[37];
        sv15[39] = w0_d0_c1 * sp[34];
        sv15[40] = w0_d1_c1 * sp[38];
        sv15[41] = sv15[39] + sv15[40];
        sv15[42] = w0_d2_c1 * sp[42];
        sv15[43] = sv15[41] + sv15[42];
        sv15[44] = w0_c2 * sv15[43];
        sv15[45] = sv15[38] + sv15[44];
        sv15[46] = w0_d0_c2 * sp[14];
        sv15[47] = w0_d1_c2 * sp[17];
        sv15[48] = sv15[46] + sv15[47];
        sv15[49] = w0_d2_c2 * sp[18];
        sv15[50] = sv15[48] + sv15[49];
        sv15[51] = w0_c0 * sv15[50];
        sv15[52] = w0_d0_c2 * sp[22];
        sv15[53] = w0_d1_c2 * sp[26];
        sv15[54] = sv15[52] + sv15[53];
        sv15[55] = w0_d2_c2 * sp[30];
        sv15[56] = sv15[54] + sv15[55];
        sv15[57] = w0_c1 * sv15[56];
        sv15[58] = sv15[51] + sv15[57];
        sv15[59] = w0_d0_c2 * sp[34];
        sv15[60] = w0_d1_c2 * sp[38];
        sv15[61] = sv15[59] + sv15[60];
        sv15[62] = w0_d2_c2 * sp[42];
        sv15[63] = sv15[61] + sv15[62];
        sv15[64] = w0_c2 * sv15[63];
        sv15[65] = sv15[58] + sv15[64];
        sv15[66] = sv15[3] + -1 * sv15[25];
        sv15[67] = sv15[4] + -1 * sv15[45];
        sv15[68] = sv15[5] + -1 * sv15[65];
        sv15[69] = sv15[66] * sp[43];
        sv15[70] = sv15[67] * sp[43];
        sv15[71] = sv15[68] * sp[43];
        const double fw0 = sv15[69] * weights15[iq];
        for (int i = 0; i < 10; ++i)
            BF0[i] += fw0 * FE12_C0_Q15[0][iq][i];
        const double fw1 = sv15[70] * weights15[iq];
        for (int i = 0; i < 10; ++i)
            BF1[i] += fw1 * FE12_C0_Q15[0][iq][i];
        const double fw2 = sv15[71] * weights15[iq];
        for (int i = 0; i < 10; ++i)
            BF2[i] += fw2 * FE12_C0_Q15[0][iq][i];
    }
    std::fill(A, A + 34, 0.0);
    for (int i = 0; i < 10; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 10; ++i)
        A[i + 10] += BF1[i];
    for (int i = 0; i < 10; ++i)
        A[i + 20] += BF2[i];
  }

};


class navierstokes_form_0: public ufc::form
{
public:

  navierstokes_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~navierstokes_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "725f923205ea1022c3563116b3b5fd3bce745cb2794320aa62658ec019c0b9b279de6db257145fc914b12aeadc94e9f2fea188947e09e6554d2a3a20037d7155";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 1;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 1)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new navierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new navierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new navierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_finite_element_4();
    case 1:
        return new navierstokes_finite_element_4();
    case 2:
        return new navierstokes_finite_element_5();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_dofmap_4();
    case 1:
        return new navierstokes_dofmap_4();
    case 2:
        return new navierstokes_dofmap_5();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new navierstokes_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class navierstokes_form_1: public ufc::form
{
public:

  navierstokes_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~navierstokes_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "b4cefa503fda57d13856079f956748ab4eb29e5fb3aab26f3c0cf4b2c2e9010016f9af3dde74c70f8f223caf152055ad8e27aa8ce995cda02d89ec333ba5b9c4";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 3;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 3)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new navierstokes_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new navierstokes_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new navierstokes_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_finite_element_4();
    case 1:
        return new navierstokes_finite_element_3();
    case 2:
        return new navierstokes_finite_element_3();
    case 3:
        return new navierstokes_finite_element_5();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes_dofmap_4();
    case 1:
        return new navierstokes_dofmap_3();
    case 2:
        return new navierstokes_dofmap_3();
    case 3:
        return new navierstokes_dofmap_5();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new navierstokes_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace NavierStokes
{

class CoefficientSpace_f: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_f(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_f(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_k: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_k(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_un: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_un(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_un(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_k Form_a_FunctionSpace_2;

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 1), k(*this, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const navierstokes_form_0>();
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k):
    dolfin::Form(2, 1), k(*this, 0)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->k = k;

    _ufc_form = std::make_shared<const navierstokes_form_0>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_k;

  // Coefficients
  dolfin::CoefficientAssigner k;
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), k(*this, 0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> k):
    dolfin::MultiMeshForm(V1, V0), k(*this, 0)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->k = k;

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "k")
      return 0;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "k";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_k;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner k;
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<navierstokes_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<navierstokes_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_un Form_L_FunctionSpace_1;

typedef CoefficientSpace_f Form_L_FunctionSpace_2;

typedef CoefficientSpace_k Form_L_FunctionSpace_3;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 3), un(*this, 0), f(*this, 1), k(*this, 2)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const navierstokes_form_1>();
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> un, std::shared_ptr<const dolfin::GenericFunction> f, std::shared_ptr<const dolfin::GenericFunction> k):
    dolfin::Form(1, 3), un(*this, 0), f(*this, 1), k(*this, 2)
  {
    _function_spaces[0] = V0;

    this->un = un;
    this->f = f;
    this->k = k;

    _ufc_form = std::make_shared<const navierstokes_form_1>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "un")
      return 0;
    else if (name == "f")
      return 1;
    else if (name == "k")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "un";
    case 1:
      return "f";
    case 2:
      return "k";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_un;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_f;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_k;

  // Coefficients
  dolfin::CoefficientAssigner un;
  dolfin::CoefficientAssigner f;
  dolfin::CoefficientAssigner k;
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), un(*this, 0), f(*this, 1), k(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> un, std::shared_ptr<const dolfin::GenericFunction> f, std::shared_ptr<const dolfin::GenericFunction> k):
    dolfin::MultiMeshForm(V0), un(*this, 0), f(*this, 1), k(*this, 2)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_L(V0->part(part)));
    add(a);

    }
    // Build multimesh form
    build();

    /// Assign coefficients
    this->un = un;
    this->f = f;
    this->k = k;

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "un")
      return 0;
    else if (name == "f")
      return 1;
    else if (name == "k")
      return 2;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "un";
    case 1:
      return "f";
    case 2:
      return "k";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_un;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_f;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_k;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner un;
  dolfin::MultiMeshCoefficientAssigner f;
  dolfin::MultiMeshCoefficientAssigner k;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef MultiMeshForm_a MultiMeshBilinearForm;
typedef Form_a JacobianForm;
typedef MultiMeshForm_a MultiMeshJacobianForm;
typedef Form_L LinearForm;
typedef MultiMeshForm_L MultiMeshLinearForm;
typedef Form_L ResidualForm;
typedef MultiMeshForm_L MultiMeshResidualForm;
typedef Form_a::TestSpace FunctionSpace;
typedef Form_a::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
